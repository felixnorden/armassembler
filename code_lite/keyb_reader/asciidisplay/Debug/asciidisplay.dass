
./Debug/asciidisplay.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#include "asciidisplay.h"
void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f822 	bl	2000004c <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <app_init>:

void app_init(void)
{
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	#ifdef USBDM
		*((unsigned long *)0x40023830) = 0x18;
20000014:	4b08      	ldr	r3, [pc, #32]	; (20000038 <app_init+0x28>)
20000016:	2218      	movs	r2, #24
20000018:	601a      	str	r2, [r3, #0]
		__asm volatile( " LDR R0,=0x08000209\n BLX R0 \n");
2000001a:	482e      	ldr	r0, [pc, #184]	; (200000d4 <main+0x88>)
2000001c:	4780      	blx	r0
	#endif
	
	// Init display port
	portModer = 0x55555555;
2000001e:	4b07      	ldr	r3, [pc, #28]	; (2000003c <app_init+0x2c>)
20000020:	4a07      	ldr	r2, [pc, #28]	; (20000040 <app_init+0x30>)
20000022:	601a      	str	r2, [r3, #0]
	portOtyper = 0x00000000;
20000024:	4b07      	ldr	r3, [pc, #28]	; (20000044 <app_init+0x34>)
20000026:	2200      	movs	r2, #0
20000028:	801a      	strh	r2, [r3, #0]
	portOspeedr = 0x55555555;
2000002a:	4b07      	ldr	r3, [pc, #28]	; (20000048 <app_init+0x38>)
2000002c:	4a04      	ldr	r2, [pc, #16]	; (20000040 <app_init+0x30>)
2000002e:	601a      	str	r2, [r3, #0]
}
20000030:	46c0      	nop			; (mov r8, r8)
20000032:	46bd      	mov	sp, r7
20000034:	bd80      	pop	{r7, pc}
20000036:	46c0      	nop			; (mov r8, r8)
20000038:	40023830 	andmi	r3, r2, r0, lsr r8
2000003c:	40021000 	andmi	r1, r2, r0
20000040:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000044:	40021004 	andmi	r1, r2, r4
20000048:	40021008 	andmi	r1, r2, r8

2000004c <main>:

void main(void)
{
2000004c:	b590      	push	{r4, r7, lr}
2000004e:	b08d      	sub	sp, #52	; 0x34
20000050:	af00      	add	r7, sp, #0
	char *s;
	char test1[] = " Kalles Kebabkaviar";
20000052:	2318      	movs	r3, #24
20000054:	18fb      	adds	r3, r7, r3
20000056:	4a1d      	ldr	r2, [pc, #116]	; (200000cc <main+0x80>)
20000058:	ca13      	ldmia	r2!, {r0, r1, r4}
2000005a:	c313      	stmia	r3!, {r0, r1, r4}
2000005c:	ca03      	ldmia	r2!, {r0, r1}
2000005e:	c303      	stmia	r3!, {r0, r1}
	char test2[] = "- I know you like it";
20000060:	003b      	movs	r3, r7
20000062:	4a1b      	ldr	r2, [pc, #108]	; (200000d0 <main+0x84>)
20000064:	ca13      	ldmia	r2!, {r0, r1, r4}
20000066:	c313      	stmia	r3!, {r0, r1, r4}
20000068:	ca03      	ldmia	r2!, {r0, r1}
2000006a:	c303      	stmia	r3!, {r0, r1}
2000006c:	7812      	ldrb	r2, [r2, #0]
2000006e:	701a      	strb	r2, [r3, #0]
	
	app_init();
20000070:	f7ff ffce 	bl	20000010 <app_init>
	ascii_init();
20000074:	f000 f993 	bl	2000039e <ascii_init>
	
	ascii_gotoxy(1,1);
20000078:	2101      	movs	r1, #1
2000007a:	2001      	movs	r0, #1
2000007c:	f000 f9a8 	bl	200003d0 <ascii_gotoxy>
	s = test1;
20000080:	2318      	movs	r3, #24
20000082:	18fb      	adds	r3, r7, r3
20000084:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (*s) 
20000086:	e006      	b.n	20000096 <main+0x4a>
	{
		ascii_write_char(*s++);
20000088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
2000008a:	1c5a      	adds	r2, r3, #1
2000008c:	62fa      	str	r2, [r7, #44]	; 0x2c
2000008e:	781b      	ldrb	r3, [r3, #0]
20000090:	0018      	movs	r0, r3
20000092:	f000 f9c5 	bl	20000420 <ascii_write_char>
	while (*s) 
20000096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20000098:	781b      	ldrb	r3, [r3, #0]
2000009a:	2b00      	cmp	r3, #0
2000009c:	d1f4      	bne.n	20000088 <main+0x3c>
	}
	
	ascii_gotoxy(1,2);
2000009e:	2102      	movs	r1, #2
200000a0:	2001      	movs	r0, #1
200000a2:	f000 f995 	bl	200003d0 <ascii_gotoxy>
	s = test2;
200000a6:	003b      	movs	r3, r7
200000a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (*s)
200000aa:	e006      	b.n	200000ba <main+0x6e>
	{
		ascii_write_char(*s++);
200000ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200000ae:	1c5a      	adds	r2, r3, #1
200000b0:	62fa      	str	r2, [r7, #44]	; 0x2c
200000b2:	781b      	ldrb	r3, [r3, #0]
200000b4:	0018      	movs	r0, r3
200000b6:	f000 f9b3 	bl	20000420 <ascii_write_char>
	while (*s)
200000ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200000bc:	781b      	ldrb	r3, [r3, #0]
200000be:	2b00      	cmp	r3, #0
200000c0:	d1f4      	bne.n	200000ac <main+0x60>
	}
}
200000c2:	46c0      	nop			; (mov r8, r8)
200000c4:	46bd      	mov	sp, r7
200000c6:	b00d      	add	sp, #52	; 0x34
200000c8:	bd90      	pop	{r4, r7, pc}
200000ca:	46c0      	nop			; (mov r8, r8)
200000cc:	2000045c 	andcs	r0, r0, ip, asr r4
200000d0:	20000470 	andcs	r0, r0, r0, ror r4
200000d4:	08000209 	stmdaeq	r0, {r0, r3, r9}

200000d8 <delay_250ns>:
#include "delay.h"

#define STK_CTRL ((volatile unsigned int *)(0xE000E010)) 

void delay_250ns( void )
{
200000d8:	b580      	push	{r7, lr}
200000da:	b082      	sub	sp, #8
200000dc:	af00      	add	r7, sp, #0
	uint32 x = 0;
200000de:	2300      	movs	r3, #0
200000e0:	607b      	str	r3, [r7, #4]
	SYS_TICK.CTRL = 0;
200000e2:	4b0e      	ldr	r3, [pc, #56]	; (2000011c <delay_250ns+0x44>)
200000e4:	2200      	movs	r2, #0
200000e6:	701a      	strb	r2, [r3, #0]
	SYS_TICK.CTRL_COUNT = 0;
200000e8:	4b0c      	ldr	r3, [pc, #48]	; (2000011c <delay_250ns+0x44>)
200000ea:	2200      	movs	r2, #0
200000ec:	709a      	strb	r2, [r3, #2]
	SYS_TICK.VAL = 0;
200000ee:	4b0b      	ldr	r3, [pc, #44]	; (2000011c <delay_250ns+0x44>)
200000f0:	2200      	movs	r2, #0
200000f2:	609a      	str	r2, [r3, #8]
	SYS_TICK.LOAD = 41;
200000f4:	4b09      	ldr	r3, [pc, #36]	; (2000011c <delay_250ns+0x44>)
200000f6:	2229      	movs	r2, #41	; 0x29
200000f8:	605a      	str	r2, [r3, #4]
	SYS_TICK.CTRL = 0x05;
200000fa:	4b08      	ldr	r3, [pc, #32]	; (2000011c <delay_250ns+0x44>)
200000fc:	2205      	movs	r2, #5
200000fe:	701a      	strb	r2, [r3, #0]
	
	x = SYS_TICK.VAL;
20000100:	4b06      	ldr	r3, [pc, #24]	; (2000011c <delay_250ns+0x44>)
20000102:	689b      	ldr	r3, [r3, #8]
20000104:	607b      	str	r3, [r7, #4]
	while (SYS_TICK.CTRL_COUNT & 0x1 == 0) 
20000106:	46c0      	nop			; (mov r8, r8)
20000108:	4b04      	ldr	r3, [pc, #16]	; (2000011c <delay_250ns+0x44>)
2000010a:	789b      	ldrb	r3, [r3, #2]
	{
		x = SYS_TICK.VAL;
	}
	SYS_TICK.CTRL = 0;
2000010c:	4b03      	ldr	r3, [pc, #12]	; (2000011c <delay_250ns+0x44>)
2000010e:	2200      	movs	r2, #0
20000110:	701a      	strb	r2, [r3, #0]
}
20000112:	46c0      	nop			; (mov r8, r8)
20000114:	46bd      	mov	sp, r7
20000116:	b002      	add	sp, #8
20000118:	bd80      	pop	{r7, pc}
2000011a:	46c0      	nop			; (mov r8, r8)
2000011c:	e000e010 	and	lr, r0, r0, lsl r0

20000120 <delay_micro>:

void delay_micro( uint32_c us )
{
20000120:	b580      	push	{r7, lr}
20000122:	b084      	sub	sp, #16
20000124:	af00      	add	r7, sp, #0
20000126:	6078      	str	r0, [r7, #4]
	for (uint32 loops = 0; loops < us; loops++ )
20000128:	2300      	movs	r3, #0
2000012a:	60fb      	str	r3, [r7, #12]
2000012c:	e00a      	b.n	20000144 <delay_micro+0x24>
		{
		delay_250ns();
2000012e:	f7ff ffd3 	bl	200000d8 <delay_250ns>
		delay_250ns();
20000132:	f7ff ffd1 	bl	200000d8 <delay_250ns>
		delay_250ns();
20000136:	f7ff ffcf 	bl	200000d8 <delay_250ns>
		delay_250ns();
2000013a:	f7ff ffcd 	bl	200000d8 <delay_250ns>
	for (uint32 loops = 0; loops < us; loops++ )
2000013e:	68fb      	ldr	r3, [r7, #12]
20000140:	3301      	adds	r3, #1
20000142:	60fb      	str	r3, [r7, #12]
20000144:	68fa      	ldr	r2, [r7, #12]
20000146:	687b      	ldr	r3, [r7, #4]
20000148:	429a      	cmp	r2, r3
2000014a:	d3f0      	bcc.n	2000012e <delay_micro+0xe>
	}
}
2000014c:	46c0      	nop			; (mov r8, r8)
2000014e:	46bd      	mov	sp, r7
20000150:	b004      	add	sp, #16
20000152:	bd80      	pop	{r7, pc}

20000154 <delay_milli>:

void delay_milli( uint32 ms )
{	
20000154:	b580      	push	{r7, lr}
20000156:	b082      	sub	sp, #8
20000158:	af00      	add	r7, sp, #0
2000015a:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
	ms = ms / 1000;
	ms++;
	#endif // SIMULATOR
	delay_micro(ms * 1000);
2000015c:	687b      	ldr	r3, [r7, #4]
2000015e:	22fa      	movs	r2, #250	; 0xfa
20000160:	0092      	lsls	r2, r2, #2
20000162:	4353      	muls	r3, r2
20000164:	0018      	movs	r0, r3
20000166:	f7ff ffdb 	bl	20000120 <delay_micro>
2000016a:	46c0      	nop			; (mov r8, r8)
2000016c:	46bd      	mov	sp, r7
2000016e:	b002      	add	sp, #8
20000170:	bd80      	pop	{r7, pc}
20000172:	46c0      	nop			; (mov r8, r8)

20000174 <ascii_ctrl_bit_set>:
#include "asciidisplay.h"

void ascii_ctrl_bit_set(uint8_c x)
{
20000174:	b580      	push	{r7, lr}
20000176:	b082      	sub	sp, #8
20000178:	af00      	add	r7, sp, #0
2000017a:	0002      	movs	r2, r0
2000017c:	1dfb      	adds	r3, r7, #7
2000017e:	701a      	strb	r2, [r3, #0]
	portOdrLow |= x;
20000180:	490a      	ldr	r1, [pc, #40]	; (200001ac <ascii_ctrl_bit_set+0x38>)
20000182:	4b0a      	ldr	r3, [pc, #40]	; (200001ac <ascii_ctrl_bit_set+0x38>)
20000184:	781b      	ldrb	r3, [r3, #0]
20000186:	b2da      	uxtb	r2, r3
20000188:	1dfb      	adds	r3, r7, #7
2000018a:	781b      	ldrb	r3, [r3, #0]
2000018c:	4313      	orrs	r3, r2
2000018e:	b2db      	uxtb	r3, r3
20000190:	700b      	strb	r3, [r1, #0]
	portOdrLow |= B_SELECT;
20000192:	4a06      	ldr	r2, [pc, #24]	; (200001ac <ascii_ctrl_bit_set+0x38>)
20000194:	4b05      	ldr	r3, [pc, #20]	; (200001ac <ascii_ctrl_bit_set+0x38>)
20000196:	781b      	ldrb	r3, [r3, #0]
20000198:	b2db      	uxtb	r3, r3
2000019a:	2104      	movs	r1, #4
2000019c:	430b      	orrs	r3, r1
2000019e:	b2db      	uxtb	r3, r3
200001a0:	7013      	strb	r3, [r2, #0]
}
200001a2:	46c0      	nop			; (mov r8, r8)
200001a4:	46bd      	mov	sp, r7
200001a6:	b002      	add	sp, #8
200001a8:	bd80      	pop	{r7, pc}
200001aa:	46c0      	nop			; (mov r8, r8)
200001ac:	40021014 	andmi	r1, r2, r4, lsl r0

200001b0 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(uint8_c x)
{
200001b0:	b580      	push	{r7, lr}
200001b2:	b082      	sub	sp, #8
200001b4:	af00      	add	r7, sp, #0
200001b6:	0002      	movs	r2, r0
200001b8:	1dfb      	adds	r3, r7, #7
200001ba:	701a      	strb	r2, [r3, #0]
	portOdrLow &= ~x;
200001bc:	490c      	ldr	r1, [pc, #48]	; (200001f0 <ascii_ctrl_bit_clear+0x40>)
200001be:	4b0c      	ldr	r3, [pc, #48]	; (200001f0 <ascii_ctrl_bit_clear+0x40>)
200001c0:	781b      	ldrb	r3, [r3, #0]
200001c2:	b2db      	uxtb	r3, r3
200001c4:	b25b      	sxtb	r3, r3
200001c6:	1dfa      	adds	r2, r7, #7
200001c8:	7812      	ldrb	r2, [r2, #0]
200001ca:	b252      	sxtb	r2, r2
200001cc:	43d2      	mvns	r2, r2
200001ce:	b252      	sxtb	r2, r2
200001d0:	4013      	ands	r3, r2
200001d2:	b25b      	sxtb	r3, r3
200001d4:	b2db      	uxtb	r3, r3
200001d6:	700b      	strb	r3, [r1, #0]
	portOdrLow |= B_SELECT;
200001d8:	4a05      	ldr	r2, [pc, #20]	; (200001f0 <ascii_ctrl_bit_clear+0x40>)
200001da:	4b05      	ldr	r3, [pc, #20]	; (200001f0 <ascii_ctrl_bit_clear+0x40>)
200001dc:	781b      	ldrb	r3, [r3, #0]
200001de:	b2db      	uxtb	r3, r3
200001e0:	2104      	movs	r1, #4
200001e2:	430b      	orrs	r3, r1
200001e4:	b2db      	uxtb	r3, r3
200001e6:	7013      	strb	r3, [r2, #0]
}
200001e8:	46c0      	nop			; (mov r8, r8)
200001ea:	46bd      	mov	sp, r7
200001ec:	b002      	add	sp, #8
200001ee:	bd80      	pop	{r7, pc}
200001f0:	40021014 	andmi	r1, r2, r4, lsl r0

200001f4 <ascii_write_cmd>:

void ascii_write_cmd(uint8_c command)
{
200001f4:	b580      	push	{r7, lr}
200001f6:	b082      	sub	sp, #8
200001f8:	af00      	add	r7, sp, #0
200001fa:	0002      	movs	r2, r0
200001fc:	1dfb      	adds	r3, r7, #7
200001fe:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS | B_RW);
20000200:	2003      	movs	r0, #3
20000202:	f7ff ffd5 	bl	200001b0 <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
20000206:	1dfb      	adds	r3, r7, #7
20000208:	781b      	ldrb	r3, [r3, #0]
2000020a:	0018      	movs	r0, r3
2000020c:	f000 f870 	bl	200002f0 <ascii_write_controller>
}
20000210:	46c0      	nop			; (mov r8, r8)
20000212:	46bd      	mov	sp, r7
20000214:	b002      	add	sp, #8
20000216:	bd80      	pop	{r7, pc}

20000218 <ascii_write_data>:
void ascii_write_data(uint8_c data)
{
20000218:	b580      	push	{r7, lr}
2000021a:	b082      	sub	sp, #8
2000021c:	af00      	add	r7, sp, #0
2000021e:	0002      	movs	r2, r0
20000220:	1dfb      	adds	r3, r7, #7
20000222:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20000224:	2001      	movs	r0, #1
20000226:	f7ff ffa5 	bl	20000174 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
2000022a:	2002      	movs	r0, #2
2000022c:	f7ff ffc0 	bl	200001b0 <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
20000230:	1dfb      	adds	r3, r7, #7
20000232:	781b      	ldrb	r3, [r3, #0]
20000234:	0018      	movs	r0, r3
20000236:	f000 f85b 	bl	200002f0 <ascii_write_controller>
}
2000023a:	46c0      	nop			; (mov r8, r8)
2000023c:	46bd      	mov	sp, r7
2000023e:	b002      	add	sp, #8
20000240:	bd80      	pop	{r7, pc}

20000242 <ascii_read_status>:

uint8 ascii_read_status(void)
{
20000242:	b590      	push	{r4, r7, lr}
20000244:	b083      	sub	sp, #12
20000246:	af00      	add	r7, sp, #0
	uint8 rv = 0;
20000248:	1dfb      	adds	r3, r7, #7
2000024a:	2200      	movs	r2, #0
2000024c:	701a      	strb	r2, [r3, #0]
	portModer &= 0x0000FFFF;
2000024e:	4b11      	ldr	r3, [pc, #68]	; (20000294 <ascii_read_status+0x52>)
20000250:	4a10      	ldr	r2, [pc, #64]	; (20000294 <ascii_read_status+0x52>)
20000252:	6812      	ldr	r2, [r2, #0]
20000254:	0412      	lsls	r2, r2, #16
20000256:	0c12      	lsrs	r2, r2, #16
20000258:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
2000025a:	2001      	movs	r0, #1
2000025c:	f7ff ffa8 	bl	200001b0 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_set(B_RW);
20000260:	2002      	movs	r0, #2
20000262:	f7ff ff87 	bl	20000174 <ascii_ctrl_bit_set>
	rv = ascii_read_controller();
20000266:	1dfc      	adds	r4, r7, #7
20000268:	f000 f85a 	bl	20000320 <ascii_read_controller>
2000026c:	0003      	movs	r3, r0
2000026e:	7023      	strb	r3, [r4, #0]
	portModer &= 0x0000FFFF;
20000270:	4b08      	ldr	r3, [pc, #32]	; (20000294 <ascii_read_status+0x52>)
20000272:	4a08      	ldr	r2, [pc, #32]	; (20000294 <ascii_read_status+0x52>)
20000274:	6812      	ldr	r2, [r2, #0]
20000276:	0412      	lsls	r2, r2, #16
20000278:	0c12      	lsrs	r2, r2, #16
2000027a:	601a      	str	r2, [r3, #0]
	portModer |= 0x55550000;
2000027c:	4b05      	ldr	r3, [pc, #20]	; (20000294 <ascii_read_status+0x52>)
2000027e:	4a05      	ldr	r2, [pc, #20]	; (20000294 <ascii_read_status+0x52>)
20000280:	6812      	ldr	r2, [r2, #0]
20000282:	4905      	ldr	r1, [pc, #20]	; (20000298 <ascii_read_status+0x56>)
20000284:	430a      	orrs	r2, r1
20000286:	601a      	str	r2, [r3, #0]
	return rv;
20000288:	1dfb      	adds	r3, r7, #7
2000028a:	781b      	ldrb	r3, [r3, #0]
}
2000028c:	0018      	movs	r0, r3
2000028e:	46bd      	mov	sp, r7
20000290:	b003      	add	sp, #12
20000292:	bd90      	pop	{r4, r7, pc}
20000294:	40021000 	andmi	r1, r2, r0
20000298:	55550000 	ldrbpl	r0, [r5, #-0]

2000029c <ascii_read_data>:
uint8 ascii_read_data(void)
{
2000029c:	b590      	push	{r4, r7, lr}
2000029e:	b083      	sub	sp, #12
200002a0:	af00      	add	r7, sp, #0
	uint8 rv = 0;
200002a2:	1dfb      	adds	r3, r7, #7
200002a4:	2200      	movs	r2, #0
200002a6:	701a      	strb	r2, [r3, #0]
	portModer &= 0x0000FFFF;
200002a8:	4b0f      	ldr	r3, [pc, #60]	; (200002e8 <ascii_read_data+0x4c>)
200002aa:	4a0f      	ldr	r2, [pc, #60]	; (200002e8 <ascii_read_data+0x4c>)
200002ac:	6812      	ldr	r2, [r2, #0]
200002ae:	0412      	lsls	r2, r2, #16
200002b0:	0c12      	lsrs	r2, r2, #16
200002b2:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RW | B_RS);
200002b4:	2003      	movs	r0, #3
200002b6:	f7ff ff5d 	bl	20000174 <ascii_ctrl_bit_set>
	rv = ascii_read_controller();
200002ba:	1dfc      	adds	r4, r7, #7
200002bc:	f000 f830 	bl	20000320 <ascii_read_controller>
200002c0:	0003      	movs	r3, r0
200002c2:	7023      	strb	r3, [r4, #0]
	portModer &= 0x0000FFFF;
200002c4:	4b08      	ldr	r3, [pc, #32]	; (200002e8 <ascii_read_data+0x4c>)
200002c6:	4a08      	ldr	r2, [pc, #32]	; (200002e8 <ascii_read_data+0x4c>)
200002c8:	6812      	ldr	r2, [r2, #0]
200002ca:	0412      	lsls	r2, r2, #16
200002cc:	0c12      	lsrs	r2, r2, #16
200002ce:	601a      	str	r2, [r3, #0]
	portModer |= 0x55550000;
200002d0:	4b05      	ldr	r3, [pc, #20]	; (200002e8 <ascii_read_data+0x4c>)
200002d2:	4a05      	ldr	r2, [pc, #20]	; (200002e8 <ascii_read_data+0x4c>)
200002d4:	6812      	ldr	r2, [r2, #0]
200002d6:	4905      	ldr	r1, [pc, #20]	; (200002ec <ascii_read_data+0x50>)
200002d8:	430a      	orrs	r2, r1
200002da:	601a      	str	r2, [r3, #0]
	return rv;
200002dc:	1dfb      	adds	r3, r7, #7
200002de:	781b      	ldrb	r3, [r3, #0]
}
200002e0:	0018      	movs	r0, r3
200002e2:	46bd      	mov	sp, r7
200002e4:	b003      	add	sp, #12
200002e6:	bd90      	pop	{r4, r7, pc}
200002e8:	40021000 	andmi	r1, r2, r0
200002ec:	55550000 	ldrbpl	r0, [r5, #-0]

200002f0 <ascii_write_controller>:

void ascii_write_controller(uint8 byte) 
{
200002f0:	b580      	push	{r7, lr}
200002f2:	b082      	sub	sp, #8
200002f4:	af00      	add	r7, sp, #0
200002f6:	0002      	movs	r2, r0
200002f8:	1dfb      	adds	r3, r7, #7
200002fa:	701a      	strb	r2, [r3, #0]
	// 40 ns delay not required to delay manually
	ascii_ctrl_bit_set(B_E);
200002fc:	2040      	movs	r0, #64	; 0x40
200002fe:	f7ff ff39 	bl	20000174 <ascii_ctrl_bit_set>
	portOdrHigh = byte;
20000302:	4a06      	ldr	r2, [pc, #24]	; (2000031c <ascii_write_controller+0x2c>)
20000304:	1dfb      	adds	r3, r7, #7
20000306:	781b      	ldrb	r3, [r3, #0]
20000308:	7013      	strb	r3, [r2, #0]
	delay_250ns();
2000030a:	f7ff fee5 	bl	200000d8 <delay_250ns>
	ascii_ctrl_bit_clear(B_E);
2000030e:	2040      	movs	r0, #64	; 0x40
20000310:	f7ff ff4e 	bl	200001b0 <ascii_ctrl_bit_clear>
	// 10 ns delay not required to delay manually
}
20000314:	46c0      	nop			; (mov r8, r8)
20000316:	46bd      	mov	sp, r7
20000318:	b002      	add	sp, #8
2000031a:	bd80      	pop	{r7, pc}
2000031c:	40021015 	andmi	r1, r2, r5, lsl r0

20000320 <ascii_read_controller>:

uint8 ascii_read_controller(void)
{
20000320:	b580      	push	{r7, lr}
20000322:	b082      	sub	sp, #8
20000324:	af00      	add	r7, sp, #0
	uint8 rv = 0;
20000326:	1dfb      	adds	r3, r7, #7
20000328:	2200      	movs	r2, #0
2000032a:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_E);
2000032c:	2040      	movs	r0, #64	; 0x40
2000032e:	f7ff ff21 	bl	20000174 <ascii_ctrl_bit_set>
	delay_250ns();
20000332:	f7ff fed1 	bl	200000d8 <delay_250ns>
	delay_250ns();
20000336:	f7ff fecf 	bl	200000d8 <delay_250ns>
	rv = portIdrHigh;
2000033a:	4a06      	ldr	r2, [pc, #24]	; (20000354 <ascii_read_controller+0x34>)
2000033c:	1dfb      	adds	r3, r7, #7
2000033e:	7812      	ldrb	r2, [r2, #0]
20000340:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_E);
20000342:	2040      	movs	r0, #64	; 0x40
20000344:	f7ff ff34 	bl	200001b0 <ascii_ctrl_bit_clear>
	return rv;
20000348:	1dfb      	adds	r3, r7, #7
2000034a:	781b      	ldrb	r3, [r3, #0]
}
2000034c:	0018      	movs	r0, r3
2000034e:	46bd      	mov	sp, r7
20000350:	b002      	add	sp, #8
20000352:	bd80      	pop	{r7, pc}
20000354:	40021011 	andmi	r1, r2, r1, lsl r0

20000358 <ascii_command>:

void ascii_command(uint8 command, uint16 commandDelay)
{
20000358:	b580      	push	{r7, lr}
2000035a:	b082      	sub	sp, #8
2000035c:	af00      	add	r7, sp, #0
2000035e:	0002      	movs	r2, r0
20000360:	1dfb      	adds	r3, r7, #7
20000362:	701a      	strb	r2, [r3, #0]
20000364:	1d3b      	adds	r3, r7, #4
20000366:	1c0a      	adds	r2, r1, #0
20000368:	801a      	strh	r2, [r3, #0]
	while ((ascii_read_status() & 0x80) == 0x80) {}
2000036a:	46c0      	nop			; (mov r8, r8)
2000036c:	f7ff ff69 	bl	20000242 <ascii_read_status>
20000370:	0003      	movs	r3, r0
20000372:	001a      	movs	r2, r3
20000374:	2380      	movs	r3, #128	; 0x80
20000376:	4013      	ands	r3, r2
20000378:	2b80      	cmp	r3, #128	; 0x80
2000037a:	d0f7      	beq.n	2000036c <ascii_command+0x14>
	delay_micro(20);
2000037c:	2014      	movs	r0, #20
2000037e:	f7ff fecf 	bl	20000120 <delay_micro>
	ascii_write_cmd(command);
20000382:	1dfb      	adds	r3, r7, #7
20000384:	781b      	ldrb	r3, [r3, #0]
20000386:	0018      	movs	r0, r3
20000388:	f7ff ff34 	bl	200001f4 <ascii_write_cmd>
	delay_micro(commandDelay);
2000038c:	1d3b      	adds	r3, r7, #4
2000038e:	881b      	ldrh	r3, [r3, #0]
20000390:	0018      	movs	r0, r3
20000392:	f7ff fec5 	bl	20000120 <delay_micro>
}
20000396:	46c0      	nop			; (mov r8, r8)
20000398:	46bd      	mov	sp, r7
2000039a:	b002      	add	sp, #8
2000039c:	bd80      	pop	{r7, pc}

2000039e <ascii_init>:

void ascii_init(void)
{	
2000039e:	b580      	push	{r7, lr}
200003a0:	af00      	add	r7, sp, #0
	ascii_command((uint8) 0b00111000, 50);
200003a2:	2132      	movs	r1, #50	; 0x32
200003a4:	2038      	movs	r0, #56	; 0x38
200003a6:	f7ff ffd7 	bl	20000358 <ascii_command>
	ascii_command((uint8) 0b00001110, 50);
200003aa:	2132      	movs	r1, #50	; 0x32
200003ac:	200e      	movs	r0, #14
200003ae:	f7ff ffd3 	bl	20000358 <ascii_command>
	ascii_command((uint8) 0b00000001, 1600);
200003b2:	23c8      	movs	r3, #200	; 0xc8
200003b4:	00db      	lsls	r3, r3, #3
200003b6:	0019      	movs	r1, r3
200003b8:	2001      	movs	r0, #1
200003ba:	f7ff ffcd 	bl	20000358 <ascii_command>
	ascii_command((uint8) 0b00000110, 1600);
200003be:	23c8      	movs	r3, #200	; 0xc8
200003c0:	00db      	lsls	r3, r3, #3
200003c2:	0019      	movs	r1, r3
200003c4:	2006      	movs	r0, #6
200003c6:	f7ff ffc7 	bl	20000358 <ascii_command>
}
200003ca:	46c0      	nop			; (mov r8, r8)
200003cc:	46bd      	mov	sp, r7
200003ce:	bd80      	pop	{r7, pc}

200003d0 <ascii_gotoxy>:

void ascii_gotoxy(uint8 x, uint8 y) 
{
200003d0:	b580      	push	{r7, lr}
200003d2:	b084      	sub	sp, #16
200003d4:	af00      	add	r7, sp, #0
200003d6:	0002      	movs	r2, r0
200003d8:	1dfb      	adds	r3, r7, #7
200003da:	701a      	strb	r2, [r3, #0]
200003dc:	1dbb      	adds	r3, r7, #6
200003de:	1c0a      	adds	r2, r1, #0
200003e0:	701a      	strb	r2, [r3, #0]
	uint8 address = 	y == 2 ?
200003e2:	1dbb      	adds	r3, r7, #6
200003e4:	781b      	ldrb	r3, [r3, #0]
200003e6:	2b02      	cmp	r3, #2
200003e8:	d104      	bne.n	200003f4 <ascii_gotoxy+0x24>
200003ea:	1dfb      	adds	r3, r7, #7
200003ec:	781b      	ldrb	r3, [r3, #0]
200003ee:	333f      	adds	r3, #63	; 0x3f
200003f0:	b2db      	uxtb	r3, r3
200003f2:	e003      	b.n	200003fc <ascii_gotoxy+0x2c>
200003f4:	1dfb      	adds	r3, r7, #7
200003f6:	781b      	ldrb	r3, [r3, #0]
200003f8:	3b01      	subs	r3, #1
200003fa:	b2db      	uxtb	r3, r3
200003fc:	220f      	movs	r2, #15
200003fe:	18ba      	adds	r2, r7, r2
20000400:	7013      	strb	r3, [r2, #0]
						x - 1 + 0x40 :
						x -1;
	ascii_command(0x80 | address, 50);
20000402:	230f      	movs	r3, #15
20000404:	18fb      	adds	r3, r7, r3
20000406:	781b      	ldrb	r3, [r3, #0]
20000408:	2280      	movs	r2, #128	; 0x80
2000040a:	4252      	negs	r2, r2
2000040c:	4313      	orrs	r3, r2
2000040e:	b2db      	uxtb	r3, r3
20000410:	2132      	movs	r1, #50	; 0x32
20000412:	0018      	movs	r0, r3
20000414:	f7ff ffa0 	bl	20000358 <ascii_command>
}
20000418:	46c0      	nop			; (mov r8, r8)
2000041a:	46bd      	mov	sp, r7
2000041c:	b004      	add	sp, #16
2000041e:	bd80      	pop	{r7, pc}

20000420 <ascii_write_char>:

void ascii_write_char(unsigned char c)
{
20000420:	b580      	push	{r7, lr}
20000422:	b082      	sub	sp, #8
20000424:	af00      	add	r7, sp, #0
20000426:	0002      	movs	r2, r0
20000428:	1dfb      	adds	r3, r7, #7
2000042a:	701a      	strb	r2, [r3, #0]
	while ((ascii_read_status() & 0x80) == 0x80) {}
2000042c:	46c0      	nop			; (mov r8, r8)
2000042e:	f7ff ff08 	bl	20000242 <ascii_read_status>
20000432:	0003      	movs	r3, r0
20000434:	001a      	movs	r2, r3
20000436:	2380      	movs	r3, #128	; 0x80
20000438:	4013      	ands	r3, r2
2000043a:	2b80      	cmp	r3, #128	; 0x80
2000043c:	d0f7      	beq.n	2000042e <ascii_write_char+0xe>
	delay_micro(10);
2000043e:	200a      	movs	r0, #10
20000440:	f7ff fe6e 	bl	20000120 <delay_micro>
	ascii_write_data(c);
20000444:	1dfb      	adds	r3, r7, #7
20000446:	781b      	ldrb	r3, [r3, #0]
20000448:	0018      	movs	r0, r3
2000044a:	f7ff fee5 	bl	20000218 <ascii_write_data>
	delay_micro(50);
2000044e:	2032      	movs	r0, #50	; 0x32
20000450:	f7ff fe66 	bl	20000120 <delay_micro>
20000454:	46c0      	nop			; (mov r8, r8)
20000456:	46bd      	mov	sp, r7
20000458:	b002      	add	sp, #8
2000045a:	bd80      	pop	{r7, pc}
2000045c:	6c614b20 			; <UNDEFINED> instruction: 0x6c614b20
20000460:	2073656c 	rsbscs	r6, r3, ip, ror #10
20000464:	6162654b 	cmnvs	r2, fp, asr #10
20000468:	76616b62 	strbtvc	r6, [r1], -r2, ror #22
2000046c:	00726169 	rsbseq	r6, r2, r9, ror #2
20000470:	2049202d 	subcs	r2, r9, sp, lsr #32
20000474:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
20000478:	756f7920 	strbvc	r7, [pc, #-2336]!	; 1ffffb60 <startup-0x4a0>
2000047c:	6b696c20 	blvs	21a5b504 <ascii_write_char+0x1a5b0e4>
20000480:	74692065 	strbtvc	r2, [r9], #-101	; 0xffffff9b
20000484:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	000000f2 	strdeq	r0, [r0], -r2
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000015 	andeq	r0, r0, r5, lsl r0
  10:	0000b20c 	andeq	fp, r0, ip, lsl #4
	...
  20:	00000200 	andeq	r0, r0, r0, lsl #4
  24:	04020000 	streq	r0, [r2], #-0
  28:	0000002c 	andeq	r0, r0, ip, lsr #32
  2c:	26070403 	strcs	r0, [r7], -r3, lsl #8
  30:	02000001 	andeq	r0, r0, #1
  34:	00000146 	andeq	r0, r0, r6, asr #2
  38:	003e0502 	eorseq	r0, lr, r2, lsl #10
  3c:	02030000 	andeq	r0, r3, #0
  40:	00012007 	andeq	r2, r1, r7
  44:	08010300 	stmdaeq	r1, {r8, r9}
  48:	00000007 	andeq	r0, r0, r7
  4c:	69050404 	stmdbvs	r5, {r2, sl}
  50:	0300746e 	movweq	r7, #1134	; 0x46e
  54:	013c0502 	teqeq	ip, r2, lsl #10
  58:	01030000 	mrseq	r0, (UNDEF: 3)
  5c:	00000906 	andeq	r0, r0, r6, lsl #18
  60:	00ad0500 	adceq	r0, sp, r0, lsl #10
  64:	1f010000 	svcne	0x00010000
  68:	2000004c 	andcs	r0, r0, ip, asr #32
  6c:	00000088 	andeq	r0, r0, r8, lsl #1
  70:	009f9c01 	addseq	r9, pc, r1, lsl #24
  74:	73060000 	movwvc	r0, #24576	; 0x6000
  78:	9f210100 	svcls	0x00210100
  7c:	02000000 	andeq	r0, r0, #0
  80:	14076c91 	strne	r6, [r7], #-3217	; 0xfffff36f
  84:	01000001 	tsteq	r0, r1
  88:	0000ac22 	andeq	sl, r0, r2, lsr #24
  8c:	58910200 	ldmpl	r1, {r9}
  90:	00011a07 	andeq	r1, r1, r7, lsl #20
  94:	c3230100 			; <UNDEFINED> instruction: 0xc3230100
  98:	02000000 	andeq	r0, r0, #0
  9c:	08004091 	stmdaeq	r0, {r0, r4, r7, lr}
  a0:	0000a504 	andeq	sl, r0, r4, lsl #10
  a4:	08010300 	stmdaeq	r1, {r8, r9}
  a8:	00000010 	andeq	r0, r0, r0, lsl r0
  ac:	0000a509 	andeq	sl, r0, r9, lsl #10
  b0:	0000bc00 	andeq	fp, r0, r0, lsl #24
  b4:	00bc0a00 	adcseq	r0, ip, r0, lsl #20
  b8:	00130000 	andseq	r0, r3, r0
  bc:	33070403 	movwcc	r0, #29699	; 0x7403
  c0:	09000001 	stmdbeq	r0, {r0}
  c4:	000000a5 	andeq	r0, r0, r5, lsr #1
  c8:	000000d3 	ldrdeq	r0, [r0], -r3
  cc:	0000bc0a 	andeq	fp, r0, sl, lsl #24
  d0:	0b001400 	bleq	50d8 <startup-0x1fffaf28>
  d4:	00000103 	andeq	r0, r0, r3, lsl #2
  d8:	00101201 	andseq	r1, r0, r1, lsl #4
  dc:	003c2000 	eorseq	r2, ip, r0
  e0:	9c010000 	stcls	0, cr0, [r1], {-0}
  e4:	00010c0b 	andeq	r0, r1, fp, lsl #24
  e8:	00080100 	andeq	r0, r8, r0, lsl #2
  ec:	0c200000 	stceq	0, cr0, [r0], #-0
  f0:	01000000 	mrseq	r0, (UNDEF: 0)
  f4:	016c009c 			; <UNDEFINED> instruction: 0x016c009c
  f8:	00040000 	andeq	r0, r4, r0
  fc:	000000a0 	andeq	r0, r0, r0, lsr #1
 100:	00150104 	andseq	r0, r5, r4, lsl #2
 104:	ca0c0000 	bgt	30010c <startup-0x1fcffef4>
 108:	d8000001 	stmdale	r0, {r0}
 10c:	9a200000 	bls	800114 <startup-0x1f7ffeec>
 110:	b0000000 	andlt	r0, r0, r0
 114:	02000000 	andeq	r0, r0, #0
 118:	00000000 	andeq	r0, r0, r0
 11c:	002c0402 	eoreq	r0, ip, r2, lsl #8
 120:	04030000 	streq	r0, [r3], #-0
 124:	00012607 	andeq	r2, r1, r7, lsl #12
 128:	002c0400 	eoreq	r0, ip, r0, lsl #8
 12c:	02030000 	andeq	r0, r3, #0
 130:	00012007 	andeq	r2, r1, r7
 134:	016c0200 	cmneq	ip, r0, lsl #4
 138:	06020000 	streq	r0, [r2], -r0
 13c:	0000004a 	andeq	r0, r0, sl, asr #32
 140:	07080103 	streq	r0, [r8, -r3, lsl #2]
 144:	04000000 	streq	r0, [r0], #-0
 148:	0000004a 	andeq	r0, r0, sl, asr #32
 14c:	69050405 	stmdbvs	r5, {r0, r2, sl}
 150:	0300746e 	movweq	r7, #1134	; 0x46e
 154:	013c0502 	teqeq	ip, r2, lsl #10
 158:	01030000 	mrseq	r0, (UNDEF: 3)
 15c:	00000906 	andeq	r0, r0, r6, lsl #18
 160:	01ae0200 			; <UNDEFINED> instruction: 0x01ae0200
 164:	0c020000 	stceq	0, cr0, [r2], {-0}
 168:	00000033 	andeq	r0, r0, r3, lsr r0
 16c:	00016402 	andeq	r6, r1, r2, lsl #8
 170:	510e0200 	mrspl	r0, LR_fiq
 174:	06000000 	streq	r0, [r0], -r0
 178:	d208030c 	andle	r0, r8, #12, 6	; 0x30000000
 17c:	07000000 	streq	r0, [r0, -r0]
 180:	00000172 	andeq	r0, r0, r2, ror r1
 184:	003f0903 	eorseq	r0, pc, r3, lsl #18
 188:	07000000 	streq	r0, [r0, -r0]
 18c:	00000194 	muleq	r0, r4, r1
 190:	00760a03 	rsbseq	r0, r6, r3, lsl #20
 194:	07010000 	streq	r0, [r1, -r0]
 198:	00000159 	andeq	r0, r0, r9, asr r1
 19c:	003f0b03 	eorseq	r0, pc, r3, lsl #22
 1a0:	07020000 	streq	r0, [r2, -r0]
 1a4:	0000019e 	muleq	r0, lr, r1
 1a8:	00760c03 	rsbseq	r0, r6, r3, lsl #24
 1ac:	07030000 	streq	r0, [r3, -r0]
 1b0:	0000018f 	andeq	r0, r0, pc, lsl #3
 1b4:	00210d03 	eoreq	r0, r1, r3, lsl #26
 1b8:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
 1bc:	004c4156 	subeq	r4, ip, r6, asr r1
 1c0:	00210e03 	eoreq	r0, r1, r3, lsl #28
 1c4:	00080000 	andeq	r0, r8, r0
 1c8:	0001c202 	andeq	ip, r1, r2, lsl #4
 1cc:	81100300 	tsthi	r0, r0, lsl #6
 1d0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 1d4:	000000d2 	ldrdeq	r0, [r0], -r2
 1d8:	0001b702 	andeq	fp, r1, r2, lsl #14
 1dc:	ed120300 	ldc	3, cr0, [r2, #-0]
 1e0:	0a000000 	beq	1e8 <startup-0x1ffffe18>
 1e4:	0000dd04 	andeq	sp, r0, r4, lsl #26
 1e8:	014d0b00 	cmpeq	sp, r0, lsl #22
 1ec:	21010000 	mrscs	r0, (UNDEF: 1)
 1f0:	20000154 	andcs	r0, r0, r4, asr r1
 1f4:	0000001e 	andeq	r0, r0, lr, lsl r0
 1f8:	01169c01 	tsteq	r6, r1, lsl #24
 1fc:	6d0c0000 	stcvs	0, cr0, [ip, #-0]
 200:	21010073 	tstcs	r1, r3, ror r0
 204:	00000021 	andeq	r0, r0, r1, lsr #32
 208:	00749102 	rsbseq	r9, r4, r2, lsl #2
 20c:	0001830b 	andeq	r8, r1, fp, lsl #6
 210:	20160100 	andscs	r0, r6, r0, lsl #2
 214:	34200001 	strtcc	r0, [r0], #-1
 218:	01000000 	mrseq	r0, (UNDEF: 0)
 21c:	0001519c 	muleq	r1, ip, r1
 220:	73750c00 	cmnvc	r5, #0, 24
 224:	6b160100 	blvs	58062c <startup-0x1fa7f9d4>
 228:	02000000 	andeq	r0, r0, #0
 22c:	280d6c91 	stmdacs	sp, {r0, r4, r7, sl, fp, sp, lr}
 230:	24200001 	strtcs	r0, [r0], #-1
 234:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
 238:	000001a8 	andeq	r0, r0, r8, lsr #3
 23c:	00211801 	eoreq	r1, r1, r1, lsl #16
 240:	91020000 	mrsls	r0, (UNDEF: 2)
 244:	0f000074 	svceq	0x00000074
 248:	00000177 	andeq	r0, r0, r7, ror r1
 24c:	00d80501 	sbcseq	r0, r8, r1, lsl #10
 250:	00482000 	subeq	r2, r8, r0
 254:	9c010000 	stcls	0, cr0, [r1], {-0}
 258:	01007810 	tsteq	r0, r0, lsl r8
 25c:	00002107 	andeq	r2, r0, r7, lsl #2
 260:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 264:	026f0000 	rsbeq	r0, pc, #0
 268:	00040000 	andeq	r0, r4, r0
 26c:	0000017f 	andeq	r0, r0, pc, ror r1
 270:	00150104 	andseq	r0, r5, r4, lsl #2
 274:	a00c0000 	andge	r0, ip, r0
 278:	74000002 	strvc	r0, [r0], #-2
 27c:	e8200001 	stmda	r0!, {r0}
 280:	6a000002 	bvs	290 <startup-0x1ffffd70>
 284:	02000001 	andeq	r0, r0, #1
 288:	00000000 	andeq	r0, r0, r0
 28c:	002c0402 	eoreq	r0, ip, r2, lsl #8
 290:	04030000 	streq	r0, [r3], #-0
 294:	00012607 	andeq	r2, r1, r7, lsl #12
 298:	01460200 	mrseq	r0, (UNDEF: 102)
 29c:	05020000 	streq	r0, [r2, #-0]
 2a0:	0000003e 	andeq	r0, r0, lr, lsr r0
 2a4:	20070203 	andcs	r0, r7, r3, lsl #4
 2a8:	02000001 	andeq	r0, r0, #1
 2ac:	0000016c 	andeq	r0, r0, ip, ror #2
 2b0:	00500602 	subseq	r0, r0, r2, lsl #12
 2b4:	01030000 	mrseq	r0, (UNDEF: 3)
 2b8:	00000708 	andeq	r0, r0, r8, lsl #14
 2bc:	00500400 	subseq	r0, r0, r0, lsl #8
 2c0:	04050000 	streq	r0, [r5], #-0
 2c4:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
 2c8:	05020300 	streq	r0, [r2, #-768]	; 0xfffffd00
 2cc:	0000013c 	andeq	r0, r0, ip, lsr r1
 2d0:	09060103 	stmdbeq	r6, {r0, r1, r8}
 2d4:	02000000 	andeq	r0, r0, #0
 2d8:	00000164 	andeq	r0, r0, r4, ror #2
 2dc:	00570e02 	subseq	r0, r7, r2, lsl #28
 2e0:	21060000 	mrscs	r0, (UNDEF: 6)
 2e4:	01000003 	tsteq	r0, r3
 2e8:	0004205e 	andeq	r2, r4, lr, asr r0
 2ec:	00003c20 	andeq	r3, r0, r0, lsr #24
 2f0:	ab9c0100 	blge	fe7006f8 <ascii_write_char+0xde7002d8>
 2f4:	07000000 	streq	r0, [r0, -r0]
 2f8:	5e010063 	cdppl	0, 0, cr0, cr1, cr3, {3}
 2fc:	00000050 	andeq	r0, r0, r0, asr r0
 300:	08779102 	ldmdaeq	r7!, {r1, r8, ip, pc}^
 304:	00000183 	andeq	r0, r0, r3, lsl #3
 308:	005c4901 	subseq	r4, ip, r1, lsl #18
 30c:	00090000 	andeq	r0, r9, r0
 310:	03140600 	tsteq	r4, #0, 12
 314:	56010000 	strpl	r0, [r1], -r0
 318:	200003d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 31c:	00000050 	andeq	r0, r0, r0, asr r0
 320:	00e79c01 	rsceq	r9, r7, r1, lsl #24
 324:	78070000 	stmdavc	r7, {}	; <UNPREDICTABLE>
 328:	45560100 	ldrbmi	r0, [r6, #-256]	; 0xffffff00
 32c:	02000000 	andeq	r0, r0, #0
 330:	79076f91 	stmdbvc	r7, {r0, r4, r7, r8, r9, sl, fp, sp, lr}
 334:	45560100 	ldrbmi	r0, [r6, #-256]	; 0xffffff00
 338:	02000000 	andeq	r0, r0, #0
 33c:	8b0a6e91 	blhi	29bd88 <startup-0x1fd64278>
 340:	01000002 	tsteq	r0, r2
 344:	00004558 	andeq	r4, r0, r8, asr r5
 348:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 34c:	03450b00 	movteq	r0, #23296	; 0x5b00
 350:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
 354:	2000039e 	mulcs	r0, lr, r3
 358:	00000032 	andeq	r0, r0, r2, lsr r0
 35c:	f6069c01 			; <UNDEFINED> instruction: 0xf6069c01
 360:	01000002 	tsteq	r0, r2
 364:	00035846 	andeq	r5, r3, r6, asr #16
 368:	00004620 	andeq	r4, r0, r0, lsr #12
 36c:	379c0100 	ldrcc	r0, [ip, r0, lsl #2]
 370:	0c000001 	stceq	0, cr0, [r0], {1}
 374:	000002fc 	strdeq	r0, [r0], -ip
 378:	00454601 	subeq	r4, r5, r1, lsl #12
 37c:	91020000 	mrsls	r0, (UNDEF: 2)
 380:	02930c77 	addseq	r0, r3, #30464	; 0x7700
 384:	46010000 	strmi	r0, [r1], -r0
 388:	00000033 	andeq	r0, r0, r3, lsr r0
 38c:	08749102 	ldmdaeq	r4!, {r1, r8, ip, pc}^
 390:	00000183 	andeq	r0, r0, r3, lsl #3
 394:	005c4901 	subseq	r4, ip, r1, lsl #18
 398:	00090000 	andeq	r0, r9, r0
 39c:	02650d00 	rsbeq	r0, r5, #0, 26
 3a0:	3b010000 	blcc	403a8 <startup-0x1ffbfc58>
 3a4:	00000045 	andeq	r0, r0, r5, asr #32
 3a8:	20000320 	andcs	r0, r0, r0, lsr #6
 3ac:	00000038 	andeq	r0, r0, r8, lsr r0
 3b0:	016b9c01 	cmneq	fp, r1, lsl #24
 3b4:	720e0000 	andvc	r0, lr, #0
 3b8:	3d010076 	stccc	0, cr0, [r1, #-472]	; 0xfffffe28
 3bc:	00000045 	andeq	r0, r0, r5, asr #32
 3c0:	08779102 	ldmdaeq	r7!, {r1, r8, ip, pc}^
 3c4:	00000177 	andeq	r0, r0, r7, ror r1
 3c8:	005c3601 	subseq	r3, ip, r1, lsl #12
 3cc:	00090000 	andeq	r0, r9, r0
 3d0:	02260600 	eoreq	r0, r6, #0, 12
 3d4:	31010000 	mrscc	r0, (UNDEF: 1)
 3d8:	200002f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 3dc:	00000030 	andeq	r0, r0, r0, lsr r0
 3e0:	019c9c01 	orrseq	r9, ip, r1, lsl #24
 3e4:	3d0c0000 	stccc	0, cr0, [ip, #-0]
 3e8:	01000002 	tsteq	r0, r2
 3ec:	00004531 	andeq	r4, r0, r1, lsr r5
 3f0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 3f4:	00017708 	andeq	r7, r1, r8, lsl #14
 3f8:	5c360100 	ldfpls	f0, [r6], #-0
 3fc:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 400:	7b0d0000 	blvc	340408 <startup-0x1fcbfbf8>
 404:	01000002 	tsteq	r0, r2
 408:	00004526 	andeq	r4, r0, r6, lsr #10
 40c:	00029c00 	andeq	r9, r2, r0, lsl #24
 410:	00005420 	andeq	r5, r0, r0, lsr #8
 414:	c39c0100 	orrsgt	r0, ip, #0, 2
 418:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
 41c:	01007672 	tsteq	r0, r2, ror r6
 420:	00004528 	andeq	r4, r0, r8, lsr #10
 424:	6f910200 	svcvs	0x00910200
 428:	02420d00 	subeq	r0, r2, #0, 26
 42c:	1b010000 	blne	40434 <startup-0x1ffbfbcc>
 430:	00000045 	andeq	r0, r0, r5, asr #32
 434:	20000242 	andcs	r0, r0, r2, asr #4
 438:	0000005a 	andeq	r0, r0, sl, asr r0
 43c:	01ea9c01 	mvneq	r9, r1, lsl #24
 440:	720e0000 	andvc	r0, lr, #0
 444:	1d010076 	stcne	0, cr0, [r1, #-472]	; 0xfffffe28
 448:	00000045 	andeq	r0, r0, r5, asr #32
 44c:	006f9102 	rsbeq	r9, pc, r2, lsl #2
 450:	00025406 	andeq	r5, r2, r6, lsl #8
 454:	18140100 	ldmdane	r4, {r8}
 458:	2a200002 	bcs	800468 <startup-0x1f7ffb98>
 45c:	01000000 	mrseq	r0, (UNDEF: 0)
 460:	00020e9c 	muleq	r2, ip, lr
 464:	02860c00 	addeq	r0, r6, #0, 24
 468:	14010000 	strne	r0, [r1], #-0
 46c:	00000071 	andeq	r0, r0, r1, ror r0
 470:	00779102 	rsbseq	r9, r7, r2, lsl #2
 474:	00030406 	andeq	r0, r3, r6, lsl #8
 478:	f40f0100 	vst4.8	{d0,d2,d4,d6}, [pc], r0
 47c:	24200001 	strtcs	r0, [r0], #-1
 480:	01000000 	mrseq	r0, (UNDEF: 0)
 484:	0002329c 	muleq	r2, ip, r2
 488:	02fc0c00 	rscseq	r0, ip, #0, 24
 48c:	0f010000 	svceq	0x00010000
 490:	00000071 	andeq	r0, r0, r1, ror r0
 494:	00779102 	rsbseq	r9, r7, r2, lsl #2
 498:	0002110f 	andeq	r1, r2, pc, lsl #2
 49c:	b0090100 	andlt	r0, r9, r0, lsl #2
 4a0:	44200001 	strtmi	r0, [r0], #-1
 4a4:	01000000 	mrseq	r0, (UNDEF: 0)
 4a8:	0002549c 	muleq	r2, ip, r4
 4ac:	00780700 	rsbseq	r0, r8, r0, lsl #14
 4b0:	00710901 	rsbseq	r0, r1, r1, lsl #18
 4b4:	91020000 	mrsls	r0, (UNDEF: 2)
 4b8:	32100077 	andscc	r0, r0, #119	; 0x77
 4bc:	01000003 	tsteq	r0, r3
 4c0:	00017403 	andeq	r7, r1, r3, lsl #8
 4c4:	00003c20 	andeq	r3, r0, r0, lsr #24
 4c8:	079c0100 	ldreq	r0, [ip, r0, lsl #2]
 4cc:	03010078 	movweq	r0, #4216	; 0x1078
 4d0:	00000071 	andeq	r0, r0, r1, ror r0
 4d4:	00779102 	rsbseq	r9, r7, r2, lsl #2
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	00160200 	andseq	r0, r6, r0, lsl #4
  14:	0b3a0e03 	bleq	e83828 <startup-0x1f17c7d8>
  18:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  1c:	24030000 	strcs	r0, [r3], #-0
  20:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  24:	000e030b 	andeq	r0, lr, fp, lsl #6
  28:	00240400 	eoreq	r0, r4, r0, lsl #8
  2c:	0b3e0b0b 	bleq	f82c60 <startup-0x1f07d3a0>
  30:	00000803 	andeq	r0, r0, r3, lsl #16
  34:	3f012e05 	svccc	0x00012e05
  38:	3a0e0319 	bcc	380ca4 <startup-0x1fc7f35c>
  3c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  40:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  44:	96184006 	ldrls	r4, [r8], -r6
  48:	13011942 	movwne	r1, #6466	; 0x1942
  4c:	34060000 	strcc	r0, [r6], #-0
  50:	3a080300 	bcc	200c58 <startup-0x1fdff3a8>
  54:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  58:	00180213 	andseq	r0, r8, r3, lsl r2
  5c:	00340700 	eorseq	r0, r4, r0, lsl #14
  60:	0b3a0e03 	bleq	e83874 <startup-0x1f17c78c>
  64:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  68:	00001802 	andeq	r1, r0, r2, lsl #16
  6c:	0b000f08 	bleq	3c94 <startup-0x1fffc36c>
  70:	0013490b 	andseq	r4, r3, fp, lsl #18
  74:	01010900 	tsteq	r1, r0, lsl #18
  78:	13011349 	movwne	r1, #4937	; 0x1349
  7c:	210a0000 	mrscs	r0, (UNDEF: 10)
  80:	2f134900 	svccs	0x00134900
  84:	0b00000b 	bleq	b8 <startup-0x1fffff48>
  88:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
  8c:	0b3a0e03 	bleq	e838a0 <startup-0x1f17c760>
  90:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
  94:	06120111 			; <UNDEFINED> instruction: 0x06120111
  98:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
  9c:	00000019 	andeq	r0, r0, r9, lsl r0
  a0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
  a4:	030b130e 	movweq	r1, #45838	; 0xb30e
  a8:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
  ac:	00171006 	andseq	r1, r7, r6
  b0:	00160200 	andseq	r0, r6, r0, lsl #4
  b4:	0b3a0e03 	bleq	e838c8 <startup-0x1f17c738>
  b8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  bc:	24030000 	strcs	r0, [r3], #-0
  c0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  c4:	000e030b 	andeq	r0, lr, fp, lsl #6
  c8:	00260400 	eoreq	r0, r6, r0, lsl #8
  cc:	00001349 	andeq	r1, r0, r9, asr #6
  d0:	0b002405 	bleq	90ec <startup-0x1fff6f14>
  d4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  d8:	06000008 	streq	r0, [r0], -r8
  dc:	0b0b0113 	bleq	2c0530 <startup-0x1fd3fad0>
  e0:	0b3b0b3a 	bleq	ec2dd0 <startup-0x1f13d230>
  e4:	00001301 	andeq	r1, r0, r1, lsl #6
  e8:	03000d07 	movweq	r0, #3335	; 0xd07
  ec:	3b0b3a0e 	blcc	2ce92c <startup-0x1fd316d4>
  f0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  f4:	0800000b 	stmdaeq	r0, {r0, r1, r3}
  f8:	0803000d 	stmdaeq	r3, {r0, r2, r3}
  fc:	0b3b0b3a 	bleq	ec2dec <startup-0x1f13d214>
 100:	0b381349 	bleq	e04e2c <startup-0x1f1fb1d4>
 104:	35090000 	strcc	r0, [r9, #-0]
 108:	00134900 	andseq	r4, r3, r0, lsl #18
 10c:	000f0a00 	andeq	r0, pc, r0, lsl #20
 110:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 114:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
 118:	03193f01 	tsteq	r9, #1, 30
 11c:	3b0b3a0e 	blcc	2ce95c <startup-0x1fd316a4>
 120:	1119270b 	tstne	r9, fp, lsl #14
 124:	40061201 	andmi	r1, r6, r1, lsl #4
 128:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 12c:	00001301 	andeq	r1, r0, r1, lsl #6
 130:	0300050c 	movweq	r0, #1292	; 0x50c
 134:	3b0b3a08 	blcc	2ce95c <startup-0x1fd316a4>
 138:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 13c:	0d000018 	stceq	0, cr0, [r0, #-96]	; 0xffffffa0
 140:	0111010b 	tsteq	r1, fp, lsl #2
 144:	00000612 	andeq	r0, r0, r2, lsl r6
 148:	0300340e 	movweq	r3, #1038	; 0x40e
 14c:	3b0b3a0e 	blcc	2ce98c <startup-0x1fd31674>
 150:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 154:	0f000018 	svceq	0x00000018
 158:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 15c:	0b3a0e03 	bleq	e83970 <startup-0x1f17c690>
 160:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 164:	06120111 			; <UNDEFINED> instruction: 0x06120111
 168:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 16c:	10000019 	andne	r0, r0, r9, lsl r0
 170:	08030034 	stmdaeq	r3, {r2, r4, r5}
 174:	0b3b0b3a 	bleq	ec2e64 <startup-0x1f13d19c>
 178:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 17c:	01000000 	mrseq	r0, (UNDEF: 0)
 180:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 184:	0e030b13 	vmoveq.32	d3[0], r0
 188:	06120111 			; <UNDEFINED> instruction: 0x06120111
 18c:	00001710 	andeq	r1, r0, r0, lsl r7
 190:	03001602 	movweq	r1, #1538	; 0x602
 194:	3b0b3a0e 	blcc	2ce9d4 <startup-0x1fd3162c>
 198:	0013490b 	andseq	r4, r3, fp, lsl #18
 19c:	00240300 	eoreq	r0, r4, r0, lsl #6
 1a0:	0b3e0b0b 	bleq	f82dd4 <startup-0x1f07d22c>
 1a4:	00000e03 	andeq	r0, r0, r3, lsl #28
 1a8:	49002604 	stmdbmi	r0, {r2, r9, sl, sp}
 1ac:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
 1b0:	0b0b0024 	bleq	2c0248 <startup-0x1fd3fdb8>
 1b4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 1b8:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
 1bc:	03193f01 	tsteq	r9, #1, 30
 1c0:	3b0b3a0e 	blcc	2cea00 <startup-0x1fd31600>
 1c4:	1119270b 	tstne	r9, fp, lsl #14
 1c8:	40061201 	andmi	r1, r6, r1, lsl #4
 1cc:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1d0:	00001301 	andeq	r1, r0, r1, lsl #6
 1d4:	03000507 	movweq	r0, #1287	; 0x507
 1d8:	3b0b3a08 	blcc	2cea00 <startup-0x1fd31600>
 1dc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 1e0:	08000018 	stmdaeq	r0, {r3, r4}
 1e4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 1e8:	0b3a0e03 	bleq	e839fc <startup-0x1f17c604>
 1ec:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 1f0:	0000193c 	andeq	r1, r0, ip, lsr r9
 1f4:	00001809 	andeq	r1, r0, r9, lsl #16
 1f8:	00340a00 	eorseq	r0, r4, r0, lsl #20
 1fc:	0b3a0e03 	bleq	e83a10 <startup-0x1f17c5f0>
 200:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 204:	00001802 	andeq	r1, r0, r2, lsl #16
 208:	3f002e0b 	svccc	0x00002e0b
 20c:	3a0e0319 	bcc	380e78 <startup-0x1fc7f188>
 210:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 214:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 218:	96184006 	ldrls	r4, [r8], -r6
 21c:	00001942 	andeq	r1, r0, r2, asr #18
 220:	0300050c 	movweq	r0, #1292	; 0x50c
 224:	3b0b3a0e 	blcc	2cea64 <startup-0x1fd3159c>
 228:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 22c:	0d000018 	stceq	0, cr0, [r0, #-96]	; 0xffffffa0
 230:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 234:	0b3a0e03 	bleq	e83a48 <startup-0x1f17c5b8>
 238:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 23c:	01111349 	tsteq	r1, r9, asr #6
 240:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 244:	01194296 			; <UNDEFINED> instruction: 0x01194296
 248:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
 24c:	08030034 	stmdaeq	r3, {r2, r4, r5}
 250:	0b3b0b3a 	bleq	ec2f40 <startup-0x1f13d0c0>
 254:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 258:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
 25c:	03193f01 	tsteq	r9, #1, 30
 260:	3b0b3a0e 	blcc	2ceaa0 <startup-0x1fd31560>
 264:	1119270b 	tstne	r9, fp, lsl #14
 268:	40061201 	andmi	r1, r6, r1, lsl #4
 26c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 270:	00001301 	andeq	r1, r0, r1, lsl #6
 274:	3f012e10 	svccc	0x00012e10
 278:	3a0e0319 	bcc	380ee4 <startup-0x1fc7f11c>
 27c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 280:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 284:	97184006 	ldrls	r4, [r8, -r6]
 288:	00001942 	andeq	r1, r0, r2, asr #18
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000000c4 	andeq	r0, r0, r4, asr #1
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	00f60002 	rscseq	r0, r6, r2
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	200000d8 	ldrdcs	r0, [r0], -r8
  3c:	0000009a 	muleq	r0, sl, r0
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	02660002 	rsbeq	r0, r6, #2
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20000174 	andcs	r0, r0, r4, ror r1
  5c:	000002e8 	andeq	r0, r0, r8, ror #5
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	200000d4 	ldrdcs	r0, [r0], -r4
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000000ac 	andeq	r0, r0, ip, lsr #1
   4:	00720002 	rsbseq	r0, r2, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	6a6c6566 	bvs	1b195c4 <startup-0x1e4e6a3c>
  28:	65442f6f 	strbvs	r2, [r4, #-3951]	; 0xfffff091
  2c:	6f746b73 	svcvs	0x00746b73
  30:	72612f70 	rsbvc	r2, r1, #112, 30	; 0x1c0
  34:	7373616d 	cmnvc	r3, #1073741851	; 0x4000001b
  38:	6c626d65 	stclvs	13, cr6, [r2], #-404	; 0xfffffe6c
  3c:	632f7265 			; <UNDEFINED> instruction: 0x632f7265
  40:	5f65646f 	svcpl	0x0065646f
  44:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
  48:	79656b2f 	stmdbvc	r5!, {r0, r1, r2, r3, r5, r8, r9, fp, sp, lr}^
  4c:	65725f62 	ldrbvs	r5, [r2, #-3938]!	; 0xfffff09e
  50:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
  54:	6373612f 	cmnvs	r3, #-1073741813	; 0xc000000b
  58:	69646969 	stmdbvs	r4!, {r0, r3, r5, r6, r8, fp, sp, lr}^
  5c:	616c7073 	smcvs	50947	; 0xc703
  60:	73000079 	movwvc	r0, #121	; 0x79
  64:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
  68:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
  6c:	00000100 	andeq	r0, r0, r0, lsl #2
  70:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
  74:	00682e73 	rsbeq	r2, r8, r3, ror lr
  78:	00000001 	andeq	r0, r0, r1
  7c:	00020500 	andeq	r0, r2, r0, lsl #10
  80:	1a200000 	bne	800088 <startup-0x1f7fff78>
  84:	03025e13 	movweq	r5, #11795	; 0x2e13
  88:	00010100 	andeq	r0, r1, r0, lsl #2
  8c:	00100205 	andseq	r0, r0, r5, lsl #4
  90:	12032000 	andne	r2, r3, #0
  94:	323d3001 	eorscc	r3, sp, #1
  98:	d93d3d3d 	ldmdble	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
  9c:	2f84753e 	svccs	0x0084753e
  a0:	223d4b30 	eorscs	r4, sp, #48, 22	; 0xc000
  a4:	2f4b4f72 	svccs	0x004b4f72
  a8:	024e7222 	subeq	r7, lr, #536870914	; 0x20000002
  ac:	0101000b 	tsteq	r1, fp
  b0:	000000b6 	strheq	r0, [r0], -r6
  b4:	00730002 	rsbseq	r0, r3, r2
  b8:	01020000 	mrseq	r0, (UNDEF: 2)
  bc:	000d0efb 	strdeq	r0, [sp], -fp
  c0:	01010101 	tsteq	r1, r1, lsl #2
  c4:	01000000 	mrseq	r0, (UNDEF: 0)
  c8:	43010000 	movwmi	r0, #4096	; 0x1000
  cc:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  d0:	2f737265 	svccs	0x00737265
  d4:	6a6c6566 	bvs	1b19674 <startup-0x1e4e698c>
  d8:	65442f6f 	strbvs	r2, [r4, #-3951]	; 0xfffff091
  dc:	6f746b73 	svcvs	0x00746b73
  e0:	72612f70 	rsbvc	r2, r1, #112, 30	; 0x1c0
  e4:	7373616d 	cmnvc	r3, #1073741851	; 0x4000001b
  e8:	6c626d65 	stclvs	13, cr6, [r2], #-404	; 0xfffffe6c
  ec:	632f7265 			; <UNDEFINED> instruction: 0x632f7265
  f0:	5f65646f 	svcpl	0x0065646f
  f4:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
  f8:	79656b2f 	stmdbvc	r5!, {r0, r1, r2, r3, r5, r8, r9, fp, sp, lr}^
  fc:	65725f62 	ldrbvs	r5, [r2, #-3938]!	; 0xfffff09e
 100:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
 104:	6974752f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r8, sl, ip, sp, lr}^
 108:	6400006c 	strvs	r0, [r0], #-108	; 0xffffff94
 10c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 110:	0100632e 	tsteq	r0, lr, lsr #6
 114:	79740000 	ldmdbvc	r4!, {}^	; <UNPREDICTABLE>
 118:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
 11c:	00010068 	andeq	r0, r1, r8, rrx
 120:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 124:	682e7961 	stmdavs	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
 128:	00000100 	andeq	r0, r0, r0, lsl #2
 12c:	02050000 	andeq	r0, r5, #0
 130:	200000d8 	ldrdcs	r0, [r0], -r8
 134:	3d2f3d17 	stccc	13, cr3, [pc, #-92]!	; e0 <startup-0x1fffff20>
 138:	3e3d3d3d 	mrccc	13, 1, r3, cr13, cr13, {1}
 13c:	773d403d 			; <UNDEFINED> instruction: 0x773d403d
 140:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 144:	02003e03 	andeq	r3, r0, #3, 28	; 0x30
 148:	002f0304 	eoreq	r0, pc, r4, lsl #6
 14c:	2f030402 	svccs	0x00030402
 150:	03040200 	movweq	r0, #16896	; 0x4200
 154:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
 158:	02002903 	andeq	r2, r0, #49152	; 0xc000
 15c:	3c060104 	stfccs	f0, [r6], {4}
 160:	4f4d5106 	svcmi	0x004d5106
 164:	00040275 	andeq	r0, r4, r5, ror r2
 168:	00f90101 	rscseq	r0, r9, r1, lsl #2
 16c:	00020000 	andeq	r0, r2, r0
 170:	00000077 	andeq	r0, r0, r7, ror r0
 174:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 178:	0101000d 	tsteq	r1, sp
 17c:	00000101 	andeq	r0, r0, r1, lsl #2
 180:	00000100 	andeq	r0, r0, r0, lsl #2
 184:	2f3a4301 	svccs	0x003a4301
 188:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 18c:	65662f73 	strbvs	r2, [r6, #-3955]!	; 0xfffff08d
 190:	2f6f6a6c 	svccs	0x006f6a6c
 194:	6b736544 	blvs	1cd96ac <startup-0x1e326954>
 198:	2f706f74 	svccs	0x00706f74
 19c:	616d7261 	cmnvs	sp, r1, ror #4
 1a0:	6d657373 	stclvs	3, cr7, [r5, #-460]!	; 0xfffffe34
 1a4:	72656c62 	rsbvc	r6, r5, #25088	; 0x6200
 1a8:	646f632f 	strbtvs	r6, [pc], #-815	; 1b0 <startup-0x1ffffe50>
 1ac:	696c5f65 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 1b0:	6b2f6574 	blvs	bd9788 <startup-0x1f426878>
 1b4:	5f627965 	svcpl	0x00627965
 1b8:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 1bc:	612f7265 			; <UNDEFINED> instruction: 0x612f7265
 1c0:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 1c4:	70736964 	rsbsvc	r6, r3, r4, ror #18
 1c8:	0079616c 	rsbseq	r6, r9, ip, ror #2
 1cc:	63736100 	cmnvs	r3, #0, 2
 1d0:	69646969 	stmdbvs	r4!, {r0, r3, r5, r6, r8, fp, sp, lr}^
 1d4:	616c7073 	smcvs	50947	; 0xc703
 1d8:	00632e79 	rsbeq	r2, r3, r9, ror lr
 1dc:	74000001 	strvc	r0, [r0], #-1
 1e0:	73657079 	cmnvc	r5, #121	; 0x79
 1e4:	0100682e 	tsteq	r0, lr, lsr #16
 1e8:	00000000 	andeq	r0, r0, r0
 1ec:	01740205 	cmneq	r4, r5, lsl #4
 1f0:	67152000 	ldrvs	r2, [r5, -r0]
 1f4:	67778391 			; <UNDEFINED> instruction: 0x67778391
 1f8:	676983d7 			; <UNDEFINED> instruction: 0x676983d7
 1fc:	674c593d 	smlaldxvs	r5, ip, sp, r9
 200:	4d593d3d 	ldclmi	13, cr3, [r9, #-244]	; 0xffffff0c
 204:	3d673d3d 	stclcc	13, cr3, [r7, #-244]!	; 0xffffff0c
 208:	6767593d 			; <UNDEFINED> instruction: 0x6767593d
 20c:	3d3d842f 	cfldrscc	mvf8, [sp, #-188]!	; 0xffffff44
 210:	67593d67 	ldrbvs	r3, [r9, -r7, ror #26]
 214:	68852f67 	stmvs	r5, {r0, r1, r2, r5, r6, r8, r9, sl, fp, sp}
 218:	3e2f4b3d 	vmovcc.16	d15[2], r4
 21c:	3d3d3d69 	ldccc	13, cr3, [sp, #-420]!	; 0xfffffe5c
 220:	3d4b2f2f 	stclcc	15, cr2, [fp, #-188]	; 0xffffff44
 224:	0091692f 	addseq	r6, r1, pc, lsr #18
 228:	06010402 	streq	r0, [r1], -r2, lsl #8
 22c:	3d830620 	stccc	6, cr0, [r3, #128]	; 0x80
 230:	2f4d5959 	svccs	0x004d5959
 234:	67674b4b 	strbvs	r4, [r7, -fp, asr #22]!
 238:	0200913f 	andeq	r9, r0, #-1073741809	; 0xc000000f
 23c:	4a060104 	bmi	180654 <startup-0x1fe7f9ac>
 240:	02040200 	andeq	r0, r4, #0, 4
 244:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
 248:	02004a04 	andeq	r4, r0, #4, 20	; 0x4000
 24c:	3f060404 	svccc	0x00060404
 250:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
 254:	00674dad 	rsbeq	r4, r7, sp, lsr #27
 258:	06010402 	streq	r0, [r1], -r2, lsl #8
 25c:	3d830620 	stccc	6, cr0, [r3, #128]	; 0x80
 260:	04023d59 	streq	r3, [r2], #-3417	; 0xfffff2a7
 264:	Address 0x00000264 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
   4:	75003233 	strvc	r3, [r0, #-563]	; 0xfffffdcd
   8:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
   c:	2064656e 	rsbcs	r6, r4, lr, ror #10
  10:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
  14:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
  18:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
  1c:	332e3620 			; <UNDEFINED> instruction: 0x332e3620
  20:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  24:	30373130 	eorscc	r3, r7, r0, lsr r1
  28:	20353132 	eorscs	r3, r5, r2, lsr r1
  2c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  30:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  34:	415b2029 	cmpmi	fp, r9, lsr #32
  38:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff2ee <ascii_write_char+0xdfffeece>
  3c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  40:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  44:	72622d36 	rsbvc	r2, r2, #3456	; 0xd80
  48:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  4c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  50:	6f697369 	svcvs	0x00697369
  54:	3432206e 	ldrtcc	r2, [r2], #-110	; 0xffffff92
  58:	32313535 	eorscc	r3, r1, #222298112	; 0xd400000
  5c:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
  60:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
  64:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
  68:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
  6c:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
  70:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
  74:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
  78:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
  7c:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
  80:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
  84:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
  88:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
  8c:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
  90:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
  94:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
  98:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
  9c:	20672d20 	rsbcs	r2, r7, r0, lsr #26
  a0:	20304f2d 	eorscs	r4, r0, sp, lsr #30
  a4:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
  a8:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
  ac:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
  b0:	3a43006e 	bcc	10c0270 <startup-0x1ef3fd90>
  b4:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
  b8:	662f7372 			; <UNDEFINED> instruction: 0x662f7372
  bc:	6f6a6c65 	svcvs	0x006a6c65
  c0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
  c4:	706f746b 	rsbvc	r7, pc, fp, ror #8
  c8:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
  cc:	65737361 	ldrbvs	r7, [r3, #-865]!	; 0xfffffc9f
  d0:	656c626d 	strbvs	r6, [ip, #-621]!	; 0xfffffd93
  d4:	6f632f72 	svcvs	0x00632f72
  d8:	6c5f6564 	cfldr64vs	mvdx6, [pc], {100}	; 0x64
  dc:	2f657469 	svccs	0x00657469
  e0:	6279656b 	rsbsvs	r6, r9, #448790528	; 0x1ac00000
  e4:	6165725f 	cmnvs	r5, pc, asr r2
  e8:	2f726564 	svccs	0x00726564
  ec:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  f0:	73696469 	cmnvc	r9, #1761607680	; 0x69000000
  f4:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
  f8:	6174732f 	cmnvs	r4, pc, lsr #6
  fc:	70757472 	rsbsvc	r7, r5, r2, ror r4
 100:	6100632e 	tstvs	r0, lr, lsr #6
 104:	695f7070 	ldmdbvs	pc, {r4, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
 108:	0074696e 	rsbseq	r6, r4, lr, ror #18
 10c:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 110:	00707574 	rsbseq	r7, r0, r4, ror r5
 114:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0xfffffa8c
 118:	65740031 	ldrbvs	r0, [r4, #-49]!	; 0xffffffcf
 11c:	00327473 	eorseq	r7, r2, r3, ror r4
 120:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
 124:	6e752074 	mrcvs	0, 3, r2, cr5, cr4, {3}
 128:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 12c:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
 130:	7300746e 	movwvc	r7, #1134	; 0x46e
 134:	74657a69 	strbtvc	r7, [r5], #-2665	; 0xfffff597
 138:	00657079 	rsbeq	r7, r5, r9, ror r0
 13c:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
 140:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
 144:	69750074 	ldmdbvs	r5!, {r2, r4, r5, r6}^
 148:	3631746e 	ldrtcc	r7, [r1], -lr, ror #8
 14c:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 150:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 96 <startup-0x1fffff6a>	; <UNPREDICTABLE>
 154:	696c6c69 	stmdbvs	ip!, {r0, r3, r5, r6, sl, fp, sp, lr}^
 158:	52544300 	subspl	r4, r4, #0, 6
 15c:	4f435f4c 	svcmi	0x00435f4c
 160:	00544e55 	subseq	r4, r4, r5, asr lr
 164:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
 168:	00635f38 	rsbeq	r5, r3, r8, lsr pc
 16c:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
 170:	54430038 	strbpl	r0, [r3], #-56	; 0xffffffc8
 174:	64004c52 	strvs	r4, [r0], #-3154	; 0xfffff3ae
 178:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 17c:	3035325f 	eorscc	r3, r5, pc, asr r2
 180:	6400736e 	strvs	r7, [r0], #-878	; 0xfffffc92
 184:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 188:	63696d5f 	cmnvs	r9, #6080	; 0x17c0
 18c:	4c006f72 	stcmi	15, cr6, [r0], {114}	; 0x72
 190:	0044414f 	subeq	r4, r4, pc, asr #2
 194:	5f534552 	svcpl	0x00534552
 198:	4c525443 	cfldrdmi	mvd5, [r2], {67}	; 0x43
 19c:	45520031 	ldrbmi	r0, [r2, #-49]	; 0xffffffcf
 1a0:	54435f53 	strbpl	r5, [r3], #-3923	; 0xfffff0ad
 1a4:	00324c52 	eorseq	r4, r2, r2, asr ip
 1a8:	706f6f6c 	rsbvc	r6, pc, ip, ror #30
 1ac:	69750073 	ldmdbvs	r5!, {r0, r1, r4, r5, r6}^
 1b0:	3233746e 	eorscc	r7, r3, #1845493760	; 0x6e000000
 1b4:	5300635f 	movwpl	r6, #863	; 0x35f
 1b8:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
 1bc:	74506b63 	ldrbvc	r6, [r0], #-2915	; 0xfffff49d
 1c0:	79530072 	ldmdbvc	r3, {r1, r4, r5, r6}^
 1c4:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
 1c8:	3a43006b 	bcc	10c037c <startup-0x1ef3fc84>
 1cc:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 1d0:	662f7372 			; <UNDEFINED> instruction: 0x662f7372
 1d4:	6f6a6c65 	svcvs	0x006a6c65
 1d8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 1dc:	706f746b 	rsbvc	r7, pc, fp, ror #8
 1e0:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 1e4:	65737361 	ldrbvs	r7, [r3, #-865]!	; 0xfffffc9f
 1e8:	656c626d 	strbvs	r6, [ip, #-621]!	; 0xfffffd93
 1ec:	6f632f72 	svcvs	0x00632f72
 1f0:	6c5f6564 	cfldr64vs	mvdx6, [pc], {100}	; 0x64
 1f4:	2f657469 	svccs	0x00657469
 1f8:	6279656b 	rsbsvs	r6, r9, #448790528	; 0x1ac00000
 1fc:	6165725f 	cmnvs	r5, pc, asr r2
 200:	2f726564 	svccs	0x00726564
 204:	6c697475 	cfstrdvs	mvd7, [r9], #-468	; 0xfffffe2c
 208:	6c65642f 	cfstrdvs	mvd6, [r5], #-188	; 0xffffff44
 20c:	632e7961 			; <UNDEFINED> instruction: 0x632e7961
 210:	63736100 	cmnvs	r3, #0, 2
 214:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
 218:	5f6c7274 	svcpl	0x006c7274
 21c:	5f746962 	svcpl	0x00746962
 220:	61656c63 	cmnvs	r5, r3, ror #24
 224:	73610072 	cmnvc	r1, #114	; 0x72
 228:	5f696963 	svcpl	0x00696963
 22c:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 230:	6f635f65 	svcvs	0x00635f65
 234:	6f72746e 	svcvs	0x0072746e
 238:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 23c:	74796200 	ldrbtvc	r6, [r9], #-512	; 0xfffffe00
 240:	73610065 	cmnvc	r1, #101	; 0x65
 244:	5f696963 	svcpl	0x00696963
 248:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 24c:	6174735f 	cmnvs	r4, pc, asr r3
 250:	00737574 	rsbseq	r7, r3, r4, ror r5
 254:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 258:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 25c:	5f657469 	svcpl	0x00657469
 260:	61746164 	cmnvs	r4, r4, ror #2
 264:	63736100 	cmnvs	r3, #0, 2
 268:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 26c:	5f646165 	svcpl	0x00646165
 270:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 274:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 278:	61007265 	tstvs	r0, r5, ror #4
 27c:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 280:	6165725f 	cmnvs	r5, pc, asr r2
 284:	61645f64 	cmnvs	r4, r4, ror #30
 288:	61006174 	tstvs	r0, r4, ror r1
 28c:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
 290:	63007373 	movwvs	r7, #883	; 0x373
 294:	616d6d6f 	cmnvs	sp, pc, ror #26
 298:	6544646e 	strbvs	r6, [r4, #-1134]	; 0xfffffb92
 29c:	0079616c 	rsbseq	r6, r9, ip, ror #2
 2a0:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff865 <ascii_write_char+0xdffff445>
 2a4:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 2a8:	6c65662f 	stclvs	6, cr6, [r5], #-188	; 0xffffff44
 2ac:	442f6f6a 	strtmi	r6, [pc], #-3946	; 2b4 <startup-0x1ffffd4c>
 2b0:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
 2b4:	612f706f 			; <UNDEFINED> instruction: 0x612f706f
 2b8:	73616d72 	cmnvc	r1, #7296	; 0x1c80
 2bc:	626d6573 	rsbvs	r6, sp, #482344960	; 0x1cc00000
 2c0:	2f72656c 	svccs	0x0072656c
 2c4:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 2c8:	74696c5f 	strbtvc	r6, [r9], #-3167	; 0xfffff3a1
 2cc:	656b2f65 	strbvs	r2, [fp, #-3941]!	; 0xfffff09b
 2d0:	725f6279 	subsvc	r6, pc, #-1879048185	; 0x90000007
 2d4:	65646165 	strbvs	r6, [r4, #-357]!	; 0xfffffe9b
 2d8:	73612f72 	cmnvc	r1, #456	; 0x1c8
 2dc:	64696963 	strbtvs	r6, [r9], #-2403	; 0xfffff69d
 2e0:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 2e4:	612f7961 			; <UNDEFINED> instruction: 0x612f7961
 2e8:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 2ec:	70736964 	rsbsvc	r6, r3, r4, ror #18
 2f0:	2e79616c 	rpwcsez	f6, f1, #4.0
 2f4:	73610063 	cmnvc	r1, #99	; 0x63
 2f8:	5f696963 	svcpl	0x00696963
 2fc:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
 300:	00646e61 	rsbeq	r6, r4, r1, ror #28
 304:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 308:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 30c:	5f657469 	svcpl	0x00657469
 310:	00646d63 	rsbeq	r6, r4, r3, ror #26
 314:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 318:	6f675f69 	svcvs	0x00675f69
 31c:	79786f74 	ldmdbvc	r8!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 320:	63736100 	cmnvs	r3, #0, 2
 324:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 328:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 32c:	6168635f 	cmnvs	r8, pc, asr r3
 330:	73610072 	cmnvc	r1, #114	; 0x72
 334:	5f696963 	svcpl	0x00696963
 338:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 33c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 340:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
 344:	63736100 	cmnvs	r3, #0, 2
 348:	695f6969 	ldmdbvs	pc, {r0, r3, r5, r6, r8, fp, sp, lr}^	; <UNPREDICTABLE>
 34c:	0074696e 	rsbseq	r6, r4, lr, ror #18

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	0000003c 	andeq	r0, r0, ip, lsr r0
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	00000020 	andeq	r0, r0, r0, lsr #32
  40:	00000000 	andeq	r0, r0, r0
  44:	2000004c 	andcs	r0, r0, ip, asr #32
  48:	00000088 	andeq	r0, r0, r8, lsl #1
  4c:	400c0e41 	andmi	r0, ip, r1, asr #28
  50:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  54:	018e4002 	orreq	r4, lr, r2
  58:	41400e41 	cmpmi	r0, r1, asr #28
  5c:	0000070d 	andeq	r0, r0, sp, lsl #14
  60:	0000000c 	andeq	r0, r0, ip
  64:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  68:	7c020001 	stcvc	0, cr0, [r2], {1}
  6c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  70:	0000001c 	andeq	r0, r0, ip, lsl r0
  74:	00000060 	andeq	r0, r0, r0, rrx
  78:	200000d8 	ldrdcs	r0, [r0], -r8
  7c:	00000048 	andeq	r0, r0, r8, asr #32
  80:	40080e41 	andmi	r0, r8, r1, asr #28
  84:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  88:	100e4101 	andne	r4, lr, r1, lsl #2
  8c:	00070d41 	andeq	r0, r7, r1, asr #26
  90:	0000001c 	andeq	r0, r0, ip, lsl r0
  94:	00000060 	andeq	r0, r0, r0, rrx
  98:	20000120 	andcs	r0, r0, r0, lsr #2
  9c:	00000034 	andeq	r0, r0, r4, lsr r0
  a0:	40080e41 	andmi	r0, r8, r1, asr #28
  a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  a8:	180e4101 	stmdane	lr, {r0, r8, lr}
  ac:	00070d41 	andeq	r0, r7, r1, asr #26
  b0:	0000001c 	andeq	r0, r0, ip, lsl r0
  b4:	00000060 	andeq	r0, r0, r0, rrx
  b8:	20000154 	andcs	r0, r0, r4, asr r1
  bc:	0000001e 	andeq	r0, r0, lr, lsl r0
  c0:	40080e41 	andmi	r0, r8, r1, asr #28
  c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c8:	100e4101 	andne	r4, lr, r1, lsl #2
  cc:	00070d41 	andeq	r0, r7, r1, asr #26
  d0:	0000000c 	andeq	r0, r0, ip
  d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  d8:	7c020001 	stcvc	0, cr0, [r2], {1}
  dc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  e8:	20000174 	andcs	r0, r0, r4, ror r1
  ec:	0000003c 	andeq	r0, r0, ip, lsr r0
  f0:	40080e41 	andmi	r0, r8, r1, asr #28
  f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f8:	100e4101 	andne	r4, lr, r1, lsl #2
  fc:	00070d41 	andeq	r0, r7, r1, asr #26
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 108:	200001b0 			; <UNDEFINED> instruction: 0x200001b0
 10c:	00000044 	andeq	r0, r0, r4, asr #32
 110:	40080e41 	andmi	r0, r8, r1, asr #28
 114:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 118:	100e4101 	andne	r4, lr, r1, lsl #2
 11c:	00070d41 	andeq	r0, r7, r1, asr #26
 120:	0000001c 	andeq	r0, r0, ip, lsl r0
 124:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 128:	200001f4 	strdcs	r0, [r0], -r4
 12c:	00000024 	andeq	r0, r0, r4, lsr #32
 130:	40080e41 	andmi	r0, r8, r1, asr #28
 134:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 138:	100e4101 	andne	r4, lr, r1, lsl #2
 13c:	00070d41 	andeq	r0, r7, r1, asr #26
 140:	0000001c 	andeq	r0, r0, ip, lsl r0
 144:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 148:	20000218 	andcs	r0, r0, r8, lsl r2
 14c:	0000002a 	andeq	r0, r0, sl, lsr #32
 150:	40080e41 	andmi	r0, r8, r1, asr #28
 154:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 158:	100e4101 	andne	r4, lr, r1, lsl #2
 15c:	00070d41 	andeq	r0, r7, r1, asr #26
 160:	00000020 	andeq	r0, r0, r0, lsr #32
 164:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 168:	20000242 	andcs	r0, r0, r2, asr #4
 16c:	0000005a 	andeq	r0, r0, sl, asr r0
 170:	400c0e41 	andmi	r0, ip, r1, asr #28
 174:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 178:	018e4002 	orreq	r4, lr, r2
 17c:	41180e41 	tstmi	r8, r1, asr #28
 180:	0000070d 	andeq	r0, r0, sp, lsl #14
 184:	00000020 	andeq	r0, r0, r0, lsr #32
 188:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 18c:	2000029c 	mulcs	r0, ip, r2
 190:	00000054 	andeq	r0, r0, r4, asr r0
 194:	400c0e41 	andmi	r0, ip, r1, asr #28
 198:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 19c:	018e4002 	orreq	r4, lr, r2
 1a0:	41180e41 	tstmi	r8, r1, asr #28
 1a4:	0000070d 	andeq	r0, r0, sp, lsl #14
 1a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1ac:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 1b0:	200002f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 1b4:	00000030 	andeq	r0, r0, r0, lsr r0
 1b8:	40080e41 	andmi	r0, r8, r1, asr #28
 1bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1c0:	100e4101 	andne	r4, lr, r1, lsl #2
 1c4:	00070d41 	andeq	r0, r7, r1, asr #26
 1c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1cc:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 1d0:	20000320 	andcs	r0, r0, r0, lsr #6
 1d4:	00000038 	andeq	r0, r0, r8, lsr r0
 1d8:	40080e41 	andmi	r0, r8, r1, asr #28
 1dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1e0:	100e4101 	andne	r4, lr, r1, lsl #2
 1e4:	00070d41 	andeq	r0, r7, r1, asr #26
 1e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1ec:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 1f0:	20000358 	andcs	r0, r0, r8, asr r3
 1f4:	00000046 	andeq	r0, r0, r6, asr #32
 1f8:	40080e41 	andmi	r0, r8, r1, asr #28
 1fc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 200:	100e4101 	andne	r4, lr, r1, lsl #2
 204:	00070d41 	andeq	r0, r7, r1, asr #26
 208:	00000018 	andeq	r0, r0, r8, lsl r0
 20c:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 210:	2000039e 	mulcs	r0, lr, r3
 214:	00000032 	andeq	r0, r0, r2, lsr r0
 218:	40080e41 	andmi	r0, r8, r1, asr #28
 21c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 220:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 224:	0000001c 	andeq	r0, r0, ip, lsl r0
 228:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 22c:	200003d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 230:	00000050 	andeq	r0, r0, r0, asr r0
 234:	40080e41 	andmi	r0, r8, r1, asr #28
 238:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 23c:	180e4101 	stmdane	lr, {r0, r8, lr}
 240:	00070d41 	andeq	r0, r7, r1, asr #26
 244:	0000001c 	andeq	r0, r0, ip, lsl r0
 248:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 24c:	20000420 	andcs	r0, r0, r0, lsr #8
 250:	0000003c 	andeq	r0, r0, ip, lsr r0
 254:	40080e41 	andmi	r0, r8, r1, asr #28
 258:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 25c:	100e4101 	andne	r4, lr, r1, lsl #2
 260:	00070d41 	andeq	r0, r7, r1, asr #26
