
./Debug/graphic_display.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
};


void startup(void)
{
	__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f8aa 	bl	2000015c <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
		" LDR R0,=0x2001C000\n" /* set stack */
		" MOV SP,R0\n"
		" BL main\n"   /* call main */
		"_exit: B .\n" /* never return */
	);
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <set_object_speed>:
    void                (*move) (struct tObject *);
    void                (*set_speed) (struct tObject *, int8 speedx, int8 speedy);
} Object, *ObjectPtr;

void set_object_speed(ObjectPtr obj, int8 speedx, int8 speedy)
{
20000010:	b580      	push	{r7, lr}
20000012:	b082      	sub	sp, #8
20000014:	af00      	add	r7, sp, #0
20000016:	6078      	str	r0, [r7, #4]
20000018:	0008      	movs	r0, r1
2000001a:	0011      	movs	r1, r2
2000001c:	1cfb      	adds	r3, r7, #3
2000001e:	1c02      	adds	r2, r0, #0
20000020:	701a      	strb	r2, [r3, #0]
20000022:	1cbb      	adds	r3, r7, #2
20000024:	1c0a      	adds	r2, r1, #0
20000026:	701a      	strb	r2, [r3, #0]
    obj->dirx = speedx;
20000028:	687b      	ldr	r3, [r7, #4]
2000002a:	1cfa      	adds	r2, r7, #3
2000002c:	7812      	ldrb	r2, [r2, #0]
2000002e:	711a      	strb	r2, [r3, #4]
    obj->diry = speedy;
20000030:	687b      	ldr	r3, [r7, #4]
20000032:	1cba      	adds	r2, r7, #2
20000034:	7812      	ldrb	r2, [r2, #0]
20000036:	715a      	strb	r2, [r3, #5]
}
20000038:	46c0      	nop			; (mov r8, r8)
2000003a:	46bd      	mov	sp, r7
2000003c:	b002      	add	sp, #8
2000003e:	bd80      	pop	{r7, pc}

20000040 <update_object>:

void update_object(ObjectPtr obj)
{
20000040:	b580      	push	{r7, lr}
20000042:	b082      	sub	sp, #8
20000044:	af00      	add	r7, sp, #0
20000046:	6078      	str	r0, [r7, #4]
    obj->clear(obj);
20000048:	687b      	ldr	r3, [r7, #4]
2000004a:	68db      	ldr	r3, [r3, #12]
2000004c:	687a      	ldr	r2, [r7, #4]
2000004e:	0010      	movs	r0, r2
20000050:	4798      	blx	r3
    obj->posx = obj->posx + obj->dirx;
20000052:	687b      	ldr	r3, [r7, #4]
20000054:	799b      	ldrb	r3, [r3, #6]
20000056:	b25b      	sxtb	r3, r3
20000058:	b2da      	uxtb	r2, r3
2000005a:	687b      	ldr	r3, [r7, #4]
2000005c:	791b      	ldrb	r3, [r3, #4]
2000005e:	b25b      	sxtb	r3, r3
20000060:	b2db      	uxtb	r3, r3
20000062:	18d3      	adds	r3, r2, r3
20000064:	b2db      	uxtb	r3, r3
20000066:	b25a      	sxtb	r2, r3
20000068:	687b      	ldr	r3, [r7, #4]
2000006a:	719a      	strb	r2, [r3, #6]
    obj->posy = obj->posy + obj->diry;
2000006c:	687b      	ldr	r3, [r7, #4]
2000006e:	79db      	ldrb	r3, [r3, #7]
20000070:	b25b      	sxtb	r3, r3
20000072:	b2da      	uxtb	r2, r3
20000074:	687b      	ldr	r3, [r7, #4]
20000076:	795b      	ldrb	r3, [r3, #5]
20000078:	b25b      	sxtb	r3, r3
2000007a:	b2db      	uxtb	r3, r3
2000007c:	18d3      	adds	r3, r2, r3
2000007e:	b2db      	uxtb	r3, r3
20000080:	b25a      	sxtb	r2, r3
20000082:	687b      	ldr	r3, [r7, #4]
20000084:	71da      	strb	r2, [r3, #7]

    if(obj->posx < 1 || obj->posx + obj->geo->sizex > 128)
20000086:	687b      	ldr	r3, [r7, #4]
20000088:	799b      	ldrb	r3, [r3, #6]
2000008a:	b25b      	sxtb	r3, r3
2000008c:	2b00      	cmp	r3, #0
2000008e:	dd09      	ble.n	200000a4 <update_object+0x64>
20000090:	687b      	ldr	r3, [r7, #4]
20000092:	799b      	ldrb	r3, [r3, #6]
20000094:	b25b      	sxtb	r3, r3
20000096:	001a      	movs	r2, r3
20000098:	687b      	ldr	r3, [r7, #4]
2000009a:	681b      	ldr	r3, [r3, #0]
2000009c:	785b      	ldrb	r3, [r3, #1]
2000009e:	18d3      	adds	r3, r2, r3
200000a0:	2b80      	cmp	r3, #128	; 0x80
200000a2:	dd08      	ble.n	200000b6 <update_object+0x76>
        obj->dirx = -obj->dirx;
200000a4:	687b      	ldr	r3, [r7, #4]
200000a6:	791b      	ldrb	r3, [r3, #4]
200000a8:	b25b      	sxtb	r3, r3
200000aa:	b2db      	uxtb	r3, r3
200000ac:	425b      	negs	r3, r3
200000ae:	b2db      	uxtb	r3, r3
200000b0:	b25a      	sxtb	r2, r3
200000b2:	687b      	ldr	r3, [r7, #4]
200000b4:	711a      	strb	r2, [r3, #4]

    if(obj->posy < 1 || obj->posy + obj->geo->sizey > 64)
200000b6:	687b      	ldr	r3, [r7, #4]
200000b8:	79db      	ldrb	r3, [r3, #7]
200000ba:	b25b      	sxtb	r3, r3
200000bc:	2b00      	cmp	r3, #0
200000be:	dd09      	ble.n	200000d4 <update_object+0x94>
200000c0:	687b      	ldr	r3, [r7, #4]
200000c2:	79db      	ldrb	r3, [r3, #7]
200000c4:	b25b      	sxtb	r3, r3
200000c6:	001a      	movs	r2, r3
200000c8:	687b      	ldr	r3, [r7, #4]
200000ca:	681b      	ldr	r3, [r3, #0]
200000cc:	789b      	ldrb	r3, [r3, #2]
200000ce:	18d3      	adds	r3, r2, r3
200000d0:	2b40      	cmp	r3, #64	; 0x40
200000d2:	dd08      	ble.n	200000e6 <update_object+0xa6>
        obj->diry = -obj->diry;
200000d4:	687b      	ldr	r3, [r7, #4]
200000d6:	795b      	ldrb	r3, [r3, #5]
200000d8:	b25b      	sxtb	r3, r3
200000da:	b2db      	uxtb	r3, r3
200000dc:	425b      	negs	r3, r3
200000de:	b2db      	uxtb	r3, r3
200000e0:	b25a      	sxtb	r2, r3
200000e2:	687b      	ldr	r3, [r7, #4]
200000e4:	715a      	strb	r2, [r3, #5]

    obj->draw(obj);
200000e6:	687b      	ldr	r3, [r7, #4]
200000e8:	689b      	ldr	r3, [r3, #8]
200000ea:	687a      	ldr	r2, [r7, #4]
200000ec:	0010      	movs	r0, r2
200000ee:	4798      	blx	r3
}
200000f0:	46c0      	nop			; (mov r8, r8)
200000f2:	46bd      	mov	sp, r7
200000f4:	b002      	add	sp, #8
200000f6:	bd80      	pop	{r7, pc}

200000f8 <init_app>:

void init_app(void)
{
200000f8:	b580      	push	{r7, lr}
200000fa:	af00      	add	r7, sp, #0
#ifdef USBDM
	*((unsigned long *)0x40023830) = 0x18;
200000fc:	4b13      	ldr	r3, [pc, #76]	; (2000014c <init_app+0x54>)
200000fe:	2218      	movs	r2, #24
20000100:	601a      	str	r2, [r3, #0]
	__asm volatile(" LDR R0,=0x08000209\n BLX R0 \n");
20000102:	48f1      	ldr	r0, [pc, #964]	; (200004c8 <draw_object+0x7e>)
20000104:	4780      	blx	r0
#endif

	GPIO_E.MODER = 0x55555555;
20000106:	4b12      	ldr	r3, [pc, #72]	; (20000150 <init_app+0x58>)
20000108:	4a12      	ldr	r2, [pc, #72]	; (20000154 <init_app+0x5c>)
2000010a:	601a      	str	r2, [r3, #0]
	GPIO_E.OSPEEDR = 0x55555555;
2000010c:	4b10      	ldr	r3, [pc, #64]	; (20000150 <init_app+0x58>)
2000010e:	4a11      	ldr	r2, [pc, #68]	; (20000154 <init_app+0x5c>)
20000110:	609a      	str	r2, [r3, #8]
	GPIO_E.OTYPER = 0x0;
20000112:	4b0f      	ldr	r3, [pc, #60]	; (20000150 <init_app+0x58>)
20000114:	2200      	movs	r2, #0
20000116:	809a      	strh	r2, [r3, #4]
	
	GPIO_D.MODER = 0x55000000;
20000118:	4b0f      	ldr	r3, [pc, #60]	; (20000158 <init_app+0x60>)
2000011a:	22aa      	movs	r2, #170	; 0xaa
2000011c:	05d2      	lsls	r2, r2, #23
2000011e:	601a      	str	r2, [r3, #0]
	GPIO_D.OTYPER &= 0x0000;
20000120:	4b0d      	ldr	r3, [pc, #52]	; (20000158 <init_app+0x60>)
20000122:	889b      	ldrh	r3, [r3, #4]
20000124:	4b0c      	ldr	r3, [pc, #48]	; (20000158 <init_app+0x60>)
20000126:	2200      	movs	r2, #0
20000128:	809a      	strh	r2, [r3, #4]
	GPIO_D.PUPDR &= 0x0000FFFF;
2000012a:	4b0b      	ldr	r3, [pc, #44]	; (20000158 <init_app+0x60>)
2000012c:	4a0a      	ldr	r2, [pc, #40]	; (20000158 <init_app+0x60>)
2000012e:	68d2      	ldr	r2, [r2, #12]
20000130:	0412      	lsls	r2, r2, #16
20000132:	0c12      	lsrs	r2, r2, #16
20000134:	60da      	str	r2, [r3, #12]
	GPIO_D.PUPDR |= 0x00AA0000;
20000136:	4b08      	ldr	r3, [pc, #32]	; (20000158 <init_app+0x60>)
20000138:	4a07      	ldr	r2, [pc, #28]	; (20000158 <init_app+0x60>)
2000013a:	68d2      	ldr	r2, [r2, #12]
2000013c:	21aa      	movs	r1, #170	; 0xaa
2000013e:	0409      	lsls	r1, r1, #16
20000140:	430a      	orrs	r2, r1
20000142:	60da      	str	r2, [r3, #12]
}
20000144:	46c0      	nop			; (mov r8, r8)
20000146:	46bd      	mov	sp, r7
20000148:	bd80      	pop	{r7, pc}
2000014a:	46c0      	nop			; (mov r8, r8)
2000014c:	40023830 	andmi	r3, r2, r0, lsr r8
20000150:	40021000 	andmi	r1, r2, r0
20000154:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000158:	40020c00 	andmi	r0, r2, r0, lsl #24

2000015c <main>:

void main(void)
{
2000015c:	b580      	push	{r7, lr}
2000015e:	af00      	add	r7, sp, #0

	// Autopong
	//autopong();
	
	// Steer the ball manually
	ballSteering();
20000160:	f000 f82c 	bl	200001bc <ballSteering>
}
20000164:	46c0      	nop			; (mov r8, r8)
20000166:	46bd      	mov	sp, r7
20000168:	bd80      	pop	{r7, pc}

2000016a <activateRow>:

// x: index of row
void activateRow(uint8 x) {
2000016a:	b580      	push	{r7, lr}
2000016c:	b082      	sub	sp, #8
2000016e:	af00      	add	r7, sp, #0
20000170:	0002      	movs	r2, r0
20000172:	1dfb      	adds	r3, r7, #7
20000174:	701a      	strb	r2, [r3, #0]
	GPIO_D.ODR_HIGH = 0;
20000176:	4b0b      	ldr	r3, [pc, #44]	; (200001a4 <activateRow+0x3a>)
20000178:	2200      	movs	r2, #0
2000017a:	755a      	strb	r2, [r3, #21]
	GPIO_D.ODR_HIGH |= (0x1 << (4 + x));
2000017c:	4909      	ldr	r1, [pc, #36]	; (200001a4 <activateRow+0x3a>)
2000017e:	4b09      	ldr	r3, [pc, #36]	; (200001a4 <activateRow+0x3a>)
20000180:	7d5b      	ldrb	r3, [r3, #21]
20000182:	b2db      	uxtb	r3, r3
20000184:	b25a      	sxtb	r2, r3
20000186:	1dfb      	adds	r3, r7, #7
20000188:	781b      	ldrb	r3, [r3, #0]
2000018a:	3304      	adds	r3, #4
2000018c:	2001      	movs	r0, #1
2000018e:	4098      	lsls	r0, r3
20000190:	0003      	movs	r3, r0
20000192:	b25b      	sxtb	r3, r3
20000194:	4313      	orrs	r3, r2
20000196:	b25b      	sxtb	r3, r3
20000198:	b2db      	uxtb	r3, r3
2000019a:	754b      	strb	r3, [r1, #21]
}
2000019c:	46c0      	nop			; (mov r8, r8)
2000019e:	46bd      	mov	sp, r7
200001a0:	b002      	add	sp, #8
200001a2:	bd80      	pop	{r7, pc}
200001a4:	40020c00 	andmi	r0, r2, r0, lsl #24

200001a8 <readColumns>:

uint8 readColumns() {
200001a8:	b580      	push	{r7, lr}
200001aa:	af00      	add	r7, sp, #0
	return GPIO_D.IDR_HIGH;
200001ac:	4b02      	ldr	r3, [pc, #8]	; (200001b8 <readColumns+0x10>)
200001ae:	7c5b      	ldrb	r3, [r3, #17]
200001b0:	b2db      	uxtb	r3, r3
}
200001b2:	0018      	movs	r0, r3
200001b4:	46bd      	mov	sp, r7
200001b6:	bd80      	pop	{r7, pc}
200001b8:	40020c00 	andmi	r0, r2, r0, lsl #24

200001bc <ballSteering>:


ballSteering(void) {
200001bc:	b590      	push	{r4, r7, lr}
200001be:	b083      	sub	sp, #12
200001c0:	af00      	add	r7, sp, #0
	ObjectPtr ballerBall = &ball;
200001c2:	4b24      	ldr	r3, [pc, #144]	; (20000254 <ballSteering+0x98>)
200001c4:	607b      	str	r3, [r7, #4]
	init_app();
200001c6:	f7ff ff97 	bl	200000f8 <init_app>
	graphic_initialize();
200001ca:	f000 fb3c 	bl	20000846 <graphic_initialize>

#ifndef SIMULATOR
	graphic_clear_screen();
200001ce:	f000 fb65 	bl	2000089c <graphic_clear_screen>
#endif

	ballerBall->set_speed(ballerBall, 0, 0);
200001d2:	687b      	ldr	r3, [r7, #4]
200001d4:	695b      	ldr	r3, [r3, #20]
200001d6:	6878      	ldr	r0, [r7, #4]
200001d8:	2200      	movs	r2, #0
200001da:	2100      	movs	r1, #0
200001dc:	4798      	blx	r3
	while(TRUE)
	{
		uint8 input = keyb();
200001de:	1cfc      	adds	r4, r7, #3
200001e0:	f000 f83a 	bl	20000258 <keyb>
200001e4:	0003      	movs	r3, r0
200001e6:	7023      	strb	r3, [r4, #0]
		// Up
		if (input == 1) {
200001e8:	1cfb      	adds	r3, r7, #3
200001ea:	781b      	ldrb	r3, [r3, #0]
200001ec:	2b01      	cmp	r3, #1
200001ee:	d107      	bne.n	20000200 <ballSteering+0x44>
			ballerBall->set_speed(ballerBall, 0, -SPEED);
200001f0:	687b      	ldr	r3, [r7, #4]
200001f2:	695b      	ldr	r3, [r3, #20]
200001f4:	2203      	movs	r2, #3
200001f6:	4252      	negs	r2, r2
200001f8:	6878      	ldr	r0, [r7, #4]
200001fa:	2100      	movs	r1, #0
200001fc:	4798      	blx	r3
200001fe:	e020      	b.n	20000242 <ballSteering+0x86>
		}
		// Left
		else if (input == 4) 
20000200:	1cfb      	adds	r3, r7, #3
20000202:	781b      	ldrb	r3, [r3, #0]
20000204:	2b04      	cmp	r3, #4
20000206:	d107      	bne.n	20000218 <ballSteering+0x5c>
		{
			ballerBall->set_speed(ballerBall, -SPEED, 0);
20000208:	687b      	ldr	r3, [r7, #4]
2000020a:	695b      	ldr	r3, [r3, #20]
2000020c:	2203      	movs	r2, #3
2000020e:	4251      	negs	r1, r2
20000210:	6878      	ldr	r0, [r7, #4]
20000212:	2200      	movs	r2, #0
20000214:	4798      	blx	r3
20000216:	e014      	b.n	20000242 <ballSteering+0x86>
		}
		// Down
		else if (input == 5)
20000218:	1cfb      	adds	r3, r7, #3
2000021a:	781b      	ldrb	r3, [r3, #0]
2000021c:	2b05      	cmp	r3, #5
2000021e:	d106      	bne.n	2000022e <ballSteering+0x72>
		{
			ballerBall->set_speed(ballerBall, 0, SPEED);
20000220:	687b      	ldr	r3, [r7, #4]
20000222:	695b      	ldr	r3, [r3, #20]
20000224:	6878      	ldr	r0, [r7, #4]
20000226:	2203      	movs	r2, #3
20000228:	2100      	movs	r1, #0
2000022a:	4798      	blx	r3
2000022c:	e009      	b.n	20000242 <ballSteering+0x86>
		}
		// Right
		else if (input == 6)
2000022e:	1cfb      	adds	r3, r7, #3
20000230:	781b      	ldrb	r3, [r3, #0]
20000232:	2b06      	cmp	r3, #6
20000234:	d105      	bne.n	20000242 <ballSteering+0x86>
		{
			ballerBall->set_speed(ballerBall, SPEED, 0);
20000236:	687b      	ldr	r3, [r7, #4]
20000238:	695b      	ldr	r3, [r3, #20]
2000023a:	6878      	ldr	r0, [r7, #4]
2000023c:	2200      	movs	r2, #0
2000023e:	2103      	movs	r1, #3
20000240:	4798      	blx	r3
		}
		
		ballerBall->move(ballerBall);
20000242:	687b      	ldr	r3, [r7, #4]
20000244:	691b      	ldr	r3, [r3, #16]
20000246:	687a      	ldr	r2, [r7, #4]
20000248:	0010      	movs	r0, r2
2000024a:	4798      	blx	r3
		delay_milli(40);
2000024c:	2028      	movs	r0, #40	; 0x28
2000024e:	f000 f984 	bl	2000055a <delay_milli>
	{
20000252:	e7c4      	b.n	200001de <ballSteering+0x22>
20000254:	20000aa4 	andcs	r0, r0, r4, lsr #21

20000258 <keyb>:
	}
}

uint8 keyb( void ) {
20000258:	b590      	push	{r4, r7, lr}
2000025a:	b083      	sub	sp, #12
2000025c:	af00      	add	r7, sp, #0
	uint8 activeKey = 0xFF;
2000025e:	1d3b      	adds	r3, r7, #4
20000260:	22ff      	movs	r2, #255	; 0xff
20000262:	701a      	strb	r2, [r3, #0]
	for (uint8 row = 0; row < 4; row++) {
20000264:	1dfb      	adds	r3, r7, #7
20000266:	2200      	movs	r2, #0
20000268:	701a      	strb	r2, [r3, #0]
2000026a:	e036      	b.n	200002da <keyb+0x82>
		activateRow(row);
2000026c:	1dfb      	adds	r3, r7, #7
2000026e:	781b      	ldrb	r3, [r3, #0]
20000270:	0018      	movs	r0, r3
20000272:	f7ff ff7a 	bl	2000016a <activateRow>
		uint8 columnValue = readColumns();
20000276:	1dbc      	adds	r4, r7, #6
20000278:	f7ff ff96 	bl	200001a8 <readColumns>
2000027c:	0003      	movs	r3, r0
2000027e:	7023      	strb	r3, [r4, #0]
		
		for (uint8 column = 0; column < 4; column++) {
20000280:	1d7b      	adds	r3, r7, #5
20000282:	2200      	movs	r2, #0
20000284:	701a      	strb	r2, [r3, #0]
20000286:	e01f      	b.n	200002c8 <keyb+0x70>
			uint8 activeColumn = (columnValue & 0x1);
20000288:	1cfb      	adds	r3, r7, #3
2000028a:	1dba      	adds	r2, r7, #6
2000028c:	7812      	ldrb	r2, [r2, #0]
2000028e:	2101      	movs	r1, #1
20000290:	400a      	ands	r2, r1
20000292:	701a      	strb	r2, [r3, #0]
			if (activeColumn) {
20000294:	1cfb      	adds	r3, r7, #3
20000296:	781b      	ldrb	r3, [r3, #0]
20000298:	2b00      	cmp	r3, #0
2000029a:	d00b      	beq.n	200002b4 <keyb+0x5c>
				activeKey = row * 4 + column;
2000029c:	1dfb      	adds	r3, r7, #7
2000029e:	781b      	ldrb	r3, [r3, #0]
200002a0:	009b      	lsls	r3, r3, #2
200002a2:	b2d9      	uxtb	r1, r3
200002a4:	1d3b      	adds	r3, r7, #4
200002a6:	1d7a      	adds	r2, r7, #5
200002a8:	7812      	ldrb	r2, [r2, #0]
200002aa:	188a      	adds	r2, r1, r2
200002ac:	701a      	strb	r2, [r3, #0]
				return activeKey;
200002ae:	1d3b      	adds	r3, r7, #4
200002b0:	781b      	ldrb	r3, [r3, #0]
200002b2:	e018      	b.n	200002e6 <keyb+0x8e>
			}
			columnValue >>= 0x1;
200002b4:	1dbb      	adds	r3, r7, #6
200002b6:	1dba      	adds	r2, r7, #6
200002b8:	7812      	ldrb	r2, [r2, #0]
200002ba:	0852      	lsrs	r2, r2, #1
200002bc:	701a      	strb	r2, [r3, #0]
		for (uint8 column = 0; column < 4; column++) {
200002be:	1d7b      	adds	r3, r7, #5
200002c0:	781a      	ldrb	r2, [r3, #0]
200002c2:	1d7b      	adds	r3, r7, #5
200002c4:	3201      	adds	r2, #1
200002c6:	701a      	strb	r2, [r3, #0]
200002c8:	1d7b      	adds	r3, r7, #5
200002ca:	781b      	ldrb	r3, [r3, #0]
200002cc:	2b03      	cmp	r3, #3
200002ce:	d9db      	bls.n	20000288 <keyb+0x30>
	for (uint8 row = 0; row < 4; row++) {
200002d0:	1dfb      	adds	r3, r7, #7
200002d2:	781a      	ldrb	r2, [r3, #0]
200002d4:	1dfb      	adds	r3, r7, #7
200002d6:	3201      	adds	r2, #1
200002d8:	701a      	strb	r2, [r3, #0]
200002da:	1dfb      	adds	r3, r7, #7
200002dc:	781b      	ldrb	r3, [r3, #0]
200002de:	2b03      	cmp	r3, #3
200002e0:	d9c4      	bls.n	2000026c <keyb+0x14>
		}
	}
	return activeKey;
200002e2:	1d3b      	adds	r3, r7, #4
200002e4:	781b      	ldrb	r3, [r3, #0]
}
200002e6:	0018      	movs	r0, r3
200002e8:	46bd      	mov	sp, r7
200002ea:	b003      	add	sp, #12
200002ec:	bd90      	pop	{r4, r7, pc}

200002ee <autopong>:

void autopong(void)
{
200002ee:	b580      	push	{r7, lr}
200002f0:	b082      	sub	sp, #8
200002f2:	af00      	add	r7, sp, #0
	ObjectPtr ballerBall = &ball;
200002f4:	4b0b      	ldr	r3, [pc, #44]	; (20000324 <autopong+0x36>)
200002f6:	607b      	str	r3, [r7, #4]
	init_app();
200002f8:	f7ff fefe 	bl	200000f8 <init_app>
	graphic_initialize();
200002fc:	f000 faa3 	bl	20000846 <graphic_initialize>

#ifndef SIMULATOR
	graphic_clear_screen();
20000300:	f000 facc 	bl	2000089c <graphic_clear_screen>
#endif

	ballerBall->set_speed(ballerBall, 4, 1);
20000304:	687b      	ldr	r3, [r7, #4]
20000306:	695b      	ldr	r3, [r3, #20]
20000308:	6878      	ldr	r0, [r7, #4]
2000030a:	2201      	movs	r2, #1
2000030c:	2104      	movs	r1, #4
2000030e:	4798      	blx	r3

	while(TRUE)
	{
		ballerBall->move(ballerBall);
20000310:	687b      	ldr	r3, [r7, #4]
20000312:	691b      	ldr	r3, [r3, #16]
20000314:	687a      	ldr	r2, [r7, #4]
20000316:	0010      	movs	r0, r2
20000318:	4798      	blx	r3
		delay_milli(40);
2000031a:	2028      	movs	r0, #40	; 0x28
2000031c:	f000 f91d 	bl	2000055a <delay_milli>
	{
20000320:	e7f6      	b.n	20000310 <autopong+0x22>
20000322:	46c0      	nop			; (mov r8, r8)
20000324:	20000aa4 	andcs	r0, r0, r4, lsr #21

20000328 <drawTest>:
	}
}

void drawTest(void)
{
20000328:	b580      	push	{r7, lr}
2000032a:	b082      	sub	sp, #8
2000032c:	af00      	add	r7, sp, #0
	uint32 i;
	init_app();
2000032e:	f7ff fee3 	bl	200000f8 <init_app>
	graphic_initialize();
20000332:	f000 fa88 	bl	20000846 <graphic_initialize>

#ifndef SIMULATOR
	graphic_clear_screen();
20000336:	f000 fab1 	bl	2000089c <graphic_clear_screen>
#endif

	for (i = 0; i < 128; i++)
2000033a:	2300      	movs	r3, #0
2000033c:	607b      	str	r3, [r7, #4]
2000033e:	e009      	b.n	20000354 <drawTest+0x2c>
	{
		pixel(i, 10, 1);
20000340:	687b      	ldr	r3, [r7, #4]
20000342:	b2db      	uxtb	r3, r3
20000344:	2201      	movs	r2, #1
20000346:	210a      	movs	r1, #10
20000348:	0018      	movs	r0, r3
2000034a:	f000 fada 	bl	20000902 <pixel>
	for (i = 0; i < 128; i++)
2000034e:	687b      	ldr	r3, [r7, #4]
20000350:	3301      	adds	r3, #1
20000352:	607b      	str	r3, [r7, #4]
20000354:	687b      	ldr	r3, [r7, #4]
20000356:	2b7f      	cmp	r3, #127	; 0x7f
20000358:	d9f2      	bls.n	20000340 <drawTest+0x18>
	}
	for (i = 0; i < 64; i++)
2000035a:	2300      	movs	r3, #0
2000035c:	607b      	str	r3, [r7, #4]
2000035e:	e009      	b.n	20000374 <drawTest+0x4c>
	{
		pixel(10, i, 1);
20000360:	687b      	ldr	r3, [r7, #4]
20000362:	b2db      	uxtb	r3, r3
20000364:	2201      	movs	r2, #1
20000366:	0019      	movs	r1, r3
20000368:	200a      	movs	r0, #10
2000036a:	f000 faca 	bl	20000902 <pixel>
	for (i = 0; i < 64; i++)
2000036e:	687b      	ldr	r3, [r7, #4]
20000370:	3301      	adds	r3, #1
20000372:	607b      	str	r3, [r7, #4]
20000374:	687b      	ldr	r3, [r7, #4]
20000376:	2b3f      	cmp	r3, #63	; 0x3f
20000378:	d9f2      	bls.n	20000360 <drawTest+0x38>
	}

	delay_milli(500);
2000037a:	23fa      	movs	r3, #250	; 0xfa
2000037c:	005b      	lsls	r3, r3, #1
2000037e:	0018      	movs	r0, r3
20000380:	f000 f8eb 	bl	2000055a <delay_milli>

	for (i = 0; i < 128; i++)
20000384:	2300      	movs	r3, #0
20000386:	607b      	str	r3, [r7, #4]
20000388:	e009      	b.n	2000039e <drawTest+0x76>
	{
		pixel(i, 10, 0);
2000038a:	687b      	ldr	r3, [r7, #4]
2000038c:	b2db      	uxtb	r3, r3
2000038e:	2200      	movs	r2, #0
20000390:	210a      	movs	r1, #10
20000392:	0018      	movs	r0, r3
20000394:	f000 fab5 	bl	20000902 <pixel>
	for (i = 0; i < 128; i++)
20000398:	687b      	ldr	r3, [r7, #4]
2000039a:	3301      	adds	r3, #1
2000039c:	607b      	str	r3, [r7, #4]
2000039e:	687b      	ldr	r3, [r7, #4]
200003a0:	2b7f      	cmp	r3, #127	; 0x7f
200003a2:	d9f2      	bls.n	2000038a <drawTest+0x62>
	}
	for (i = 0; i < 64; i++)
200003a4:	2300      	movs	r3, #0
200003a6:	607b      	str	r3, [r7, #4]
200003a8:	e009      	b.n	200003be <drawTest+0x96>
	{
		pixel(10, i, 0);
200003aa:	687b      	ldr	r3, [r7, #4]
200003ac:	b2db      	uxtb	r3, r3
200003ae:	2200      	movs	r2, #0
200003b0:	0019      	movs	r1, r3
200003b2:	200a      	movs	r0, #10
200003b4:	f000 faa5 	bl	20000902 <pixel>
	for (i = 0; i < 64; i++)
200003b8:	687b      	ldr	r3, [r7, #4]
200003ba:	3301      	adds	r3, #1
200003bc:	607b      	str	r3, [r7, #4]
200003be:	687b      	ldr	r3, [r7, #4]
200003c0:	2b3f      	cmp	r3, #63	; 0x3f
200003c2:	d9f2      	bls.n	200003aa <drawTest+0x82>
	}
}
200003c4:	46c0      	nop			; (mov r8, r8)
200003c6:	46bd      	mov	sp, r7
200003c8:	b002      	add	sp, #8
200003ca:	bd80      	pop	{r7, pc}

200003cc <clear_object>:

void clear_object (ObjectPtr obj)
{	
200003cc:	b580      	push	{r7, lr}
200003ce:	b086      	sub	sp, #24
200003d0:	af00      	add	r7, sp, #0
200003d2:	6078      	str	r0, [r7, #4]
	GeometryPtr objectGeometry = obj->geo;
200003d4:	687b      	ldr	r3, [r7, #4]
200003d6:	681b      	ldr	r3, [r3, #0]
200003d8:	613b      	str	r3, [r7, #16]
	uint8 dimensionSize = objectGeometry->numpoints;
200003da:	230f      	movs	r3, #15
200003dc:	18fb      	adds	r3, r7, r3
200003de:	693a      	ldr	r2, [r7, #16]
200003e0:	7812      	ldrb	r2, [r2, #0]
200003e2:	701a      	strb	r2, [r3, #0]
	
	for(int i = 0; i < dimensionSize; i++)
200003e4:	2300      	movs	r3, #0
200003e6:	617b      	str	r3, [r7, #20]
200003e8:	e025      	b.n	20000436 <clear_object+0x6a>
	{
		Point objectPixel = objectGeometry->px[i];
200003ea:	230c      	movs	r3, #12
200003ec:	18f8      	adds	r0, r7, r3
200003ee:	693a      	ldr	r2, [r7, #16]
200003f0:	697b      	ldr	r3, [r7, #20]
200003f2:	005b      	lsls	r3, r3, #1
200003f4:	2103      	movs	r1, #3
200003f6:	18d3      	adds	r3, r2, r3
200003f8:	185b      	adds	r3, r3, r1
200003fa:	0019      	movs	r1, r3
200003fc:	2302      	movs	r3, #2
200003fe:	001a      	movs	r2, r3
20000400:	f000 fb46 	bl	20000a90 <memcpy>
		pixel(obj->posx + objectPixel.x, obj->posy + objectPixel.y, 0);
20000404:	687b      	ldr	r3, [r7, #4]
20000406:	799b      	ldrb	r3, [r3, #6]
20000408:	b25b      	sxtb	r3, r3
2000040a:	b2da      	uxtb	r2, r3
2000040c:	230c      	movs	r3, #12
2000040e:	18fb      	adds	r3, r7, r3
20000410:	781b      	ldrb	r3, [r3, #0]
20000412:	18d3      	adds	r3, r2, r3
20000414:	b2d8      	uxtb	r0, r3
20000416:	687b      	ldr	r3, [r7, #4]
20000418:	79db      	ldrb	r3, [r3, #7]
2000041a:	b25b      	sxtb	r3, r3
2000041c:	b2da      	uxtb	r2, r3
2000041e:	230c      	movs	r3, #12
20000420:	18fb      	adds	r3, r7, r3
20000422:	785b      	ldrb	r3, [r3, #1]
20000424:	18d3      	adds	r3, r2, r3
20000426:	b2db      	uxtb	r3, r3
20000428:	2200      	movs	r2, #0
2000042a:	0019      	movs	r1, r3
2000042c:	f000 fa69 	bl	20000902 <pixel>
	for(int i = 0; i < dimensionSize; i++)
20000430:	697b      	ldr	r3, [r7, #20]
20000432:	3301      	adds	r3, #1
20000434:	617b      	str	r3, [r7, #20]
20000436:	230f      	movs	r3, #15
20000438:	18fb      	adds	r3, r7, r3
2000043a:	781a      	ldrb	r2, [r3, #0]
2000043c:	697b      	ldr	r3, [r7, #20]
2000043e:	429a      	cmp	r2, r3
20000440:	dcd3      	bgt.n	200003ea <clear_object+0x1e>
	}
}
20000442:	46c0      	nop			; (mov r8, r8)
20000444:	46bd      	mov	sp, r7
20000446:	b006      	add	sp, #24
20000448:	bd80      	pop	{r7, pc}

2000044a <draw_object>:

void draw_object (ObjectPtr obj)
{	
2000044a:	b580      	push	{r7, lr}
2000044c:	b086      	sub	sp, #24
2000044e:	af00      	add	r7, sp, #0
20000450:	6078      	str	r0, [r7, #4]
	GeometryPtr objectGeometry = obj->geo;
20000452:	687b      	ldr	r3, [r7, #4]
20000454:	681b      	ldr	r3, [r3, #0]
20000456:	613b      	str	r3, [r7, #16]
	uint8 dimensionSize = objectGeometry->numpoints;
20000458:	230f      	movs	r3, #15
2000045a:	18fb      	adds	r3, r7, r3
2000045c:	693a      	ldr	r2, [r7, #16]
2000045e:	7812      	ldrb	r2, [r2, #0]
20000460:	701a      	strb	r2, [r3, #0]
	
	for(int i = 0; i < dimensionSize; i++)
20000462:	2300      	movs	r3, #0
20000464:	617b      	str	r3, [r7, #20]
20000466:	e025      	b.n	200004b4 <draw_object+0x6a>
	{
		Point objectPixel = objectGeometry->px[i];
20000468:	230c      	movs	r3, #12
2000046a:	18f8      	adds	r0, r7, r3
2000046c:	693a      	ldr	r2, [r7, #16]
2000046e:	697b      	ldr	r3, [r7, #20]
20000470:	005b      	lsls	r3, r3, #1
20000472:	2103      	movs	r1, #3
20000474:	18d3      	adds	r3, r2, r3
20000476:	185b      	adds	r3, r3, r1
20000478:	0019      	movs	r1, r3
2000047a:	2302      	movs	r3, #2
2000047c:	001a      	movs	r2, r3
2000047e:	f000 fb07 	bl	20000a90 <memcpy>
		pixel(obj->posx + objectPixel.x, obj->posy + objectPixel.y, 1);
20000482:	687b      	ldr	r3, [r7, #4]
20000484:	799b      	ldrb	r3, [r3, #6]
20000486:	b25b      	sxtb	r3, r3
20000488:	b2da      	uxtb	r2, r3
2000048a:	230c      	movs	r3, #12
2000048c:	18fb      	adds	r3, r7, r3
2000048e:	781b      	ldrb	r3, [r3, #0]
20000490:	18d3      	adds	r3, r2, r3
20000492:	b2d8      	uxtb	r0, r3
20000494:	687b      	ldr	r3, [r7, #4]
20000496:	79db      	ldrb	r3, [r3, #7]
20000498:	b25b      	sxtb	r3, r3
2000049a:	b2da      	uxtb	r2, r3
2000049c:	230c      	movs	r3, #12
2000049e:	18fb      	adds	r3, r7, r3
200004a0:	785b      	ldrb	r3, [r3, #1]
200004a2:	18d3      	adds	r3, r2, r3
200004a4:	b2db      	uxtb	r3, r3
200004a6:	2201      	movs	r2, #1
200004a8:	0019      	movs	r1, r3
200004aa:	f000 fa2a 	bl	20000902 <pixel>
	for(int i = 0; i < dimensionSize; i++)
200004ae:	697b      	ldr	r3, [r7, #20]
200004b0:	3301      	adds	r3, #1
200004b2:	617b      	str	r3, [r7, #20]
200004b4:	230f      	movs	r3, #15
200004b6:	18fb      	adds	r3, r7, r3
200004b8:	781a      	ldrb	r2, [r3, #0]
200004ba:	697b      	ldr	r3, [r7, #20]
200004bc:	429a      	cmp	r2, r3
200004be:	dcd3      	bgt.n	20000468 <draw_object+0x1e>
	}
200004c0:	46c0      	nop			; (mov r8, r8)
200004c2:	46bd      	mov	sp, r7
200004c4:	b006      	add	sp, #24
200004c6:	bd80      	pop	{r7, pc}
200004c8:	08000209 	stmdaeq	r0, {r0, r3, r9}

200004cc <delay_250ns>:
#include "delay.h"

#define STK_CTRL ((volatile unsigned int *)(0xE000E010)) 

void delay_250ns( void )
{
200004cc:	b580      	push	{r7, lr}
200004ce:	b082      	sub	sp, #8
200004d0:	af00      	add	r7, sp, #0
	uint32 x = 0;
200004d2:	2300      	movs	r3, #0
200004d4:	607b      	str	r3, [r7, #4]
	SYS_TICK.CTRL = 0;
200004d6:	4b0e      	ldr	r3, [pc, #56]	; (20000510 <delay_250ns+0x44>)
200004d8:	2200      	movs	r2, #0
200004da:	701a      	strb	r2, [r3, #0]
	SYS_TICK.CTRL_COUNT = 0;
200004dc:	4b0c      	ldr	r3, [pc, #48]	; (20000510 <delay_250ns+0x44>)
200004de:	2200      	movs	r2, #0
200004e0:	709a      	strb	r2, [r3, #2]
	SYS_TICK.VAL = 0;
200004e2:	4b0b      	ldr	r3, [pc, #44]	; (20000510 <delay_250ns+0x44>)
200004e4:	2200      	movs	r2, #0
200004e6:	609a      	str	r2, [r3, #8]
	SYS_TICK.LOAD = 42;
200004e8:	4b09      	ldr	r3, [pc, #36]	; (20000510 <delay_250ns+0x44>)
200004ea:	222a      	movs	r2, #42	; 0x2a
200004ec:	605a      	str	r2, [r3, #4]
	SYS_TICK.CTRL = 0x05;
200004ee:	4b08      	ldr	r3, [pc, #32]	; (20000510 <delay_250ns+0x44>)
200004f0:	2205      	movs	r2, #5
200004f2:	701a      	strb	r2, [r3, #0]
	
	x = SYS_TICK.VAL;
200004f4:	4b06      	ldr	r3, [pc, #24]	; (20000510 <delay_250ns+0x44>)
200004f6:	689b      	ldr	r3, [r3, #8]
200004f8:	607b      	str	r3, [r7, #4]
	while (SYS_TICK.CTRL_COUNT & 0x1 == 0) 
200004fa:	46c0      	nop			; (mov r8, r8)
200004fc:	4b04      	ldr	r3, [pc, #16]	; (20000510 <delay_250ns+0x44>)
200004fe:	789b      	ldrb	r3, [r3, #2]
	{
		x = SYS_TICK.VAL;
	}
	SYS_TICK.CTRL = 0;
20000500:	4b03      	ldr	r3, [pc, #12]	; (20000510 <delay_250ns+0x44>)
20000502:	2200      	movs	r2, #0
20000504:	701a      	strb	r2, [r3, #0]
}
20000506:	46c0      	nop			; (mov r8, r8)
20000508:	46bd      	mov	sp, r7
2000050a:	b002      	add	sp, #8
2000050c:	bd80      	pop	{r7, pc}
2000050e:	46c0      	nop			; (mov r8, r8)
20000510:	e000e010 	and	lr, r0, r0, lsl r0

20000514 <delay_500ns>:

void delay_500ns( void ) 
{
20000514:	b580      	push	{r7, lr}
20000516:	af00      	add	r7, sp, #0
	delay_250ns();
20000518:	f7ff ffd8 	bl	200004cc <delay_250ns>
	delay_250ns();
2000051c:	f7ff ffd6 	bl	200004cc <delay_250ns>
}
20000520:	46c0      	nop			; (mov r8, r8)
20000522:	46bd      	mov	sp, r7
20000524:	bd80      	pop	{r7, pc}

20000526 <delay_micro>:

void delay_micro( uint32_c us )
{
20000526:	b580      	push	{r7, lr}
20000528:	b084      	sub	sp, #16
2000052a:	af00      	add	r7, sp, #0
2000052c:	6078      	str	r0, [r7, #4]
	for (uint32 loops = 0; loops < us; loops++ )
2000052e:	2300      	movs	r3, #0
20000530:	60fb      	str	r3, [r7, #12]
20000532:	e00a      	b.n	2000054a <delay_micro+0x24>
		{
		delay_250ns();
20000534:	f7ff ffca 	bl	200004cc <delay_250ns>
		delay_250ns();
20000538:	f7ff ffc8 	bl	200004cc <delay_250ns>
		delay_250ns();
2000053c:	f7ff ffc6 	bl	200004cc <delay_250ns>
		delay_250ns();
20000540:	f7ff ffc4 	bl	200004cc <delay_250ns>
	for (uint32 loops = 0; loops < us; loops++ )
20000544:	68fb      	ldr	r3, [r7, #12]
20000546:	3301      	adds	r3, #1
20000548:	60fb      	str	r3, [r7, #12]
2000054a:	68fa      	ldr	r2, [r7, #12]
2000054c:	687b      	ldr	r3, [r7, #4]
2000054e:	429a      	cmp	r2, r3
20000550:	d3f0      	bcc.n	20000534 <delay_micro+0xe>
	}
}
20000552:	46c0      	nop			; (mov r8, r8)
20000554:	46bd      	mov	sp, r7
20000556:	b004      	add	sp, #16
20000558:	bd80      	pop	{r7, pc}

2000055a <delay_milli>:

void delay_milli( uint32 ms )
{	
2000055a:	b580      	push	{r7, lr}
2000055c:	b082      	sub	sp, #8
2000055e:	af00      	add	r7, sp, #0
20000560:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
	ms = ms / 1000;
	ms++;
	#endif // SIMULATOR
	delay_micro(ms*1000);
20000562:	687b      	ldr	r3, [r7, #4]
20000564:	22fa      	movs	r2, #250	; 0xfa
20000566:	0092      	lsls	r2, r2, #2
20000568:	4353      	muls	r3, r2
2000056a:	0018      	movs	r0, r3
2000056c:	f7ff ffdb 	bl	20000526 <delay_micro>
20000570:	46c0      	nop			; (mov r8, r8)
20000572:	46bd      	mov	sp, r7
20000574:	b002      	add	sp, #8
20000576:	bd80      	pop	{r7, pc}

20000578 <graphic_ctrl_bit_set>:
#include "graphicdisplay.h"
#include "gpio.h"

void graphic_ctrl_bit_set(uint8_c x)
{
20000578:	b580      	push	{r7, lr}
2000057a:	b082      	sub	sp, #8
2000057c:	af00      	add	r7, sp, #0
2000057e:	0002      	movs	r2, r0
20000580:	1dfb      	adds	r3, r7, #7
20000582:	701a      	strb	r2, [r3, #0]
	GPIO_E.ODR_LOW |= x;
20000584:	490a      	ldr	r1, [pc, #40]	; (200005b0 <graphic_ctrl_bit_set+0x38>)
20000586:	4b0a      	ldr	r3, [pc, #40]	; (200005b0 <graphic_ctrl_bit_set+0x38>)
20000588:	7d1b      	ldrb	r3, [r3, #20]
2000058a:	b2da      	uxtb	r2, r3
2000058c:	1dfb      	adds	r3, r7, #7
2000058e:	781b      	ldrb	r3, [r3, #0]
20000590:	4313      	orrs	r3, r2
20000592:	b2db      	uxtb	r3, r3
20000594:	750b      	strb	r3, [r1, #20]
	GPIO_E.ODR_LOW &= ~B_SELECT;
20000596:	4a06      	ldr	r2, [pc, #24]	; (200005b0 <graphic_ctrl_bit_set+0x38>)
20000598:	4b05      	ldr	r3, [pc, #20]	; (200005b0 <graphic_ctrl_bit_set+0x38>)
2000059a:	7d1b      	ldrb	r3, [r3, #20]
2000059c:	b2db      	uxtb	r3, r3
2000059e:	2104      	movs	r1, #4
200005a0:	438b      	bics	r3, r1
200005a2:	b2db      	uxtb	r3, r3
200005a4:	7513      	strb	r3, [r2, #20]
}
200005a6:	46c0      	nop			; (mov r8, r8)
200005a8:	46bd      	mov	sp, r7
200005aa:	b002      	add	sp, #8
200005ac:	bd80      	pop	{r7, pc}
200005ae:	46c0      	nop			; (mov r8, r8)
200005b0:	40021000 	andmi	r1, r2, r0

200005b4 <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(uint8_c x)
{
200005b4:	b580      	push	{r7, lr}
200005b6:	b082      	sub	sp, #8
200005b8:	af00      	add	r7, sp, #0
200005ba:	0002      	movs	r2, r0
200005bc:	1dfb      	adds	r3, r7, #7
200005be:	701a      	strb	r2, [r3, #0]
	GPIO_E.ODR_LOW &= ~x;
200005c0:	490c      	ldr	r1, [pc, #48]	; (200005f4 <graphic_ctrl_bit_clear+0x40>)
200005c2:	4b0c      	ldr	r3, [pc, #48]	; (200005f4 <graphic_ctrl_bit_clear+0x40>)
200005c4:	7d1b      	ldrb	r3, [r3, #20]
200005c6:	b2db      	uxtb	r3, r3
200005c8:	b25b      	sxtb	r3, r3
200005ca:	1dfa      	adds	r2, r7, #7
200005cc:	7812      	ldrb	r2, [r2, #0]
200005ce:	b252      	sxtb	r2, r2
200005d0:	43d2      	mvns	r2, r2
200005d2:	b252      	sxtb	r2, r2
200005d4:	4013      	ands	r3, r2
200005d6:	b25b      	sxtb	r3, r3
200005d8:	b2db      	uxtb	r3, r3
200005da:	750b      	strb	r3, [r1, #20]
	GPIO_E.ODR_LOW &= ~B_SELECT;
200005dc:	4a05      	ldr	r2, [pc, #20]	; (200005f4 <graphic_ctrl_bit_clear+0x40>)
200005de:	4b05      	ldr	r3, [pc, #20]	; (200005f4 <graphic_ctrl_bit_clear+0x40>)
200005e0:	7d1b      	ldrb	r3, [r3, #20]
200005e2:	b2db      	uxtb	r3, r3
200005e4:	2104      	movs	r1, #4
200005e6:	438b      	bics	r3, r1
200005e8:	b2db      	uxtb	r3, r3
200005ea:	7513      	strb	r3, [r2, #20]
}
200005ec:	46c0      	nop			; (mov r8, r8)
200005ee:	46bd      	mov	sp, r7
200005f0:	b002      	add	sp, #8
200005f2:	bd80      	pop	{r7, pc}
200005f4:	40021000 	andmi	r1, r2, r0

200005f8 <select_controller>:

void select_controller(uint8_c controller)
{
200005f8:	b580      	push	{r7, lr}
200005fa:	b082      	sub	sp, #8
200005fc:	af00      	add	r7, sp, #0
200005fe:	0002      	movs	r2, r0
20000600:	1dfb      	adds	r3, r7, #7
20000602:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_CS1 | B_CS2);
20000604:	2018      	movs	r0, #24
20000606:	f7ff ffd5 	bl	200005b4 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(controller);
2000060a:	1dfb      	adds	r3, r7, #7
2000060c:	781b      	ldrb	r3, [r3, #0]
2000060e:	0018      	movs	r0, r3
20000610:	f7ff ffb2 	bl	20000578 <graphic_ctrl_bit_set>
}
20000614:	46c0      	nop			; (mov r8, r8)
20000616:	46bd      	mov	sp, r7
20000618:	b002      	add	sp, #8
2000061a:	bd80      	pop	{r7, pc}

2000061c <graphic_wait_ready>:

void graphic_wait_ready(void)
{
2000061c:	b580      	push	{r7, lr}
2000061e:	b082      	sub	sp, #8
20000620:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_clear(B_E);
20000622:	2040      	movs	r0, #64	; 0x40
20000624:	f7ff ffc6 	bl	200005b4 <graphic_ctrl_bit_clear>

	GPIO_E.MODER = 0x00005555;
20000628:	4b15      	ldr	r3, [pc, #84]	; (20000680 <graphic_wait_ready+0x64>)
2000062a:	4a16      	ldr	r2, [pc, #88]	; (20000684 <graphic_wait_ready+0x68>)
2000062c:	601a      	str	r2, [r3, #0]

	graphic_ctrl_bit_set(B_RW);
2000062e:	2002      	movs	r0, #2
20000630:	f7ff ffa2 	bl	20000578 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RS);
20000634:	2001      	movs	r0, #1
20000636:	f7ff ffbd 	bl	200005b4 <graphic_ctrl_bit_clear>

	delay_500ns();
2000063a:	f7ff ff6b 	bl	20000514 <delay_500ns>

	while (TRUE)
	{
		graphic_ctrl_bit_set(B_E);
2000063e:	2040      	movs	r0, #64	; 0x40
20000640:	f7ff ff9a 	bl	20000578 <graphic_ctrl_bit_set>
		delay_500ns();
20000644:	f7ff ff66 	bl	20000514 <delay_500ns>
		uint8 status = GPIO_E.IDR_HIGH & LCD_BUSY;
20000648:	4b0d      	ldr	r3, [pc, #52]	; (20000680 <graphic_wait_ready+0x64>)
2000064a:	7c5b      	ldrb	r3, [r3, #17]
2000064c:	b2da      	uxtb	r2, r3
2000064e:	1dfb      	adds	r3, r7, #7
20000650:	217f      	movs	r1, #127	; 0x7f
20000652:	438a      	bics	r2, r1
20000654:	701a      	strb	r2, [r3, #0]
		graphic_ctrl_bit_clear(B_E);
20000656:	2040      	movs	r0, #64	; 0x40
20000658:	f7ff ffac 	bl	200005b4 <graphic_ctrl_bit_clear>
		delay_500ns();
2000065c:	f7ff ff5a 	bl	20000514 <delay_500ns>
		if (status == 0)
20000660:	1dfb      	adds	r3, r7, #7
20000662:	781b      	ldrb	r3, [r3, #0]
20000664:	2b00      	cmp	r3, #0
20000666:	d000      	beq.n	2000066a <graphic_wait_ready+0x4e>
	{
20000668:	e7e9      	b.n	2000063e <graphic_wait_ready+0x22>
		{
			break;
2000066a:	46c0      	nop			; (mov r8, r8)
		}
	}
	
	graphic_ctrl_bit_set(B_E);
2000066c:	2040      	movs	r0, #64	; 0x40
2000066e:	f7ff ff83 	bl	20000578 <graphic_ctrl_bit_set>
	GPIO_E.MODER = 0x55555555;
20000672:	4b03      	ldr	r3, [pc, #12]	; (20000680 <graphic_wait_ready+0x64>)
20000674:	4a04      	ldr	r2, [pc, #16]	; (20000688 <graphic_wait_ready+0x6c>)
20000676:	601a      	str	r2, [r3, #0]
}
20000678:	46c0      	nop			; (mov r8, r8)
2000067a:	46bd      	mov	sp, r7
2000067c:	b002      	add	sp, #8
2000067e:	bd80      	pop	{r7, pc}
20000680:	40021000 	andmi	r1, r2, r0
20000684:	00005555 	andeq	r5, r0, r5, asr r5
20000688:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000068c <graphic_read>:

uint8_c graphic_read(uint8_c controller)
{
2000068c:	b580      	push	{r7, lr}
2000068e:	b084      	sub	sp, #16
20000690:	af00      	add	r7, sp, #0
20000692:	0002      	movs	r2, r0
20000694:	1dfb      	adds	r3, r7, #7
20000696:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000698:	2040      	movs	r0, #64	; 0x40
2000069a:	f7ff ff8b 	bl	200005b4 <graphic_ctrl_bit_clear>

	GPIO_E.MODER = 0x00005555;
2000069e:	4b1b      	ldr	r3, [pc, #108]	; (2000070c <graphic_read+0x80>)
200006a0:	4a1b      	ldr	r2, [pc, #108]	; (20000710 <graphic_read+0x84>)
200006a2:	601a      	str	r2, [r3, #0]

	graphic_ctrl_bit_set(B_RS | B_RW);
200006a4:	2003      	movs	r0, #3
200006a6:	f7ff ff67 	bl	20000578 <graphic_ctrl_bit_set>

	select_controller(controller);
200006aa:	1dfb      	adds	r3, r7, #7
200006ac:	781b      	ldrb	r3, [r3, #0]
200006ae:	0018      	movs	r0, r3
200006b0:	f7ff ffa2 	bl	200005f8 <select_controller>
	delay_500ns();
200006b4:	f7ff ff2e 	bl	20000514 <delay_500ns>

	graphic_ctrl_bit_set(B_E);
200006b8:	2040      	movs	r0, #64	; 0x40
200006ba:	f7ff ff5d 	bl	20000578 <graphic_ctrl_bit_set>
	delay_500ns();
200006be:	f7ff ff29 	bl	20000514 <delay_500ns>

	uint8_c rv = GPIO_E.IDR_HIGH;
200006c2:	4a12      	ldr	r2, [pc, #72]	; (2000070c <graphic_read+0x80>)
200006c4:	230f      	movs	r3, #15
200006c6:	18fb      	adds	r3, r7, r3
200006c8:	7c52      	ldrb	r2, [r2, #17]
200006ca:	701a      	strb	r2, [r3, #0]

	graphic_ctrl_bit_clear(B_E);
200006cc:	2040      	movs	r0, #64	; 0x40
200006ce:	f7ff ff71 	bl	200005b4 <graphic_ctrl_bit_clear>

	GPIO_E.MODER = 0x55555555;
200006d2:	4b0e      	ldr	r3, [pc, #56]	; (2000070c <graphic_read+0x80>)
200006d4:	4a0f      	ldr	r2, [pc, #60]	; (20000714 <graphic_read+0x88>)
200006d6:	601a      	str	r2, [r3, #0]

	// TODO: MAY NEED CHANGE
	if(controller == B_CS1)
200006d8:	1dfb      	adds	r3, r7, #7
200006da:	781b      	ldrb	r3, [r3, #0]
200006dc:	2b08      	cmp	r3, #8
200006de:	d104      	bne.n	200006ea <graphic_read+0x5e>
	{
		select_controller(B_CS1);
200006e0:	2008      	movs	r0, #8
200006e2:	f7ff ff89 	bl	200005f8 <select_controller>
		graphic_wait_ready();
200006e6:	f7ff ff99 	bl	2000061c <graphic_wait_ready>
	}
	if(controller == B_CS2)
200006ea:	1dfb      	adds	r3, r7, #7
200006ec:	781b      	ldrb	r3, [r3, #0]
200006ee:	2b10      	cmp	r3, #16
200006f0:	d104      	bne.n	200006fc <graphic_read+0x70>
	{
		select_controller(B_CS2);
200006f2:	2010      	movs	r0, #16
200006f4:	f7ff ff80 	bl	200005f8 <select_controller>
		graphic_wait_ready();
200006f8:	f7ff ff90 	bl	2000061c <graphic_wait_ready>
	}
	return rv;
200006fc:	230f      	movs	r3, #15
200006fe:	18fb      	adds	r3, r7, r3
20000700:	781b      	ldrb	r3, [r3, #0]
}
20000702:	0018      	movs	r0, r3
20000704:	46bd      	mov	sp, r7
20000706:	b004      	add	sp, #16
20000708:	bd80      	pop	{r7, pc}
2000070a:	46c0      	nop			; (mov r8, r8)
2000070c:	40021000 	andmi	r1, r2, r0
20000710:	00005555 	andeq	r5, r0, r5, asr r5
20000714:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000718 <graphic_read_data>:

uint8_c graphic_read_data(uint8_c controller)
{
20000718:	b580      	push	{r7, lr}
2000071a:	b082      	sub	sp, #8
2000071c:	af00      	add	r7, sp, #0
2000071e:	0002      	movs	r2, r0
20000720:	1dfb      	adds	r3, r7, #7
20000722:	701a      	strb	r2, [r3, #0]
	graphic_read(controller);
20000724:	1dfb      	adds	r3, r7, #7
20000726:	781b      	ldrb	r3, [r3, #0]
20000728:	0018      	movs	r0, r3
2000072a:	f7ff ffaf 	bl	2000068c <graphic_read>
	return graphic_read(controller);
2000072e:	1dfb      	adds	r3, r7, #7
20000730:	781b      	ldrb	r3, [r3, #0]
20000732:	0018      	movs	r0, r3
20000734:	f7ff ffaa 	bl	2000068c <graphic_read>
20000738:	0003      	movs	r3, r0
}
2000073a:	0018      	movs	r0, r3
2000073c:	46bd      	mov	sp, r7
2000073e:	b002      	add	sp, #8
20000740:	bd80      	pop	{r7, pc}

20000742 <graphic_write>:

void graphic_write(uint8_c value, uint8_c controller)
{
20000742:	b580      	push	{r7, lr}
20000744:	b082      	sub	sp, #8
20000746:	af00      	add	r7, sp, #0
20000748:	0002      	movs	r2, r0
2000074a:	1dfb      	adds	r3, r7, #7
2000074c:	701a      	strb	r2, [r3, #0]
2000074e:	1dbb      	adds	r3, r7, #6
20000750:	1c0a      	adds	r2, r1, #0
20000752:	701a      	strb	r2, [r3, #0]
	GPIO_E.ODR_HIGH = value;
20000754:	4a19      	ldr	r2, [pc, #100]	; (200007bc <graphic_write+0x7a>)
20000756:	1dfb      	adds	r3, r7, #7
20000758:	781b      	ldrb	r3, [r3, #0]
2000075a:	7553      	strb	r3, [r2, #21]

	select_controller(controller);
2000075c:	1dbb      	adds	r3, r7, #6
2000075e:	781b      	ldrb	r3, [r3, #0]
20000760:	0018      	movs	r0, r3
20000762:	f7ff ff49 	bl	200005f8 <select_controller>

	delay_500ns();
20000766:	f7ff fed5 	bl	20000514 <delay_500ns>

	graphic_ctrl_bit_set(B_E);
2000076a:	2040      	movs	r0, #64	; 0x40
2000076c:	f7ff ff04 	bl	20000578 <graphic_ctrl_bit_set>

	delay_500ns();
20000770:	f7ff fed0 	bl	20000514 <delay_500ns>

	graphic_ctrl_bit_clear(B_E);
20000774:	2040      	movs	r0, #64	; 0x40
20000776:	f7ff ff1d 	bl	200005b4 <graphic_ctrl_bit_clear>

	if(controller & B_CS1)
2000077a:	1dbb      	adds	r3, r7, #6
2000077c:	781b      	ldrb	r3, [r3, #0]
2000077e:	2208      	movs	r2, #8
20000780:	4013      	ands	r3, r2
20000782:	d004      	beq.n	2000078e <graphic_write+0x4c>
	{
		select_controller(B_CS1);
20000784:	2008      	movs	r0, #8
20000786:	f7ff ff37 	bl	200005f8 <select_controller>
		graphic_wait_ready();
2000078a:	f7ff ff47 	bl	2000061c <graphic_wait_ready>
	}
	if(controller & B_CS2)
2000078e:	1dbb      	adds	r3, r7, #6
20000790:	781b      	ldrb	r3, [r3, #0]
20000792:	2210      	movs	r2, #16
20000794:	4013      	ands	r3, r2
20000796:	d004      	beq.n	200007a2 <graphic_write+0x60>
	{
		select_controller(B_CS2);
20000798:	2010      	movs	r0, #16
2000079a:	f7ff ff2d 	bl	200005f8 <select_controller>
		graphic_wait_ready();
2000079e:	f7ff ff3d 	bl	2000061c <graphic_wait_ready>
	}
	
	GPIO_E.ODR_HIGH = 0;
200007a2:	4b06      	ldr	r3, [pc, #24]	; (200007bc <graphic_write+0x7a>)
200007a4:	2200      	movs	r2, #0
200007a6:	755a      	strb	r2, [r3, #21]
	graphic_ctrl_bit_set(B_E);
200007a8:	2040      	movs	r0, #64	; 0x40
200007aa:	f7ff fee5 	bl	20000578 <graphic_ctrl_bit_set>

	select_controller(0);
200007ae:	2000      	movs	r0, #0
200007b0:	f7ff ff22 	bl	200005f8 <select_controller>
}
200007b4:	46c0      	nop			; (mov r8, r8)
200007b6:	46bd      	mov	sp, r7
200007b8:	b002      	add	sp, #8
200007ba:	bd80      	pop	{r7, pc}
200007bc:	40021000 	andmi	r1, r2, r0

200007c0 <graphic_write_command>:

void graphic_write_command(uint8_c command, uint8_c controller)
{
200007c0:	b580      	push	{r7, lr}
200007c2:	b082      	sub	sp, #8
200007c4:	af00      	add	r7, sp, #0
200007c6:	0002      	movs	r2, r0
200007c8:	1dfb      	adds	r3, r7, #7
200007ca:	701a      	strb	r2, [r3, #0]
200007cc:	1dbb      	adds	r3, r7, #6
200007ce:	1c0a      	adds	r2, r1, #0
200007d0:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200007d2:	2040      	movs	r0, #64	; 0x40
200007d4:	f7ff feee 	bl	200005b4 <graphic_ctrl_bit_clear>

	select_controller(controller);
200007d8:	1dbb      	adds	r3, r7, #6
200007da:	781b      	ldrb	r3, [r3, #0]
200007dc:	0018      	movs	r0, r3
200007de:	f7ff ff0b 	bl	200005f8 <select_controller>

	graphic_ctrl_bit_clear(B_RS | B_RW);
200007e2:	2003      	movs	r0, #3
200007e4:	f7ff fee6 	bl	200005b4 <graphic_ctrl_bit_clear>

	graphic_write(command, controller);
200007e8:	1dbb      	adds	r3, r7, #6
200007ea:	781a      	ldrb	r2, [r3, #0]
200007ec:	1dfb      	adds	r3, r7, #7
200007ee:	781b      	ldrb	r3, [r3, #0]
200007f0:	0011      	movs	r1, r2
200007f2:	0018      	movs	r0, r3
200007f4:	f7ff ffa5 	bl	20000742 <graphic_write>
}
200007f8:	46c0      	nop			; (mov r8, r8)
200007fa:	46bd      	mov	sp, r7
200007fc:	b002      	add	sp, #8
200007fe:	bd80      	pop	{r7, pc}

20000800 <graphic_write_data>:

void graphic_write_data(uint8_c data, uint8_c controller)
{
20000800:	b580      	push	{r7, lr}
20000802:	b082      	sub	sp, #8
20000804:	af00      	add	r7, sp, #0
20000806:	0002      	movs	r2, r0
20000808:	1dfb      	adds	r3, r7, #7
2000080a:	701a      	strb	r2, [r3, #0]
2000080c:	1dbb      	adds	r3, r7, #6
2000080e:	1c0a      	adds	r2, r1, #0
20000810:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000812:	2040      	movs	r0, #64	; 0x40
20000814:	f7ff fece 	bl	200005b4 <graphic_ctrl_bit_clear>

	select_controller(controller);
20000818:	1dbb      	adds	r3, r7, #6
2000081a:	781b      	ldrb	r3, [r3, #0]
2000081c:	0018      	movs	r0, r3
2000081e:	f7ff feeb 	bl	200005f8 <select_controller>

	graphic_ctrl_bit_set(B_RS);
20000822:	2001      	movs	r0, #1
20000824:	f7ff fea8 	bl	20000578 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
20000828:	2002      	movs	r0, #2
2000082a:	f7ff fec3 	bl	200005b4 <graphic_ctrl_bit_clear>

	graphic_write(data, controller);
2000082e:	1dbb      	adds	r3, r7, #6
20000830:	781a      	ldrb	r2, [r3, #0]
20000832:	1dfb      	adds	r3, r7, #7
20000834:	781b      	ldrb	r3, [r3, #0]
20000836:	0011      	movs	r1, r2
20000838:	0018      	movs	r0, r3
2000083a:	f7ff ff82 	bl	20000742 <graphic_write>
}
2000083e:	46c0      	nop			; (mov r8, r8)
20000840:	46bd      	mov	sp, r7
20000842:	b002      	add	sp, #8
20000844:	bd80      	pop	{r7, pc}

20000846 <graphic_initialize>:

void graphic_initialize(void)
{
20000846:	b580      	push	{r7, lr}
20000848:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
2000084a:	2040      	movs	r0, #64	; 0x40
2000084c:	f7ff fe94 	bl	20000578 <graphic_ctrl_bit_set>
	delay_micro(10);
20000850:	200a      	movs	r0, #10
20000852:	f7ff fe68 	bl	20000526 <delay_micro>

	graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
20000856:	2078      	movs	r0, #120	; 0x78
20000858:	f7ff feac 	bl	200005b4 <graphic_ctrl_bit_clear>
	delay_milli(30);
2000085c:	201e      	movs	r0, #30
2000085e:	f7ff fe7c 	bl	2000055a <delay_milli>

	graphic_ctrl_bit_set(B_RST);
20000862:	2020      	movs	r0, #32
20000864:	f7ff fe88 	bl	20000578 <graphic_ctrl_bit_set>

	graphic_write_command(LCD_OFF, B_CS1 | B_CS2);
20000868:	2118      	movs	r1, #24
2000086a:	203e      	movs	r0, #62	; 0x3e
2000086c:	f7ff ffa8 	bl	200007c0 <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1 | B_CS2);		  // Toggle display
20000870:	2118      	movs	r1, #24
20000872:	203f      	movs	r0, #63	; 0x3f
20000874:	f7ff ffa4 	bl	200007c0 <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1 | B_CS2); // start = 0
20000878:	2118      	movs	r1, #24
2000087a:	20c0      	movs	r0, #192	; 0xc0
2000087c:	f7ff ffa0 	bl	200007c0 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);	// add = 0
20000880:	2118      	movs	r1, #24
20000882:	2040      	movs	r0, #64	; 0x40
20000884:	f7ff ff9c 	bl	200007c0 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1 | B_CS2);   // page = 0
20000888:	2118      	movs	r1, #24
2000088a:	20b8      	movs	r0, #184	; 0xb8
2000088c:	f7ff ff98 	bl	200007c0 <graphic_write_command>
	select_controller(0);								  // deactivate both CS signals
20000890:	2000      	movs	r0, #0
20000892:	f7ff feb1 	bl	200005f8 <select_controller>
}
20000896:	46c0      	nop			; (mov r8, r8)
20000898:	46bd      	mov	sp, r7
2000089a:	bd80      	pop	{r7, pc}

2000089c <graphic_clear_screen>:

void graphic_clear_screen()
{
2000089c:	b580      	push	{r7, lr}
2000089e:	b082      	sub	sp, #8
200008a0:	af00      	add	r7, sp, #0

	for (uint8 i = 0; i < 8; i++)
200008a2:	1dfb      	adds	r3, r7, #7
200008a4:	2200      	movs	r2, #0
200008a6:	701a      	strb	r2, [r3, #0]
200008a8:	e023      	b.n	200008f2 <graphic_clear_screen+0x56>
	{
		graphic_write_command(LCD_SET_PAGE | i, B_CS1 | B_CS2);
200008aa:	1dfb      	adds	r3, r7, #7
200008ac:	781b      	ldrb	r3, [r3, #0]
200008ae:	2248      	movs	r2, #72	; 0x48
200008b0:	4252      	negs	r2, r2
200008b2:	4313      	orrs	r3, r2
200008b4:	b2db      	uxtb	r3, r3
200008b6:	2118      	movs	r1, #24
200008b8:	0018      	movs	r0, r3
200008ba:	f7ff ff81 	bl	200007c0 <graphic_write_command>
		graphic_write_command(LCD_SET_ADD | 0, B_CS1 | B_CS2);
200008be:	2118      	movs	r1, #24
200008c0:	2040      	movs	r0, #64	; 0x40
200008c2:	f7ff ff7d 	bl	200007c0 <graphic_write_command>
		for (uint8 j = 0; j < 64; j++)
200008c6:	1dbb      	adds	r3, r7, #6
200008c8:	2200      	movs	r2, #0
200008ca:	701a      	strb	r2, [r3, #0]
200008cc:	e008      	b.n	200008e0 <graphic_clear_screen+0x44>
		{
			graphic_write_data(0, B_CS1 | B_CS2);
200008ce:	2118      	movs	r1, #24
200008d0:	2000      	movs	r0, #0
200008d2:	f7ff ff95 	bl	20000800 <graphic_write_data>
		for (uint8 j = 0; j < 64; j++)
200008d6:	1dbb      	adds	r3, r7, #6
200008d8:	781a      	ldrb	r2, [r3, #0]
200008da:	1dbb      	adds	r3, r7, #6
200008dc:	3201      	adds	r2, #1
200008de:	701a      	strb	r2, [r3, #0]
200008e0:	1dbb      	adds	r3, r7, #6
200008e2:	781b      	ldrb	r3, [r3, #0]
200008e4:	2b3f      	cmp	r3, #63	; 0x3f
200008e6:	d9f2      	bls.n	200008ce <graphic_clear_screen+0x32>
	for (uint8 i = 0; i < 8; i++)
200008e8:	1dfb      	adds	r3, r7, #7
200008ea:	781a      	ldrb	r2, [r3, #0]
200008ec:	1dfb      	adds	r3, r7, #7
200008ee:	3201      	adds	r2, #1
200008f0:	701a      	strb	r2, [r3, #0]
200008f2:	1dfb      	adds	r3, r7, #7
200008f4:	781b      	ldrb	r3, [r3, #0]
200008f6:	2b07      	cmp	r3, #7
200008f8:	d9d7      	bls.n	200008aa <graphic_clear_screen+0xe>
		}
	}
}
200008fa:	46c0      	nop			; (mov r8, r8)
200008fc:	46bd      	mov	sp, r7
200008fe:	b002      	add	sp, #8
20000900:	bd80      	pop	{r7, pc}

20000902 <pixel>:

void pixel(uint8_c x, uint8_c y, uint8_c set)
{
20000902:	b590      	push	{r4, r7, lr}
20000904:	b085      	sub	sp, #20
20000906:	af00      	add	r7, sp, #0
20000908:	0004      	movs	r4, r0
2000090a:	0008      	movs	r0, r1
2000090c:	0011      	movs	r1, r2
2000090e:	1dfb      	adds	r3, r7, #7
20000910:	1c22      	adds	r2, r4, #0
20000912:	701a      	strb	r2, [r3, #0]
20000914:	1dbb      	adds	r3, r7, #6
20000916:	1c02      	adds	r2, r0, #0
20000918:	701a      	strb	r2, [r3, #0]
2000091a:	1d7b      	adds	r3, r7, #5
2000091c:	1c0a      	adds	r2, r1, #0
2000091e:	701a      	strb	r2, [r3, #0]
	if (x > 128 || x < 1)
20000920:	1dfb      	adds	r3, r7, #7
20000922:	781b      	ldrb	r3, [r3, #0]
20000924:	2b80      	cmp	r3, #128	; 0x80
20000926:	d900      	bls.n	2000092a <pixel+0x28>
20000928:	e0a9      	b.n	20000a7e <pixel+0x17c>
2000092a:	1dfb      	adds	r3, r7, #7
2000092c:	781b      	ldrb	r3, [r3, #0]
2000092e:	2b00      	cmp	r3, #0
20000930:	d100      	bne.n	20000934 <pixel+0x32>
20000932:	e0a4      	b.n	20000a7e <pixel+0x17c>
		return;

	if (y > 64 || y < 1)
20000934:	1dbb      	adds	r3, r7, #6
20000936:	781b      	ldrb	r3, [r3, #0]
20000938:	2b40      	cmp	r3, #64	; 0x40
2000093a:	d900      	bls.n	2000093e <pixel+0x3c>
2000093c:	e0a1      	b.n	20000a82 <pixel+0x180>
2000093e:	1dbb      	adds	r3, r7, #6
20000940:	781b      	ldrb	r3, [r3, #0]
20000942:	2b00      	cmp	r3, #0
20000944:	d100      	bne.n	20000948 <pixel+0x46>
20000946:	e09c      	b.n	20000a82 <pixel+0x180>
		return;

	uint8_c row = (y - 1) / 8;
20000948:	1dbb      	adds	r3, r7, #6
2000094a:	781b      	ldrb	r3, [r3, #0]
2000094c:	3b01      	subs	r3, #1
2000094e:	2b00      	cmp	r3, #0
20000950:	da00      	bge.n	20000954 <pixel+0x52>
20000952:	3307      	adds	r3, #7
20000954:	10db      	asrs	r3, r3, #3
20000956:	001a      	movs	r2, r3
20000958:	230c      	movs	r3, #12
2000095a:	18fb      	adds	r3, r7, r3
2000095c:	701a      	strb	r2, [r3, #0]
	uint8 mask = 1 << ((y - 1) % 8);
2000095e:	1dbb      	adds	r3, r7, #6
20000960:	781b      	ldrb	r3, [r3, #0]
20000962:	3b01      	subs	r3, #1
20000964:	4a49      	ldr	r2, [pc, #292]	; (20000a8c <pixel+0x18a>)
20000966:	4013      	ands	r3, r2
20000968:	d504      	bpl.n	20000974 <pixel+0x72>
2000096a:	3b01      	subs	r3, #1
2000096c:	2208      	movs	r2, #8
2000096e:	4252      	negs	r2, r2
20000970:	4313      	orrs	r3, r2
20000972:	3301      	adds	r3, #1
20000974:	001a      	movs	r2, r3
20000976:	2301      	movs	r3, #1
20000978:	4093      	lsls	r3, r2
2000097a:	001a      	movs	r2, r3
2000097c:	230f      	movs	r3, #15
2000097e:	18fb      	adds	r3, r7, r3
20000980:	701a      	strb	r2, [r3, #0]

	if (set == 0)
20000982:	1d7b      	adds	r3, r7, #5
20000984:	781b      	ldrb	r3, [r3, #0]
20000986:	2b00      	cmp	r3, #0
20000988:	d106      	bne.n	20000998 <pixel+0x96>
	{
		mask = ~mask;
2000098a:	230f      	movs	r3, #15
2000098c:	18fb      	adds	r3, r7, r3
2000098e:	220f      	movs	r2, #15
20000990:	18ba      	adds	r2, r7, r2
20000992:	7812      	ldrb	r2, [r2, #0]
20000994:	43d2      	mvns	r2, r2
20000996:	701a      	strb	r2, [r3, #0]
	}

	uint8 controller;
	uint8 column;
	if (x > 64)
20000998:	1dfb      	adds	r3, r7, #7
2000099a:	781b      	ldrb	r3, [r3, #0]
2000099c:	2b40      	cmp	r3, #64	; 0x40
2000099e:	d90a      	bls.n	200009b6 <pixel+0xb4>
	{
		controller = B_CS2;
200009a0:	230e      	movs	r3, #14
200009a2:	18fb      	adds	r3, r7, r3
200009a4:	2210      	movs	r2, #16
200009a6:	701a      	strb	r2, [r3, #0]
		column = x - 65;
200009a8:	230d      	movs	r3, #13
200009aa:	18fb      	adds	r3, r7, r3
200009ac:	1dfa      	adds	r2, r7, #7
200009ae:	7812      	ldrb	r2, [r2, #0]
200009b0:	3a41      	subs	r2, #65	; 0x41
200009b2:	701a      	strb	r2, [r3, #0]
200009b4:	e009      	b.n	200009ca <pixel+0xc8>
	}
	else
	{
		controller = B_CS1;
200009b6:	230e      	movs	r3, #14
200009b8:	18fb      	adds	r3, r7, r3
200009ba:	2208      	movs	r2, #8
200009bc:	701a      	strb	r2, [r3, #0]
		column = x - 1;
200009be:	230d      	movs	r3, #13
200009c0:	18fb      	adds	r3, r7, r3
200009c2:	1dfa      	adds	r2, r7, #7
200009c4:	7812      	ldrb	r2, [r2, #0]
200009c6:	3a01      	subs	r2, #1
200009c8:	701a      	strb	r2, [r3, #0]
	}

	graphic_write_command(LCD_SET_ADD | column, controller);
200009ca:	230d      	movs	r3, #13
200009cc:	18fb      	adds	r3, r7, r3
200009ce:	781b      	ldrb	r3, [r3, #0]
200009d0:	2240      	movs	r2, #64	; 0x40
200009d2:	4313      	orrs	r3, r2
200009d4:	b2da      	uxtb	r2, r3
200009d6:	230e      	movs	r3, #14
200009d8:	18fb      	adds	r3, r7, r3
200009da:	781b      	ldrb	r3, [r3, #0]
200009dc:	0019      	movs	r1, r3
200009de:	0010      	movs	r0, r2
200009e0:	f7ff feee 	bl	200007c0 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | row, controller);
200009e4:	230c      	movs	r3, #12
200009e6:	18fb      	adds	r3, r7, r3
200009e8:	781b      	ldrb	r3, [r3, #0]
200009ea:	2248      	movs	r2, #72	; 0x48
200009ec:	4252      	negs	r2, r2
200009ee:	4313      	orrs	r3, r2
200009f0:	b2da      	uxtb	r2, r3
200009f2:	230e      	movs	r3, #14
200009f4:	18fb      	adds	r3, r7, r3
200009f6:	781b      	ldrb	r3, [r3, #0]
200009f8:	0019      	movs	r1, r3
200009fa:	0010      	movs	r0, r2
200009fc:	f7ff fee0 	bl	200007c0 <graphic_write_command>

	uint8_c temp = graphic_read_data(controller);
20000a00:	230b      	movs	r3, #11
20000a02:	18fc      	adds	r4, r7, r3
20000a04:	230e      	movs	r3, #14
20000a06:	18fb      	adds	r3, r7, r3
20000a08:	781b      	ldrb	r3, [r3, #0]
20000a0a:	0018      	movs	r0, r3
20000a0c:	f7ff fe84 	bl	20000718 <graphic_read_data>
20000a10:	0003      	movs	r3, r0
20000a12:	7023      	strb	r3, [r4, #0]

	graphic_write_command(LCD_SET_ADD | column, controller);
20000a14:	230d      	movs	r3, #13
20000a16:	18fb      	adds	r3, r7, r3
20000a18:	781b      	ldrb	r3, [r3, #0]
20000a1a:	2240      	movs	r2, #64	; 0x40
20000a1c:	4313      	orrs	r3, r2
20000a1e:	b2da      	uxtb	r2, r3
20000a20:	230e      	movs	r3, #14
20000a22:	18fb      	adds	r3, r7, r3
20000a24:	781b      	ldrb	r3, [r3, #0]
20000a26:	0019      	movs	r1, r3
20000a28:	0010      	movs	r0, r2
20000a2a:	f7ff fec9 	bl	200007c0 <graphic_write_command>

	if (set)
20000a2e:	1d7b      	adds	r3, r7, #5
20000a30:	781b      	ldrb	r3, [r3, #0]
20000a32:	2b00      	cmp	r3, #0
20000a34:	d00a      	beq.n	20000a4c <pixel+0x14a>
		mask = mask | temp;
20000a36:	230f      	movs	r3, #15
20000a38:	18fb      	adds	r3, r7, r3
20000a3a:	220f      	movs	r2, #15
20000a3c:	18b9      	adds	r1, r7, r2
20000a3e:	220b      	movs	r2, #11
20000a40:	18ba      	adds	r2, r7, r2
20000a42:	7809      	ldrb	r1, [r1, #0]
20000a44:	7812      	ldrb	r2, [r2, #0]
20000a46:	430a      	orrs	r2, r1
20000a48:	701a      	strb	r2, [r3, #0]
20000a4a:	e009      	b.n	20000a60 <pixel+0x15e>
	else
		mask = mask & temp;
20000a4c:	230f      	movs	r3, #15
20000a4e:	18fb      	adds	r3, r7, r3
20000a50:	220f      	movs	r2, #15
20000a52:	18ba      	adds	r2, r7, r2
20000a54:	210b      	movs	r1, #11
20000a56:	1879      	adds	r1, r7, r1
20000a58:	7812      	ldrb	r2, [r2, #0]
20000a5a:	7809      	ldrb	r1, [r1, #0]
20000a5c:	400a      	ands	r2, r1
20000a5e:	701a      	strb	r2, [r3, #0]
	graphic_write_data(mask, controller);
20000a60:	230e      	movs	r3, #14
20000a62:	18fb      	adds	r3, r7, r3
20000a64:	781a      	ldrb	r2, [r3, #0]
20000a66:	230f      	movs	r3, #15
20000a68:	18fb      	adds	r3, r7, r3
20000a6a:	781b      	ldrb	r3, [r3, #0]
20000a6c:	0011      	movs	r1, r2
20000a6e:	0018      	movs	r0, r3
20000a70:	f7ff fec6 	bl	20000800 <graphic_write_data>
	graphic_write_command(LCD_ON, B_CS1 | B_CS2);	
20000a74:	2118      	movs	r1, #24
20000a76:	203f      	movs	r0, #63	; 0x3f
20000a78:	f7ff fea2 	bl	200007c0 <graphic_write_command>
20000a7c:	e002      	b.n	20000a84 <pixel+0x182>
		return;
20000a7e:	46c0      	nop			; (mov r8, r8)
20000a80:	e000      	b.n	20000a84 <pixel+0x182>
		return;
20000a82:	46c0      	nop			; (mov r8, r8)
}
20000a84:	46bd      	mov	sp, r7
20000a86:	b005      	add	sp, #20
20000a88:	bd90      	pop	{r4, r7, pc}
20000a8a:	46c0      	nop			; (mov r8, r8)
20000a8c:	80000007 	andhi	r0, r0, r7

20000a90 <memcpy>:
20000a90:	2300      	movs	r3, #0
20000a92:	b510      	push	{r4, lr}
20000a94:	429a      	cmp	r2, r3
20000a96:	d100      	bne.n	20000a9a <memcpy+0xa>
20000a98:	bd10      	pop	{r4, pc}
20000a9a:	5ccc      	ldrb	r4, [r1, r3]
20000a9c:	54c4      	strb	r4, [r0, r3]
20000a9e:	3301      	adds	r3, #1
20000aa0:	e7f8      	b.n	20000a94 <memcpy+0x4>
	...

20000aa4 <ball>:
20000aa4:	20000abc 			; <UNDEFINED> instruction: 0x20000abc
20000aa8:	20400101 	subcs	r0, r0, r1, lsl #2
20000aac:	2000044b 	andcs	r0, r0, fp, asr #8
20000ab0:	200003cd 	andcs	r0, r0, sp, asr #7
20000ab4:	20000041 	andcs	r0, r0, r1, asr #32
20000ab8:	20000011 	andcs	r0, r0, r1, lsl r0

20000abc <ballGeometry>:
20000abc:	0004040c 	andeq	r0, r4, ip, lsl #8
20000ac0:	01020001 	tsteq	r2, r1
20000ac4:	01010100 	mrseq	r0, (UNDEF: 17)
20000ac8:	02030102 	andeq	r0, r3, #-2147483648	; 0x80000000
20000acc:	02010200 	andeq	r0, r1, #0, 4
20000ad0:	03030202 	movweq	r0, #12802	; 0x3202
20000ad4:	00020301 	andeq	r0, r2, r1, lsl #6
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000671 	andeq	r0, r0, r1, ror r6
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000037 	andeq	r0, r0, r7, lsr r0
  10:	0001480c 	andeq	r4, r1, ip, lsl #16
	...
  20:	03100200 	tsteq	r0, #0, 4
  24:	07030000 	streq	r0, [r3, -r0]
  28:	0000002c 	andeq	r0, r0, ip, lsr #32
  2c:	ce070403 	cdpgt	4, 0, cr0, cr7, cr3, {0}
  30:	02000002 	andeq	r0, r0, #2
  34:	00000141 	andeq	r0, r0, r1, asr #2
  38:	003e0803 	eorseq	r0, lr, r3, lsl #16
  3c:	02030000 	andeq	r0, r3, #0
  40:	0002c807 	andeq	ip, r2, r7, lsl #16
  44:	003e0400 	eorseq	r0, lr, r0, lsl #8
  48:	b0020000 	andlt	r0, r2, r0
  4c:	03000001 	movweq	r0, #1
  50:	00005509 	andeq	r5, r0, r9, lsl #10
  54:	08010300 	stmdaeq	r1, {r8, r9}
  58:	00000265 	andeq	r0, r0, r5, ror #4
  5c:	00005504 	andeq	r5, r0, r4, lsl #10
  60:	05040500 	streq	r0, [r4, #-1280]	; 0xfffffb00
  64:	00746e69 	rsbseq	r6, r4, r9, ror #28
  68:	19050203 	stmdbne	r5, {r0, r1, r9}
  6c:	02000001 	andeq	r0, r0, #1
  70:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
  74:	007a0d03 	rsbseq	r0, sl, r3, lsl #26
  78:	01030000 	mrseq	r0, (UNDEF: 3)
  7c:	00026706 	andeq	r6, r2, r6, lsl #14
  80:	02730200 	rsbseq	r0, r3, #0, 4
  84:	10030000 	andne	r0, r3, r0
  88:	00000045 	andeq	r0, r0, r5, asr #32
  8c:	0000fb02 	andeq	pc, r0, r2, lsl #22
  90:	5c110300 	ldcpl	3, cr0, [r1], {-0}
  94:	06000000 	streq	r0, [r0], -r0
  98:	b80f0402 	stmdalt	pc, {r1, sl}	; <UNPREDICTABLE>
  9c:	07000000 	streq	r0, [r0, -r0]
  a0:	00000103 	andeq	r0, r0, r3, lsl #2
  a4:	004a1004 	subeq	r1, sl, r4
  a8:	07000000 	streq	r0, [r0, -r0]
  ac:	00000342 	andeq	r0, r0, r2, asr #6
  b0:	004a1104 	subeq	r1, sl, r4, lsl #2
  b4:	00010000 	andeq	r0, r1, r0
  b8:	0e040208 	cdpeq	2, 0, cr0, cr4, cr8, {0}
  bc:	000000d1 	ldrdeq	r0, [r0], -r1
  c0:	52444909 	subpl	r4, r4, #147456	; 0x24000
  c4:	330e0400 	movwcc	r0, #58368	; 0xe400
  c8:	0a000000 	beq	d0 <startup-0x1fffff30>
  cc:	00000097 	muleq	r0, r7, r0
  d0:	04020600 	streq	r0, [r2], #-1536	; 0xfffffa00
  d4:	0000f217 	andeq	pc, r0, r7, lsl r2	; <UNPREDICTABLE>
  d8:	02240700 	eoreq	r0, r4, #0, 14
  dc:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
  e0:	0000004a 	andeq	r0, r0, sl, asr #32
  e4:	022c0700 	eoreq	r0, ip, #0, 14
  e8:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
  ec:	0000004a 	andeq	r0, r0, sl, asr #32
  f0:	02080001 	andeq	r0, r8, #1
  f4:	010b1604 	tsteq	fp, r4, lsl #12
  f8:	4f090000 	svcmi	0x00090000
  fc:	04005244 	streq	r5, [r0], #-580	; 0xfffffdbc
 100:	00003316 	andeq	r3, r0, r6, lsl r3
 104:	00d10a00 	sbcseq	r0, r1, r0, lsl #20
 108:	06000000 	streq	r0, [r0], -r0
 10c:	bc080428 	cfstrslt	mvf0, [r8], {40}	; 0x28
 110:	07000001 	streq	r0, [r0, -r1]
 114:	00000206 	andeq	r0, r0, r6, lsl #4
 118:	00210904 	eoreq	r0, r1, r4, lsl #18
 11c:	07000000 	streq	r0, [r0, -r0]
 120:	000001c2 	andeq	r0, r0, r2, asr #3
 124:	00330a04 	eorseq	r0, r3, r4, lsl #20
 128:	07040000 	streq	r0, [r4, -r0]
 12c:	00000211 	andeq	r0, r0, r1, lsl r2
 130:	00810b04 	addeq	r0, r1, r4, lsl #22
 134:	07060000 	streq	r0, [r6, -r0]
 138:	00000005 	andeq	r0, r0, r5
 13c:	00210c04 	eoreq	r0, r1, r4, lsl #24
 140:	07080000 	streq	r0, [r8, -r0]
 144:	000001dc 	ldrdeq	r0, [r0], -ip
 148:	00210d04 	eoreq	r0, r1, r4, lsl #26
 14c:	0b0c0000 	bleq	300154 <startup-0x1fcffeac>
 150:	000000b8 	strheq	r0, [r0], -r8
 154:	03210710 			; <UNDEFINED> instruction: 0x03210710
 158:	14040000 	strne	r0, [r4], #-0
 15c:	00000081 	andeq	r0, r0, r1, lsl #1
 160:	00f20b12 	rscseq	r0, r2, r2, lsl fp
 164:	07140000 	ldreq	r0, [r4, -r0]
 168:	000001fe 	strdeq	r0, [r0], -lr
 16c:	00811c04 	addeq	r1, r1, r4, lsl #24
 170:	07160000 	ldreq	r0, [r6, -r0]
 174:	000001f9 	strdeq	r0, [r0], -r9
 178:	00211d04 	eoreq	r1, r1, r4, lsl #26
 17c:	07180000 	ldreq	r0, [r8, -r0]
 180:	000001f3 	strdeq	r0, [r0], -r3
 184:	00331e04 	eorseq	r1, r3, r4, lsl #28
 188:	071c0000 	ldreq	r0, [ip, -r0]
 18c:	000000e3 	andeq	r0, r0, r3, ror #1
 190:	004a1f04 	subeq	r1, sl, r4, lsl #30
 194:	071e0000 	ldreq	r0, [lr, -r0]
 198:	000001ef 	andeq	r0, r0, pc, ror #3
 19c:	008c2004 	addeq	r2, ip, r4
 1a0:	071f0000 	ldreq	r0, [pc, -r0]
 1a4:	00000288 	andeq	r0, r0, r8, lsl #5
 1a8:	00212104 	eoreq	r2, r1, r4, lsl #2
 1ac:	07200000 	streq	r0, [r0, -r0]!
 1b0:	0000028d 	andeq	r0, r0, sp, lsl #5
 1b4:	00212204 	eoreq	r2, r1, r4, lsl #4
 1b8:	00240000 	eoreq	r0, r4, r0
 1bc:	0001ce02 	andeq	ip, r1, r2, lsl #28
 1c0:	0b230400 	bleq	8c11c8 <startup-0x1f73ee38>
 1c4:	0c000001 	stceq	0, cr0, [r0], {1}
 1c8:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
 1cc:	00034b02 	andeq	r4, r3, r2, lsl #22
 1d0:	d7250400 	strle	r0, [r5, -r0, lsl #8]!
 1d4:	0d000001 	stceq	0, cr0, [r0, #-4]
 1d8:	0001c704 	andeq	ip, r1, r4, lsl #14
 1dc:	02920e00 	addseq	r0, r2, #0, 28
 1e0:	05020000 	streq	r0, [r2, #-0]
 1e4:	0001fe08 	andeq	pc, r1, r8, lsl #28
 1e8:	00780f00 	rsbseq	r0, r8, r0, lsl #30
 1ec:	004a0a05 	subeq	r0, sl, r5, lsl #20
 1f0:	0f000000 	svceq	0x00000000
 1f4:	0b050079 	bleq	1403e0 <startup-0x1febfc20>
 1f8:	0000004a 	andeq	r0, r0, sl, asr #32
 1fc:	93020001 	movwls	r0, #8193	; 0x2001
 200:	05000002 	streq	r0, [r0, #-2]
 204:	0001dd0c 	andeq	sp, r1, ip, lsl #26
 208:	02ee0e00 	rsceq	r0, lr, #0, 28
 20c:	052b0000 	streq	r0, [fp, #-0]!
 210:	0002450e 	andeq	r4, r2, lr, lsl #10
 214:	025b0700 	subseq	r0, fp, #0, 14
 218:	10050000 	andne	r0, r5, r0
 21c:	0000004a 	andeq	r0, r0, sl, asr #32
 220:	02180700 	andseq	r0, r8, #0, 14
 224:	11050000 	mrsne	r0, (UNDEF: 5)
 228:	0000004a 	andeq	r0, r0, sl, asr #32
 22c:	021e0701 	andseq	r0, lr, #262144	; 0x40000
 230:	12050000 	andne	r0, r5, #0
 234:	0000004a 	andeq	r0, r0, sl, asr #32
 238:	78700f02 	ldmdavc	r0!, {r1, r8, r9, sl, fp}^
 23c:	45130500 	ldrmi	r0, [r3, #-1280]	; 0xfffffb00
 240:	03000002 	movweq	r0, #2
 244:	01fe1000 	mvnseq	r1, r0
 248:	02550000 	subseq	r0, r5, #0
 24c:	55110000 	ldrpl	r0, [r1, #-0]
 250:	13000002 	movwne	r0, #2
 254:	07040300 	streq	r0, [r4, -r0, lsl #6]
 258:	000000da 	ldrdeq	r0, [r0], -sl
 25c:	0001e602 	andeq	lr, r1, r2, lsl #12
 260:	09140500 	ldmdbeq	r4, {r8, sl}
 264:	04000002 	streq	r0, [r0], #-2
 268:	0000025c 	andeq	r0, r0, ip, asr r2
 26c:	00023502 	andeq	r3, r2, r2, lsl #10
 270:	77140500 	ldrvc	r0, [r4, -r0, lsl #10]
 274:	0d000002 	stceq	0, cr0, [r0, #-8]
 278:	00020904 	andeq	r0, r2, r4, lsl #18
 27c:	03650e00 	cmneq	r5, #0, 28
 280:	01180000 	tsteq	r8, r0
 284:	0002f606 	andeq	pc, r2, r6, lsl #12
 288:	65670f00 	strbvs	r0, [r7, #-3840]!	; 0xfffff100
 28c:	0801006f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6}
 290:	0000026c 	andeq	r0, r0, ip, ror #4
 294:	01d70700 	bicseq	r0, r7, r0, lsl #14
 298:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
 29c:	0000006f 	andeq	r0, r0, pc, rrx
 2a0:	02c30704 	sbceq	r0, r3, #4, 14	; 0x100000
 2a4:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
 2a8:	0000006f 	andeq	r0, r0, pc, rrx
 2ac:	00000705 	andeq	r0, r0, r5, lsl #14
 2b0:	0a010000 	beq	402b8 <startup-0x1ffbfd48>
 2b4:	0000006f 	andeq	r0, r0, pc, rrx
 2b8:	01c90706 	biceq	r0, r9, r6, lsl #14
 2bc:	0a010000 	beq	402c4 <startup-0x1ffbfd3c>
 2c0:	0000006f 	andeq	r0, r0, pc, rrx
 2c4:	02e40707 	rsceq	r0, r4, #1835008	; 0x1c0000
 2c8:	0b010000 	bleq	402d0 <startup-0x1ffbfd30>
 2cc:	00000307 	andeq	r0, r0, r7, lsl #6
 2d0:	04a20708 	strteq	r0, [r2], #1800	; 0x708
 2d4:	0c010000 	stceq	0, cr0, [r1], {-0}
 2d8:	00000307 	andeq	r0, r0, r7, lsl #6
 2dc:	036d070c 	cmneq	sp, #12, 14	; 0x300000
 2e0:	0d010000 	stceq	0, cr0, [r1, #-0]
 2e4:	00000307 	andeq	r0, r0, r7, lsl #6
 2e8:	03170710 	tsteq	r7, #16, 14	; 0x400000
 2ec:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
 2f0:	00000322 	andeq	r0, r0, r2, lsr #6
 2f4:	01120014 	tsteq	r2, r4, lsl r0
 2f8:	13000003 	movwne	r0, #3
 2fc:	00000301 	andeq	r0, r0, r1, lsl #6
 300:	7d040d00 	stcvc	13, cr0, [r4, #-0]
 304:	0d000002 	stceq	0, cr0, [r0, #-8]
 308:	0002f604 	andeq	pc, r2, r4, lsl #12
 30c:	03221200 			; <UNDEFINED> instruction: 0x03221200
 310:	01130000 	tsteq	r3, r0
 314:	13000003 	movwne	r0, #3
 318:	0000006f 	andeq	r0, r0, pc, rrx
 31c:	00006f13 	andeq	r6, r0, r3, lsl pc
 320:	040d0000 	streq	r0, [sp], #-0
 324:	0000030d 	andeq	r0, r0, sp, lsl #6
 328:	00036602 	andeq	r6, r3, r2, lsl #12
 32c:	7d0f0100 	stfvcs	f0, [pc, #-0]	; 334 <startup-0x1ffffccc>
 330:	02000002 	andeq	r0, r0, #2
 334:	00000353 	andeq	r0, r0, r3, asr r3
 338:	03010f01 	movweq	r0, #7937	; 0x1f01
 33c:	e2140000 	ands	r0, r4, #0
 340:	02000001 	andeq	r0, r0, #1
 344:	00026716 	andeq	r6, r2, r6, lsl r7
 348:	bc030500 	cfstr32lt	mvfx0, [r3], {-0}
 34c:	1420000a 	strtne	r0, [r0], #-10
 350:	000000cf 	andeq	r0, r0, pc, asr #1
 354:	03282302 			; <UNDEFINED> instruction: 0x03282302
 358:	03050000 	movweq	r0, #20480	; 0x5000
 35c:	20000aa4 	andcs	r0, r0, r4, lsr #21
 360:	0002aa15 	andeq	sl, r2, r5, lsl sl
 364:	4ad60200 	bmi	ff580b6c <ballGeometry+0xdf5800b0>
 368:	7e200004 	cdpvc	0, 2, cr0, cr0, cr4, {0}
 36c:	01000000 	mrseq	r0, (UNDEF: 0)
 370:	0003ce9c 	muleq	r3, ip, lr
 374:	626f1600 	rsbvs	r1, pc, #0, 12
 378:	d602006a 	strle	r0, [r2], -sl, rrx
 37c:	00000333 	andeq	r0, r0, r3, lsr r3
 380:	17649102 	strbne	r9, [r4, -r2, lsl #2]!
 384:	000002e9 	andeq	r0, r0, r9, ror #5
 388:	026cd802 	rsbeq	sp, ip, #131072	; 0x20000
 38c:	91020000 	mrsls	r0, (UNDEF: 2)
 390:	000d1770 	andeq	r1, sp, r0, ror r7
 394:	d9020000 	stmdble	r2, {}	; <UNPREDICTABLE>
 398:	0000004a 	andeq	r0, r0, sl, asr #32
 39c:	186f9102 	stmdane	pc!, {r1, r8, ip, pc}^	; <UNPREDICTABLE>
 3a0:	20000462 	andcs	r0, r0, r2, ror #8
 3a4:	0000005e 	andeq	r0, r0, lr, asr r0
 3a8:	02006919 	andeq	r6, r0, #409600	; 0x64000
 3ac:	000061db 	ldrdeq	r6, [r0], -fp
 3b0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 3b4:	00046818 	andeq	r6, r4, r8, lsl r8
 3b8:	00004620 	andeq	r4, r0, r0, lsr #12
 3bc:	01b61700 			; <UNDEFINED> instruction: 0x01b61700
 3c0:	dd020000 	stcle	0, cr0, [r2, #-0]
 3c4:	000001fe 	strdeq	r0, [r0], -lr
 3c8:	006c9102 	rsbeq	r9, ip, r2, lsl #2
 3cc:	29150000 	ldmdbcs	r5, {}	; <UNPREDICTABLE>
 3d0:	02000003 	andeq	r0, r0, #3
 3d4:	0003ccca 	andeq	ip, r3, sl, asr #25
 3d8:	00007e20 	andeq	r7, r0, r0, lsr #28
 3dc:	3c9c0100 	ldfccs	f0, [ip], {0}
 3e0:	16000004 	strne	r0, [r0], -r4
 3e4:	006a626f 	rsbeq	r6, sl, pc, ror #4
 3e8:	0333ca02 	teqeq	r3, #8192	; 0x2000
 3ec:	91020000 	mrsls	r0, (UNDEF: 2)
 3f0:	02e91764 	rsceq	r1, r9, #100, 14	; 0x1900000
 3f4:	cc020000 	stcgt	0, cr0, [r2], {-0}
 3f8:	0000026c 	andeq	r0, r0, ip, ror #4
 3fc:	17709102 	ldrbne	r9, [r0, -r2, lsl #2]!
 400:	0000000d 	andeq	r0, r0, sp
 404:	004acd02 	subeq	ip, sl, r2, lsl #26
 408:	91020000 	mrsls	r0, (UNDEF: 2)
 40c:	03e4186f 	mvneq	r1, #7274496	; 0x6f0000
 410:	005e2000 	subseq	r2, lr, r0
 414:	69190000 	ldmdbvs	r9, {}	; <UNPREDICTABLE>
 418:	61cf0200 	bicvs	r0, pc, r0, lsl #4
 41c:	02000000 	andeq	r0, r0, #0
 420:	ea187491 	b	61d66c <startup-0x1f9e2994>
 424:	46200003 	strtmi	r0, [r0], -r3
 428:	17000000 	strne	r0, [r0, -r0]
 42c:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
 430:	01fed102 	mvnseq	sp, r2, lsl #2
 434:	91020000 	mrsls	r0, (UNDEF: 2)
 438:	0000006c 	andeq	r0, r0, ip, rrx
 43c:	00012315 	andeq	r2, r1, r5, lsl r3
 440:	28ab0200 	stmiacs	fp!, {r9}
 444:	a4200003 	strtge	r0, [r0], #-3
 448:	01000000 	mrseq	r0, (UNDEF: 0)
 44c:	00047c9c 	muleq	r4, ip, ip
 450:	00691900 	rsbeq	r1, r9, r0, lsl #18
 454:	0021ad02 	eoreq	sl, r1, r2, lsl #26
 458:	91020000 	mrsls	r0, (UNDEF: 2)
 45c:	012c1a74 			; <UNDEFINED> instruction: 0x012c1a74
 460:	66020000 	strvs	r0, [r2], -r0
 464:	00000061 	andeq	r0, r0, r1, rrx
 468:	0000046e 	andeq	r0, r0, lr, ror #8
 46c:	411c001b 	tstmi	ip, fp, lsl r0
 470:	02000002 	andeq	r0, r0, #2
 474:	00006182 	andeq	r6, r0, r2, lsl #3
 478:	00001b00 	andeq	r1, r0, r0, lsl #22
 47c:	00002e15 	andeq	r2, r0, r5, lsl lr
 480:	ee980200 	cdp	2, 9, cr0, cr8, cr0, {0}
 484:	3a200002 	bcc	800494 <startup-0x1f7ffb6c>
 488:	01000000 	mrseq	r0, (UNDEF: 0)
 48c:	0004c89c 	muleq	r4, ip, r8
 490:	03051700 	movweq	r1, #22272	; 0x5700
 494:	9a020000 	bls	8049c <startup-0x1ff7fb64>
 498:	00000333 	andeq	r0, r0, r3, lsr r3
 49c:	1a749102 	bne	1d248ac <startup-0x1e2db754>
 4a0:	0000012c 	andeq	r0, r0, ip, lsr #2
 4a4:	00616602 	rsbeq	r6, r1, r2, lsl #12
 4a8:	04b00000 	ldrteq	r0, [r0], #0
 4ac:	001b0000 	andseq	r0, fp, r0
 4b0:	00031018 	andeq	r1, r3, r8, lsl r0
 4b4:	00001020 	andeq	r1, r0, r0, lsr #32
 4b8:	02411c00 	subeq	r1, r1, #0, 24
 4bc:	82020000 	andhi	r0, r2, #0
 4c0:	00000061 	andeq	r0, r0, r1, rrx
 4c4:	0000001b 	andeq	r0, r0, fp, lsl r0
 4c8:	00020c1d 	andeq	r0, r2, sp, lsl ip
 4cc:	4a860200 	bmi	fe180cd4 <ballGeometry+0xde180218>
 4d0:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
 4d4:	96200002 	strtls	r0, [r0], -r2
 4d8:	01000000 	mrseq	r0, (UNDEF: 0)
 4dc:	0005509c 	muleq	r5, ip, r0
 4e0:	00f11700 	rscseq	r1, r1, r0, lsl #14
 4e4:	87020000 	strhi	r0, [r2, -r0]
 4e8:	0000004a 	andeq	r0, r0, sl, asr #32
 4ec:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
 4f0:	20000264 	andcs	r0, r0, r4, ror #4
 4f4:	0000007e 	andeq	r0, r0, lr, ror r0
 4f8:	776f7219 			; <UNDEFINED> instruction: 0x776f7219
 4fc:	4a880200 	bmi	fe200d04 <ballGeometry+0xde200248>
 500:	02000000 	andeq	r0, r0, #0
 504:	6c186f91 	ldcvs	15, cr6, [r8], {145}	; 0x91
 508:	64200002 	strtvs	r0, [r0], #-2
 50c:	17000000 	strne	r0, [r0, -r0]
 510:	00000022 	andeq	r0, r0, r2, lsr #32
 514:	004a8a02 	subeq	r8, sl, r2, lsl #20
 518:	91020000 	mrsls	r0, (UNDEF: 2)
 51c:	0280186e 	addeq	r1, r0, #7208960	; 0x6e0000
 520:	00502000 	subseq	r2, r0, r0
 524:	1b170000 	blne	5c052c <startup-0x1fa3fad4>
 528:	02000000 	andeq	r0, r0, #0
 52c:	00004a8c 	andeq	r4, r0, ip, lsl #21
 530:	6d910200 	lfmvs	f0, 4, [r1]
 534:	00028818 	andeq	r8, r2, r8, lsl r8
 538:	00003620 	andeq	r3, r0, r0, lsr #12
 53c:	02f81700 	rscseq	r1, r8, #0, 14
 540:	8d020000 	stchi	0, cr0, [r2, #-0]
 544:	0000004a 	andeq	r0, r0, sl, asr #32
 548:	006b9102 	rsbeq	r9, fp, r2, lsl #2
 54c:	00000000 	andeq	r0, r0, r0
 550:	0002b615 	andeq	fp, r2, r5, lsl r6
 554:	bc600200 	sfmlt	f0, 2, [r0], #-0
 558:	9c200001 	stcls	0, cr0, [r0], #-4
 55c:	01000000 	mrseq	r0, (UNDEF: 0)
 560:	0005aa9c 	muleq	r5, ip, sl
 564:	03051700 	movweq	r1, #22272	; 0x5700
 568:	61020000 	mrsvs	r0, (UNDEF: 2)
 56c:	00000333 	andeq	r0, r0, r3, lsr r3
 570:	1a6c9102 	bne	1b24980 <startup-0x1e4db680>
 574:	0000012c 	andeq	r0, r0, ip, lsr #2
 578:	00616602 	rsbeq	r6, r1, r2, lsl #12
 57c:	05840000 	streq	r0, [r4]
 580:	001b0000 	andseq	r0, fp, r0
 584:	0001de18 	andeq	sp, r1, r8, lsl lr
 588:	00007420 	andeq	r7, r0, r0, lsr #8
 58c:	00d41700 	sbcseq	r1, r4, r0, lsl #14
 590:	6c020000 	stcvs	0, cr0, [r2], {-0}
 594:	0000004a 	andeq	r0, r0, sl, asr #32
 598:	1c6b9102 	stfnep	f1, [fp], #-8
 59c:	00000241 	andeq	r0, r0, r1, asr #4
 5a0:	00618202 	rsbeq	r8, r1, r2, lsl #4
 5a4:	001b0000 	andseq	r0, fp, r0
 5a8:	361e0000 	ldrcc	r0, [lr], -r0
 5ac:	02000003 	andeq	r0, r0, #3
 5b0:	00004a5b 	andeq	r4, r0, fp, asr sl
 5b4:	0001a800 	andeq	sl, r1, r0, lsl #16
 5b8:	00001420 	andeq	r1, r0, r0, lsr #8
 5bc:	1f9c0100 	svcne	0x009c0100
 5c0:	0000027c 	andeq	r0, r0, ip, ror r2
 5c4:	016a5602 	cmneq	sl, r2, lsl #12
 5c8:	003e2000 	eorseq	r2, lr, r0
 5cc:	9c010000 	stcls	0, cr0, [r1], {-0}
 5d0:	000005e1 	andeq	r0, r0, r1, ror #11
 5d4:	02007816 	andeq	r7, r0, #1441792	; 0x160000
 5d8:	00004a56 	andeq	r4, r0, r6, asr sl
 5dc:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 5e0:	00ec2000 	rsceq	r2, ip, r0
 5e4:	49020000 	stmdbmi	r2, {}	; <UNPREDICTABLE>
 5e8:	2000015c 	andcs	r0, r0, ip, asr r1
 5ec:	0000000e 	andeq	r0, r0, lr
 5f0:	db219c01 	blle	8675fc <startup-0x1f798a04>
 5f4:	02000002 	andeq	r0, r0, #2
 5f8:	0000f838 	andeq	pc, r0, r8, lsr r8	; <UNPREDICTABLE>
 5fc:	00006420 	andeq	r6, r0, r0, lsr #8
 600:	219c0100 	orrscs	r0, ip, r0, lsl #2
 604:	0000035d 	andeq	r0, r0, sp, asr r3
 608:	00002e02 	andeq	r2, r0, r2, lsl #28
 60c:	000c2000 	andeq	r2, ip, r0
 610:	9c010000 	stcls	0, cr0, [r1], {-0}
 614:	00010b15 	andeq	r0, r1, r5, lsl fp
 618:	40170100 	andsmi	r0, r7, r0, lsl #2
 61c:	b8200000 	stmdalt	r0!, {}	; <UNPREDICTABLE>
 620:	01000000 	mrseq	r0, (UNDEF: 0)
 624:	0006389c 	muleq	r6, ip, r8
 628:	626f1600 	rsbvs	r1, pc, #0, 12
 62c:	1701006a 	strne	r0, [r1, -sl, rrx]
 630:	00000333 	andeq	r0, r0, r3, lsr r3
 634:	00749102 	rsbseq	r9, r4, r2, lsl #2
 638:	00029922 	andeq	r9, r2, r2, lsr #18
 63c:	10110100 	andsne	r0, r1, r0, lsl #2
 640:	30200000 	eorcc	r0, r0, r0
 644:	01000000 	mrseq	r0, (UNDEF: 0)
 648:	626f169c 	rsbvs	r1, pc, #156, 12	; 0x9c00000
 64c:	1101006a 	tstne	r1, sl, rrx
 650:	00000333 	andeq	r0, r0, r3, lsr r3
 654:	23749102 	cmncs	r4, #-2147483648	; 0x80000000
 658:	0000024d 	andeq	r0, r0, sp, asr #4
 65c:	006f1101 	rsbeq	r1, pc, r1, lsl #2
 660:	91020000 	mrsls	r0, (UNDEF: 2)
 664:	02542373 	subseq	r2, r4, #-872415231	; 0xcc000001
 668:	11010000 	mrsne	r0, (UNDEF: 1)
 66c:	0000006f 	andeq	r0, r0, pc, rrx
 670:	00729102 	rsbseq	r9, r2, r2, lsl #2
 674:	00017d00 	andeq	r7, r1, r0, lsl #26
 678:	01000400 	tsteq	r0, r0, lsl #8
 67c:	04000002 	streq	r0, [r0], #-2
 680:	00003701 	andeq	r3, r0, r1, lsl #14
 684:	03b50c00 			; <UNDEFINED> instruction: 0x03b50c00
 688:	04cc0000 	strbeq	r0, [ip], #0
 68c:	00ac2000 	adceq	r2, ip, r0
 690:	01eb0000 	mvneq	r0, r0
 694:	10020000 	andne	r0, r2, r0
 698:	02000003 	andeq	r0, r0, #3
 69c:	00002c07 	andeq	r2, r0, r7, lsl #24
 6a0:	07040300 	streq	r0, [r4, -r0, lsl #6]
 6a4:	000002ce 	andeq	r0, r0, lr, asr #5
 6a8:	00002c04 	andeq	r2, r0, r4, lsl #24
 6ac:	07020300 	streq	r0, [r2, -r0, lsl #6]
 6b0:	000002c8 	andeq	r0, r0, r8, asr #5
 6b4:	0001b002 	andeq	fp, r1, r2
 6b8:	4a090200 	bmi	240ec0 <startup-0x1fdbf140>
 6bc:	03000000 	movweq	r0, #0
 6c0:	02650801 	rsbeq	r0, r5, #65536	; 0x10000
 6c4:	4a040000 	bmi	1006cc <startup-0x1feff934>
 6c8:	05000000 	streq	r0, [r0, #-0]
 6cc:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
 6d0:	02030074 	andeq	r0, r3, #116	; 0x74
 6d4:	00011905 	andeq	r1, r1, r5, lsl #18
 6d8:	06010300 	streq	r0, [r1], -r0, lsl #6
 6dc:	00000267 	andeq	r0, r0, r7, ror #4
 6e0:	00042102 	andeq	r2, r4, r2, lsl #2
 6e4:	330f0200 	movwcc	r0, #61952	; 0xf200
 6e8:	02000000 	andeq	r0, r0, #0
 6ec:	000000fb 	strdeq	r0, [r0], -fp
 6f0:	00511102 	subseq	r1, r1, r2, lsl #2
 6f4:	0c060000 	stceq	0, cr0, [r6], {-0}
 6f8:	00d20803 	sbcseq	r0, r2, r3, lsl #16
 6fc:	7d070000 	stcvc	0, cr0, [r7, #-0]
 700:	03000003 	movweq	r0, #3
 704:	00003f09 	andeq	r3, r0, r9, lsl #30
 708:	ab070000 	blge	1c0710 <startup-0x1fe3f8f0>
 70c:	03000003 	movweq	r0, #3
 710:	0000760a 	andeq	r7, r0, sl, lsl #12
 714:	72070100 	andvc	r0, r7, #0, 2
 718:	03000003 	movweq	r0, #3
 71c:	00003f0b 	andeq	r3, r0, fp, lsl #30
 720:	3d070200 	sfmcc	f0, 4, [r7, #-0]
 724:	03000004 	movweq	r0, #4
 728:	0000760c 	andeq	r7, r0, ip, lsl #12
 72c:	a6070300 	strge	r0, [r7], -r0, lsl #6
 730:	03000003 	movweq	r0, #3
 734:	0000210d 	andeq	r2, r0, sp, lsl #2
 738:	56080400 	strpl	r0, [r8], -r0, lsl #8
 73c:	03004c41 	movweq	r4, #3137	; 0xc41
 740:	0000210e 	andeq	r2, r0, lr, lsl #2
 744:	02000800 	andeq	r0, r0, #0, 16
 748:	00000435 	andeq	r0, r0, r5, lsr r4
 74c:	00810f03 	addeq	r0, r1, r3, lsl #30
 750:	d2090000 	andle	r0, r9, #0
 754:	02000000 	andeq	r0, r0, #0
 758:	0000042a 	andeq	r0, r0, sl, lsr #8
 75c:	00ed1103 	rsceq	r1, sp, r3, lsl #2
 760:	040a0000 	streq	r0, [sl], #-0
 764:	000000dd 	ldrdeq	r0, [r0], -sp
 768:	0002410b 	andeq	r4, r2, fp, lsl #2
 76c:	5a270100 	bpl	9c0b74 <startup-0x1f63f48c>
 770:	1e200005 	cdpne	0, 2, cr0, cr0, cr5, {0}
 774:	01000000 	mrseq	r0, (UNDEF: 0)
 778:	0001169c 	muleq	r1, ip, r6
 77c:	736d0c00 	cmnvc	sp, #0, 24
 780:	21270100 			; <UNDEFINED> instruction: 0x21270100
 784:	02000000 	andeq	r0, r0, #0
 788:	0b007491 	bleq	1d9d4 <startup-0x1ffe262c>
 78c:	0000039a 	muleq	r0, sl, r3
 790:	05261c01 	streq	r1, [r6, #-3073]!	; 0xfffff3ff
 794:	00342000 	eorseq	r2, r4, r0
 798:	9c010000 	stcls	0, cr0, [r1], {-0}
 79c:	00000151 	andeq	r0, r0, r1, asr r1
 7a0:	0073750c 	rsbseq	r7, r3, ip, lsl #10
 7a4:	006b1c01 	rsbeq	r1, fp, r1, lsl #24
 7a8:	91020000 	mrsls	r0, (UNDEF: 2)
 7ac:	052e0d6c 	streq	r0, [lr, #-3436]!	; 0xfffff294
 7b0:	00242000 	eoreq	r2, r4, r0
 7b4:	1b0e0000 	blne	3807bc <startup-0x1fc7f844>
 7b8:	01000004 	tsteq	r0, r4
 7bc:	0000211e 	andeq	r2, r0, lr, lsl r1
 7c0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 7c4:	8e0f0000 	cdphi	0, 0, cr0, cr15, cr0, {0}
 7c8:	01000003 	tsteq	r0, r3
 7cc:	00051416 	andeq	r1, r5, r6, lsl r4
 7d0:	00001220 	andeq	r1, r0, r0, lsr #4
 7d4:	109c0100 	addsne	r0, ip, r0, lsl #2
 7d8:	00000382 	andeq	r0, r0, r2, lsl #7
 7dc:	04cc0501 	strbeq	r0, [ip], #1281	; 0x501
 7e0:	00482000 	subeq	r2, r8, r0
 7e4:	9c010000 	stcls	0, cr0, [r1], {-0}
 7e8:	01007811 	tsteq	r0, r1, lsl r8
 7ec:	00002107 	andeq	r2, r0, r7, lsl #2
 7f0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 7f4:	04770000 	ldrbteq	r0, [r7], #-0
 7f8:	00040000 	andeq	r0, r4, r0
 7fc:	000002f8 	strdeq	r0, [r0], -r8
 800:	00370104 	eorseq	r0, r7, r4, lsl #2
 804:	a80c0000 	stmdage	ip, {}	; <UNPREDICTABLE>
 808:	78000004 	stmdavc	r0, {r2}
 80c:	18200005 	stmdane	r0!, {r0, r2}
 810:	c8000005 	stmdagt	r0, {r0, r2}
 814:	02000002 	andeq	r0, r0, #2
 818:	00000310 	andeq	r0, r0, r0, lsl r3
 81c:	002c0702 	eoreq	r0, ip, r2, lsl #14
 820:	04030000 	streq	r0, [r3], #-0
 824:	0002ce07 	andeq	ip, r2, r7, lsl #28
 828:	01410200 	mrseq	r0, (UNDEF: 97)
 82c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
 830:	0000003e 	andeq	r0, r0, lr, lsr r0
 834:	c8070203 	stmdagt	r7, {r0, r1, r9}
 838:	04000002 	streq	r0, [r0], #-2
 83c:	0000003e 	andeq	r0, r0, lr, lsr r0
 840:	0001b002 	andeq	fp, r1, r2
 844:	55090200 	strpl	r0, [r9, #-512]	; 0xfffffe00
 848:	03000000 	movweq	r0, #0
 84c:	02650801 	rsbeq	r0, r5, #65536	; 0x10000
 850:	55040000 	strpl	r0, [r4, #-0]
 854:	05000000 	streq	r0, [r0, #-0]
 858:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
 85c:	02030074 	andeq	r0, r3, #116	; 0x74
 860:	00011905 	andeq	r1, r1, r5, lsl #18
 864:	06010300 	streq	r0, [r1], -r0, lsl #6
 868:	00000267 	andeq	r0, r0, r7, ror #4
 86c:	00027302 	andeq	r7, r2, r2, lsl #6
 870:	45100200 	ldrmi	r0, [r0, #-512]	; 0xfffffe00
 874:	02000000 	andeq	r0, r0, #0
 878:	000000fb 	strdeq	r0, [r0], -fp
 87c:	005c1102 	subseq	r1, ip, r2, lsl #2
 880:	02060000 	andeq	r0, r6, #0
 884:	00ad0f03 	adceq	r0, sp, r3, lsl #30
 888:	03070000 	movweq	r0, #28672	; 0x7000
 88c:	03000001 	movweq	r0, #1
 890:	00004a10 	andeq	r4, r0, r0, lsl sl
 894:	42070000 	andmi	r0, r7, #0
 898:	03000003 	movweq	r0, #3
 89c:	00004a11 	andeq	r4, r0, r1, lsl sl
 8a0:	08000100 	stmdaeq	r0, {r8}
 8a4:	c60e0302 	strgt	r0, [lr], -r2, lsl #6
 8a8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 8ac:	00524449 	subseq	r4, r2, r9, asr #8
 8b0:	00330e03 	eorseq	r0, r3, r3, lsl #28
 8b4:	8c0a0000 	stchi	0, cr0, [sl], {-0}
 8b8:	00000000 	andeq	r0, r0, r0
 8bc:	17030206 	strne	r0, [r3, -r6, lsl #4]
 8c0:	000000e7 	andeq	r0, r0, r7, ror #1
 8c4:	00022407 	andeq	r2, r2, r7, lsl #8
 8c8:	4a180300 	bmi	6014d0 <startup-0x1f9feb30>
 8cc:	00000000 	andeq	r0, r0, r0
 8d0:	00022c07 	andeq	r2, r2, r7, lsl #24
 8d4:	4a190300 	bmi	6414dc <startup-0x1f9beb24>
 8d8:	01000000 	mrseq	r0, (UNDEF: 0)
 8dc:	03020800 	movweq	r0, #10240	; 0x2800
 8e0:	00010016 	andeq	r0, r1, r6, lsl r0
 8e4:	444f0900 	strbmi	r0, [pc], #-2304	; 8ec <startup-0x1ffff714>
 8e8:	16030052 			; <UNDEFINED> instruction: 0x16030052
 8ec:	00000033 	andeq	r0, r0, r3, lsr r0
 8f0:	0000c60a 	andeq	ip, r0, sl, lsl #12
 8f4:	28060000 	stmdacs	r6, {}	; <UNPREDICTABLE>
 8f8:	01b10803 			; <UNDEFINED> instruction: 0x01b10803
 8fc:	06070000 	streq	r0, [r7], -r0
 900:	03000002 	movweq	r0, #2
 904:	00002109 	andeq	r2, r0, r9, lsl #2
 908:	c2070000 	andgt	r0, r7, #0
 90c:	03000001 	movweq	r0, #1
 910:	0000330a 	andeq	r3, r0, sl, lsl #6
 914:	11070400 	tstne	r7, r0, lsl #8
 918:	03000002 	movweq	r0, #2
 91c:	0000760b 	andeq	r7, r0, fp, lsl #12
 920:	05070600 	streq	r0, [r7, #-1536]	; 0xfffffa00
 924:	03000000 	movweq	r0, #0
 928:	0000210c 	andeq	r2, r0, ip, lsl #2
 92c:	dc070800 	stcle	8, cr0, [r7], {-0}
 930:	03000001 	movweq	r0, #1
 934:	0000210d 	andeq	r2, r0, sp, lsl #2
 938:	ad0b0c00 	stcge	12, cr0, [fp, #-0]
 93c:	10000000 	andne	r0, r0, r0
 940:	00032107 	andeq	r2, r3, r7, lsl #2
 944:	76140300 	ldrvc	r0, [r4], -r0, lsl #6
 948:	12000000 	andne	r0, r0, #0
 94c:	0000e70b 	andeq	lr, r0, fp, lsl #14
 950:	fe071400 	cdp2	4, 0, cr1, cr7, cr0, {0}
 954:	03000001 	movweq	r0, #1
 958:	0000761c 	andeq	r7, r0, ip, lsl r6
 95c:	f9071600 			; <UNDEFINED> instruction: 0xf9071600
 960:	03000001 	movweq	r0, #1
 964:	0000211d 	andeq	r2, r0, sp, lsl r1
 968:	f3071800 	vsub.i8	d1, d7, d0
 96c:	03000001 	movweq	r0, #1
 970:	0000331e 	andeq	r3, r0, lr, lsl r3
 974:	e3071c00 	movw	r1, #31744	; 0x7c00
 978:	03000000 	movweq	r0, #0
 97c:	00004a1f 	andeq	r4, r0, pc, lsl sl
 980:	ef071e00 	svc	0x00071e00
 984:	03000001 	movweq	r0, #1
 988:	00008120 	andeq	r8, r0, r0, lsr #2
 98c:	88071f00 	stmdahi	r7, {r8, r9, sl, fp, ip}
 990:	03000002 	movweq	r0, #2
 994:	00002121 	andeq	r2, r0, r1, lsr #2
 998:	8d072000 	stchi	0, cr2, [r7, #-0]
 99c:	03000002 	movweq	r0, #2
 9a0:	00002122 	andeq	r2, r0, r2, lsr #2
 9a4:	02002400 	andeq	r2, r0, #0, 8
 9a8:	000001ce 	andeq	r0, r0, lr, asr #3
 9ac:	01002303 	tsteq	r0, r3, lsl #6
 9b0:	b10c0000 	mrslt	r0, (UNDEF: 12)
 9b4:	02000001 	andeq	r0, r0, #1
 9b8:	0000034b 	andeq	r0, r0, fp, asr #6
 9bc:	01cc2503 	biceq	r2, ip, r3, lsl #10
 9c0:	040d0000 	streq	r0, [sp], #-0
 9c4:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
 9c8:	00046b0e 	andeq	r6, r4, lr, lsl #22
 9cc:	02b00100 	adcseq	r0, r0, #0, 2
 9d0:	8e200009 	cdphi	0, 2, cr0, cr0, cr9, {0}
 9d4:	01000001 	tsteq	r0, r1
 9d8:	0002549c 	muleq	r2, ip, r4
 9dc:	00780f00 	rsbseq	r0, r8, r0, lsl #30
 9e0:	0081b001 	addeq	fp, r1, r1
 9e4:	91020000 	mrsls	r0, (UNDEF: 2)
 9e8:	00790f67 	rsbseq	r0, r9, r7, ror #30
 9ec:	0081b001 	addeq	fp, r1, r1
 9f0:	91020000 	mrsls	r0, (UNDEF: 2)
 9f4:	65730f66 	ldrbvs	r0, [r3, #-3942]!	; 0xfffff09a
 9f8:	b0010074 	andlt	r0, r1, r4, ror r0
 9fc:	00000081 	andeq	r0, r0, r1, lsl #1
 a00:	10659102 	rsbne	r9, r5, r2, lsl #2
 a04:	00776f72 	rsbseq	r6, r7, r2, ror pc
 a08:	0081b801 	addeq	fp, r1, r1, lsl #16
 a0c:	91020000 	mrsls	r0, (UNDEF: 2)
 a10:	053f116c 	ldreq	r1, [pc, #-364]!	; 8ac <startup-0x1ffff754>
 a14:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
 a18:	0000004a 	andeq	r0, r0, sl, asr #32
 a1c:	116f9102 	cmnne	pc, r2, lsl #2
 a20:	00000486 	andeq	r0, r0, r6, lsl #9
 a24:	004ac001 	subeq	ip, sl, r1
 a28:	91020000 	mrsls	r0, (UNDEF: 2)
 a2c:	001b116e 	andseq	r1, fp, lr, ror #2
 a30:	c1010000 	mrsgt	r0, (UNDEF: 1)
 a34:	0000004a 	andeq	r0, r0, sl, asr #32
 a38:	116d9102 	cmnne	sp, r2, lsl #2
 a3c:	00000447 	andeq	r0, r0, r7, asr #8
 a40:	0081d001 	addeq	sp, r1, r1
 a44:	91020000 	mrsls	r0, (UNDEF: 2)
 a48:	2c12006b 	ldccs	0, cr0, [r2], {107}	; 0x6b
 a4c:	01000001 	tsteq	r0, r1
 a50:	00089ca2 	andeq	r9, r8, r2, lsr #25
 a54:	00006620 	andeq	r6, r0, r0, lsr #12
 a58:	969c0100 	ldrls	r0, [ip], r0, lsl #2
 a5c:	13000002 	movwne	r0, #2
 a60:	200008a2 	andcs	r0, r0, r2, lsr #17
 a64:	00000058 	andeq	r0, r0, r8, asr r0
 a68:	01006910 	tsteq	r0, r0, lsl r9
 a6c:	00004aa5 	andeq	r4, r0, r5, lsr #21
 a70:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 a74:	0008c613 	andeq	ip, r8, r3, lsl r6
 a78:	00002220 	andeq	r2, r0, r0, lsr #4
 a7c:	006a1000 	rsbeq	r1, sl, r0
 a80:	004aa901 	subeq	sl, sl, r1, lsl #18
 a84:	91020000 	mrsls	r0, (UNDEF: 2)
 a88:	00000076 	andeq	r0, r0, r6, ror r0
 a8c:	0005170e 	andeq	r1, r5, lr, lsl #14
 a90:	46900100 	ldrmi	r0, [r0], r0, lsl #2
 a94:	56200008 	strtpl	r0, [r0], -r8
 a98:	01000000 	mrseq	r0, (UNDEF: 0)
 a9c:	0002ca9c 	muleq	r2, ip, sl
 aa0:	039a1400 	orrseq	r1, sl, #0, 8
 aa4:	93010000 	movwls	r0, #4096	; 0x1000
 aa8:	00000061 	andeq	r0, r0, r1, rrx
 aac:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
 ab0:	41160015 	tstmi	r6, r5, lsl r0
 ab4:	01000002 	tsteq	r0, r2
 ab8:	00006196 	muleq	r0, r6, r1
 abc:	00001500 	andeq	r1, r0, r0, lsl #10
 ac0:	0005440e 	andeq	r4, r5, lr, lsl #8
 ac4:	00840100 	addeq	r0, r4, r0, lsl #2
 ac8:	46200008 	strtmi	r0, [r0], -r8
 acc:	01000000 	mrseq	r0, (UNDEF: 0)
 ad0:	0002fc9c 	muleq	r2, ip, ip
 ad4:	04661700 	strbteq	r1, [r6], #-1792	; 0xfffff900
 ad8:	84010000 	strhi	r0, [r1], #-0
 adc:	00000081 	andeq	r0, r0, r1, lsl #1
 ae0:	17779102 	ldrbne	r9, [r7, -r2, lsl #2]!
 ae4:	00000486 	andeq	r0, r0, r6, lsl #9
 ae8:	00818401 	addeq	r8, r1, r1, lsl #8
 aec:	91020000 	mrsls	r0, (UNDEF: 2)
 af0:	770e0076 	smlsdxvc	lr, r6, r0, r0
 af4:	01000005 	tsteq	r0, r5
 af8:	0007c079 	andeq	ip, r7, r9, ror r0
 afc:	00004020 	andeq	r4, r0, r0, lsr #32
 b00:	2e9c0100 	fmlcse	f0, f4, f0
 b04:	17000003 	strne	r0, [r0, -r3]
 b08:	00000585 	andeq	r0, r0, r5, lsl #11
 b0c:	00817901 	addeq	r7, r1, r1, lsl #18
 b10:	91020000 	mrsls	r0, (UNDEF: 2)
 b14:	04861777 	streq	r1, [r6], #1911	; 0x777
 b18:	79010000 	stmdbvc	r1, {}	; <UNPREDICTABLE>
 b1c:	00000081 	andeq	r0, r0, r1, lsl #1
 b20:	00769102 	rsbseq	r9, r6, r2, lsl #2
 b24:	0004710e 	andeq	r7, r4, lr, lsl #2
 b28:	425a0100 	subsmi	r0, sl, #0, 2
 b2c:	7e200007 	cdpvc	0, 2, cr0, cr0, cr7, {0}
 b30:	01000000 	mrseq	r0, (UNDEF: 0)
 b34:	00036d9c 	muleq	r3, ip, sp
 b38:	04531700 	ldrbeq	r1, [r3], #-1792	; 0xfffff900
 b3c:	5a010000 	bpl	40b44 <startup-0x1ffbf4bc>
 b40:	00000081 	andeq	r0, r0, r1, lsl #1
 b44:	17779102 	ldrbne	r9, [r7, -r2, lsl #2]!
 b48:	00000486 	andeq	r0, r0, r6, lsl #9
 b4c:	00815a01 	addeq	r5, r1, r1, lsl #20
 b50:	91020000 	mrsls	r0, (UNDEF: 2)
 b54:	038e1676 	orreq	r1, lr, #123731968	; 0x7600000
 b58:	1f010000 	svcne	0x00010000
 b5c:	00000061 	andeq	r0, r0, r1, rrx
 b60:	18000015 	stmdane	r0, {r0, r2, r4}
 b64:	00000459 	andeq	r0, r0, r9, asr r4
 b68:	00815401 	addeq	r5, r1, r1, lsl #8
 b6c:	07180000 	ldreq	r0, [r8, -r0]
 b70:	002a2000 	eoreq	r2, sl, r0
 b74:	9c010000 	stcls	0, cr0, [r1], {-0}
 b78:	00000395 	muleq	r0, r5, r3
 b7c:	00048617 	andeq	r8, r4, r7, lsl r6
 b80:	81540100 	cmphi	r4, r0, lsl #2
 b84:	02000000 	andeq	r0, r0, #0
 b88:	18007791 	stmdane	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
 b8c:	0000056a 	andeq	r0, r0, sl, ror #10
 b90:	00813201 	addeq	r3, r1, r1, lsl #4
 b94:	068c0000 	streq	r0, [ip], r0
 b98:	008c2000 	addeq	r2, ip, r0
 b9c:	9c010000 	stcls	0, cr0, [r1], {-0}
 ba0:	000003db 	ldrdeq	r0, [r0], -fp
 ba4:	00048617 	andeq	r8, r4, r7, lsl r6
 ba8:	81320100 	teqhi	r2, r0, lsl #2
 bac:	02000000 	andeq	r0, r0, #0
 bb0:	8e146f91 	mrchi	15, 0, r6, cr4, cr1, {4}
 bb4:	01000003 	tsteq	r0, r3
 bb8:	0000611f 	andeq	r6, r0, pc, lsl r1
 bbc:	0003cd00 	andeq	ip, r3, r0, lsl #26
 bc0:	10001500 	andne	r1, r0, r0, lsl #10
 bc4:	01007672 	tsteq	r0, r2, ror r6
 bc8:	00008140 	andeq	r8, r0, r0, asr #2
 bcc:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 bd0:	05570e00 	ldrbeq	r0, [r7, #-3584]	; 0xfffff200
 bd4:	16010000 	strne	r0, [r1], -r0
 bd8:	2000061c 	andcs	r0, r0, ip, lsl r6
 bdc:	00000070 	andeq	r0, r0, r0, ror r0
 be0:	04169c01 	ldreq	r9, [r6], #-3073	; 0xfffff3ff
 be4:	8e140000 	cdphi	0, 1, cr0, cr4, cr0, {0}
 be8:	01000003 	tsteq	r0, r3
 bec:	0000611f 	andeq	r6, r0, pc, lsl r1
 bf0:	00040100 	andeq	r0, r4, r0, lsl #2
 bf4:	19001500 	stmdbne	r0, {r8, sl, ip}
 bf8:	00000018 	andeq	r0, r0, r8, lsl r0
 bfc:	00044c11 	andeq	r4, r4, r1, lsl ip
 c00:	4a250100 	bmi	941008 <startup-0x1f6beff8>
 c04:	02000000 	andeq	r0, r0, #0
 c08:	00007791 	muleq	r0, r1, r7
 c0c:	00047f0e 	andeq	r7, r4, lr, lsl #30
 c10:	f8100100 			; <UNDEFINED> instruction: 0xf8100100
 c14:	24200005 	strtcs	r0, [r0], #-5
 c18:	01000000 	mrseq	r0, (UNDEF: 0)
 c1c:	00043a9c 	muleq	r4, ip, sl
 c20:	04861700 	streq	r1, [r6], #1792	; 0x700
 c24:	10010000 	andne	r0, r1, r0
 c28:	00000081 	andeq	r0, r0, r1, lsl #1
 c2c:	00779102 	rsbseq	r9, r7, r2, lsl #2
 c30:	0004911a 	andeq	r9, r4, sl, lsl r1
 c34:	b40a0100 	strlt	r0, [sl], #-256	; 0xffffff00
 c38:	44200005 	strtmi	r0, [r0], #-5
 c3c:	01000000 	mrseq	r0, (UNDEF: 0)
 c40:	00045c9c 	muleq	r4, ip, ip
 c44:	00780f00 	rsbseq	r0, r8, r0, lsl #30
 c48:	00810a01 	addeq	r0, r1, r1, lsl #20
 c4c:	91020000 	mrsls	r0, (UNDEF: 2)
 c50:	2a1b0077 	bcs	6c0e34 <startup-0x1f93f1cc>
 c54:	01000005 	tsteq	r0, r5
 c58:	00057804 	andeq	r7, r5, r4, lsl #16
 c5c:	00003c20 	andeq	r3, r0, r0, lsr #24
 c60:	0f9c0100 	svceq	0x009c0100
 c64:	04010078 	streq	r0, [r1], #-120	; 0xffffff88
 c68:	00000081 	andeq	r0, r0, r1, lsl #1
 c6c:	00779102 	rsbseq	r9, r7, r2, lsl #2
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	00160200 	andseq	r0, r6, r0, lsl #4
  14:	0b3a0e03 	bleq	e83828 <startup-0x1f17c7d8>
  18:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  1c:	24030000 	strcs	r0, [r3], #-0
  20:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  24:	000e030b 	andeq	r0, lr, fp, lsl #6
  28:	00260400 	eoreq	r0, r6, r0, lsl #8
  2c:	00001349 	andeq	r1, r0, r9, asr #6
  30:	0b002405 	bleq	904c <startup-0x1fff6fb4>
  34:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  38:	06000008 	streq	r0, [r0], -r8
  3c:	0b0b0113 	bleq	2c0490 <startup-0x1fd3fb70>
  40:	0b3b0b3a 	bleq	ec2d30 <startup-0x1f13d2d0>
  44:	00001301 	andeq	r1, r0, r1, lsl #6
  48:	03000d07 	movweq	r0, #3335	; 0xd07
  4c:	3b0b3a0e 	blcc	2ce88c <startup-0x1fd31774>
  50:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  54:	0800000b 	stmdaeq	r0, {r0, r1, r3}
  58:	0b0b0117 	bleq	2c04bc <startup-0x1fd3fb44>
  5c:	0b3b0b3a 	bleq	ec2d4c <startup-0x1f13d2b4>
  60:	00001301 	andeq	r1, r0, r1, lsl #6
  64:	03000d09 	movweq	r0, #3337	; 0xd09
  68:	3b0b3a08 	blcc	2ce890 <startup-0x1fd31770>
  6c:	0013490b 	andseq	r4, r3, fp, lsl #18
  70:	000d0a00 	andeq	r0, sp, r0, lsl #20
  74:	00001349 	andeq	r1, r0, r9, asr #6
  78:	49000d0b 	stmdbmi	r0, {r0, r1, r3, r8, sl, fp}
  7c:	000b3813 	andeq	r3, fp, r3, lsl r8
  80:	00350c00 	eorseq	r0, r5, r0, lsl #24
  84:	00001349 	andeq	r1, r0, r9, asr #6
  88:	0b000f0d 	bleq	3cc4 <startup-0x1fffc33c>
  8c:	0013490b 	andseq	r4, r3, fp, lsl #18
  90:	01130e00 	tsteq	r3, r0, lsl #28
  94:	0b0b0e03 	bleq	2c38a8 <startup-0x1fd3c758>
  98:	0b3b0b3a 	bleq	ec2d88 <startup-0x1f13d278>
  9c:	00001301 	andeq	r1, r0, r1, lsl #6
  a0:	03000d0f 	movweq	r0, #3343	; 0xd0f
  a4:	3b0b3a08 	blcc	2ce8cc <startup-0x1fd31734>
  a8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  ac:	1000000b 	andne	r0, r0, fp
  b0:	13490101 	movtne	r0, #37121	; 0x9101
  b4:	00001301 	andeq	r1, r0, r1, lsl #6
  b8:	49002111 	stmdbmi	r0, {r0, r4, r8, sp}
  bc:	000b2f13 	andeq	r2, fp, r3, lsl pc
  c0:	01151200 	tsteq	r5, r0, lsl #4
  c4:	13011927 	movwne	r1, #6439	; 0x1927
  c8:	05130000 	ldreq	r0, [r3, #-0]
  cc:	00134900 	andseq	r4, r3, r0, lsl #18
  d0:	00341400 	eorseq	r1, r4, r0, lsl #8
  d4:	0b3a0e03 	bleq	e838e8 <startup-0x1f17c718>
  d8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  dc:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
  e0:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
  e4:	03193f01 	tsteq	r9, #1, 30
  e8:	3b0b3a0e 	blcc	2ce928 <startup-0x1fd316d8>
  ec:	1119270b 	tstne	r9, fp, lsl #14
  f0:	40061201 	andmi	r1, r6, r1, lsl #4
  f4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  f8:	00001301 	andeq	r1, r0, r1, lsl #6
  fc:	03000516 	movweq	r0, #1302	; 0x516
 100:	3b0b3a08 	blcc	2ce928 <startup-0x1fd316d8>
 104:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 108:	17000018 	smladne	r0, r8, r0, r0
 10c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 110:	0b3b0b3a 	bleq	ec2e00 <startup-0x1f13d200>
 114:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 118:	0b180000 	bleq	600120 <startup-0x1f9ffee0>
 11c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 120:	19000006 	stmdbne	r0, {r1, r2}
 124:	08030034 	stmdaeq	r3, {r2, r4, r5}
 128:	0b3b0b3a 	bleq	ec2e18 <startup-0x1f13d1e8>
 12c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 130:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
 134:	03193f01 	tsteq	r9, #1, 30
 138:	3b0b3a0e 	blcc	2ce978 <startup-0x1fd31688>
 13c:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 140:	00130119 	andseq	r0, r3, r9, lsl r1
 144:	00181b00 	andseq	r1, r8, r0, lsl #22
 148:	2e1c0000 	cdpcs	0, 1, cr0, cr12, cr0, {0}
 14c:	03193f01 	tsteq	r9, #1, 30
 150:	3b0b3a0e 	blcc	2ce990 <startup-0x1fd31670>
 154:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 158:	1d000019 	stcne	0, cr0, [r0, #-100]	; 0xffffff9c
 15c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 160:	0b3a0e03 	bleq	e83974 <startup-0x1f17c68c>
 164:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 168:	01111349 	tsteq	r1, r9, asr #6
 16c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 170:	01194296 			; <UNDEFINED> instruction: 0x01194296
 174:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
 178:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 17c:	0b3a0e03 	bleq	e83990 <startup-0x1f17c670>
 180:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 184:	06120111 			; <UNDEFINED> instruction: 0x06120111
 188:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 18c:	1f000019 	svcne	0x00000019
 190:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 194:	0b3a0e03 	bleq	e839a8 <startup-0x1f17c658>
 198:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 19c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1a0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 1a4:	00130119 	andseq	r0, r3, r9, lsl r1
 1a8:	002e2000 	eoreq	r2, lr, r0
 1ac:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1b0:	0b3b0b3a 	bleq	ec2ea0 <startup-0x1f13d160>
 1b4:	01111927 	tsteq	r1, r7, lsr #18
 1b8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1bc:	00194296 	mulseq	r9, r6, r2
 1c0:	002e2100 	eoreq	r2, lr, r0, lsl #2
 1c4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1c8:	0b3b0b3a 	bleq	ec2eb8 <startup-0x1f13d148>
 1cc:	01111927 	tsteq	r1, r7, lsr #18
 1d0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1d4:	00194297 	mulseq	r9, r7, r2
 1d8:	012e2200 			; <UNDEFINED> instruction: 0x012e2200
 1dc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1e0:	0b3b0b3a 	bleq	ec2ed0 <startup-0x1f13d130>
 1e4:	01111927 	tsteq	r1, r7, lsr #18
 1e8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1ec:	00194297 	mulseq	r9, r7, r2
 1f0:	00052300 	andeq	r2, r5, r0, lsl #6
 1f4:	0b3a0e03 	bleq	e83a08 <startup-0x1f17c5f8>
 1f8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 1fc:	00001802 	andeq	r1, r0, r2, lsl #16
 200:	01110100 	tsteq	r1, r0, lsl #2
 204:	0b130e25 	bleq	4c3aa0 <startup-0x1fb3c560>
 208:	01110e03 	tsteq	r1, r3, lsl #28
 20c:	17100612 			; <UNDEFINED> instruction: 0x17100612
 210:	16020000 	strne	r0, [r2], -r0
 214:	3a0e0300 	bcc	380e1c <startup-0x1fc7f1e4>
 218:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 21c:	03000013 	movweq	r0, #19
 220:	0b0b0024 	bleq	2c02b8 <startup-0x1fd3fd48>
 224:	0e030b3e 	vmoveq.16	d3[0], r0
 228:	26040000 	strcs	r0, [r4], -r0
 22c:	00134900 	andseq	r4, r3, r0, lsl #18
 230:	00240500 	eoreq	r0, r4, r0, lsl #10
 234:	0b3e0b0b 	bleq	f82e68 <startup-0x1f07d198>
 238:	00000803 	andeq	r0, r0, r3, lsl #16
 23c:	0b011306 	bleq	44e5c <startup-0x1ffbb1a4>
 240:	3b0b3a0b 	blcc	2cea74 <startup-0x1fd3158c>
 244:	0013010b 	andseq	r0, r3, fp, lsl #2
 248:	000d0700 	andeq	r0, sp, r0, lsl #14
 24c:	0b3a0e03 	bleq	e83a60 <startup-0x1f17c5a0>
 250:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 254:	00000b38 	andeq	r0, r0, r8, lsr fp
 258:	03000d08 	movweq	r0, #3336	; 0xd08
 25c:	3b0b3a08 	blcc	2cea84 <startup-0x1fd3157c>
 260:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 264:	0900000b 	stmdbeq	r0, {r0, r1, r3}
 268:	13490035 	movtne	r0, #36917	; 0x9035
 26c:	0f0a0000 	svceq	0x000a0000
 270:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 274:	0b000013 	bleq	2c8 <startup-0x1ffffd38>
 278:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 27c:	0b3a0e03 	bleq	e83a90 <startup-0x1f17c570>
 280:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 284:	06120111 			; <UNDEFINED> instruction: 0x06120111
 288:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 28c:	00130119 	andseq	r0, r3, r9, lsl r1
 290:	00050c00 	andeq	r0, r5, r0, lsl #24
 294:	0b3a0803 	bleq	e822a8 <startup-0x1f17dd58>
 298:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 29c:	00001802 	andeq	r1, r0, r2, lsl #16
 2a0:	11010b0d 	tstne	r1, sp, lsl #22
 2a4:	00061201 	andeq	r1, r6, r1, lsl #4
 2a8:	00340e00 	eorseq	r0, r4, r0, lsl #28
 2ac:	0b3a0e03 	bleq	e83ac0 <startup-0x1f17c540>
 2b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 2b4:	00001802 	andeq	r1, r0, r2, lsl #16
 2b8:	3f002e0f 	svccc	0x00002e0f
 2bc:	3a0e0319 	bcc	380f28 <startup-0x1fc7f0d8>
 2c0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 2c4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 2c8:	96184006 	ldrls	r4, [r8], -r6
 2cc:	00001942 	andeq	r1, r0, r2, asr #18
 2d0:	3f012e10 	svccc	0x00012e10
 2d4:	3a0e0319 	bcc	380f40 <startup-0x1fc7f0c0>
 2d8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 2dc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 2e0:	97184006 	ldrls	r4, [r8, -r6]
 2e4:	00001942 	andeq	r1, r0, r2, asr #18
 2e8:	03003411 	movweq	r3, #1041	; 0x411
 2ec:	3b0b3a08 	blcc	2ceb14 <startup-0x1fd314ec>
 2f0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 2f4:	00000018 	andeq	r0, r0, r8, lsl r0
 2f8:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 2fc:	030b130e 	movweq	r1, #45838	; 0xb30e
 300:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 304:	00171006 	andseq	r1, r7, r6
 308:	00160200 	andseq	r0, r6, r0, lsl #4
 30c:	0b3a0e03 	bleq	e83b20 <startup-0x1f17c4e0>
 310:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 314:	24030000 	strcs	r0, [r3], #-0
 318:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 31c:	000e030b 	andeq	r0, lr, fp, lsl #6
 320:	00260400 	eoreq	r0, r6, r0, lsl #8
 324:	00001349 	andeq	r1, r0, r9, asr #6
 328:	0b002405 	bleq	9344 <startup-0x1fff6cbc>
 32c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 330:	06000008 	streq	r0, [r0], -r8
 334:	0b0b0113 	bleq	2c0788 <startup-0x1fd3f878>
 338:	0b3b0b3a 	bleq	ec3028 <startup-0x1f13cfd8>
 33c:	00001301 	andeq	r1, r0, r1, lsl #6
 340:	03000d07 	movweq	r0, #3335	; 0xd07
 344:	3b0b3a0e 	blcc	2ceb84 <startup-0x1fd3147c>
 348:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 34c:	0800000b 	stmdaeq	r0, {r0, r1, r3}
 350:	0b0b0117 	bleq	2c07b4 <startup-0x1fd3f84c>
 354:	0b3b0b3a 	bleq	ec3044 <startup-0x1f13cfbc>
 358:	00001301 	andeq	r1, r0, r1, lsl #6
 35c:	03000d09 	movweq	r0, #3337	; 0xd09
 360:	3b0b3a08 	blcc	2ceb88 <startup-0x1fd31478>
 364:	0013490b 	andseq	r4, r3, fp, lsl #18
 368:	000d0a00 	andeq	r0, sp, r0, lsl #20
 36c:	00001349 	andeq	r1, r0, r9, asr #6
 370:	49000d0b 	stmdbmi	r0, {r0, r1, r3, r8, sl, fp}
 374:	000b3813 	andeq	r3, fp, r3, lsl r8
 378:	00350c00 	eorseq	r0, r5, r0, lsl #24
 37c:	00001349 	andeq	r1, r0, r9, asr #6
 380:	0b000f0d 	bleq	3fbc <startup-0x1fffc044>
 384:	0013490b 	andseq	r4, r3, fp, lsl #18
 388:	012e0e00 			; <UNDEFINED> instruction: 0x012e0e00
 38c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 390:	0b3b0b3a 	bleq	ec3080 <startup-0x1f13cf80>
 394:	01111927 	tsteq	r1, r7, lsr #18
 398:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 39c:	01194296 			; <UNDEFINED> instruction: 0x01194296
 3a0:	0f000013 	svceq	0x00000013
 3a4:	08030005 	stmdaeq	r3, {r0, r2}
 3a8:	0b3b0b3a 	bleq	ec3098 <startup-0x1f13cf68>
 3ac:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 3b0:	34100000 	ldrcc	r0, [r0], #-0
 3b4:	3a080300 	bcc	200fbc <startup-0x1fdff044>
 3b8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3bc:	00180213 	andseq	r0, r8, r3, lsl r2
 3c0:	00341100 	eorseq	r1, r4, r0, lsl #2
 3c4:	0b3a0e03 	bleq	e83bd8 <startup-0x1f17c428>
 3c8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 3cc:	00001802 	andeq	r1, r0, r2, lsl #16
 3d0:	3f012e12 	svccc	0x00012e12
 3d4:	3a0e0319 	bcc	381040 <startup-0x1fc7efc0>
 3d8:	110b3b0b 	tstne	fp, fp, lsl #22
 3dc:	40061201 	andmi	r1, r6, r1, lsl #4
 3e0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 3e4:	00001301 	andeq	r1, r0, r1, lsl #6
 3e8:	11010b13 	tstne	r1, r3, lsl fp
 3ec:	00061201 	andeq	r1, r6, r1, lsl #4
 3f0:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
 3f4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 3f8:	0b3b0b3a 	bleq	ec30e8 <startup-0x1f13cf18>
 3fc:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 400:	00001301 	andeq	r1, r0, r1, lsl #6
 404:	00001815 	andeq	r1, r0, r5, lsl r8
 408:	012e1600 			; <UNDEFINED> instruction: 0x012e1600
 40c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 410:	0b3b0b3a 	bleq	ec3100 <startup-0x1f13cf00>
 414:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 418:	05170000 	ldreq	r0, [r7, #-0]
 41c:	3a0e0300 	bcc	381024 <startup-0x1fc7efdc>
 420:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 424:	00180213 	andseq	r0, r8, r3, lsl r2
 428:	012e1800 			; <UNDEFINED> instruction: 0x012e1800
 42c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 430:	0b3b0b3a 	bleq	ec3120 <startup-0x1f13cee0>
 434:	13491927 	movtne	r1, #39207	; 0x9927
 438:	06120111 			; <UNDEFINED> instruction: 0x06120111
 43c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 440:	00130119 	andseq	r0, r3, r9, lsl r1
 444:	010b1900 	tsteq	fp, r0, lsl #18
 448:	00001755 	andeq	r1, r0, r5, asr r7
 44c:	3f012e1a 	svccc	0x00012e1a
 450:	3a0e0319 	bcc	3810bc <startup-0x1fc7ef44>
 454:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 458:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 45c:	97184006 	ldrls	r4, [r8, -r6]
 460:	13011942 	movwne	r1, #6466	; 0x1942
 464:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
 468:	03193f01 	tsteq	r9, #1, 30
 46c:	3b0b3a0e 	blcc	2cecac <startup-0x1fd31354>
 470:	1119270b 	tstne	r9, fp, lsl #14
 474:	40061201 	andmi	r1, r6, r1, lsl #4
 478:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 47c:	Address 0x0000047c is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	06750002 	ldrbteq	r0, [r5], -r2
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	200004cc 	andcs	r0, r0, ip, asr #9
  3c:	000000ac 	andeq	r0, r0, ip, lsr #1
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	07f60002 	ldrbeq	r0, [r6, r2]!
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20000578 	andcs	r0, r0, r8, ror r5
  5c:	00000518 	andeq	r0, r0, r8, lsl r5
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	200004c8 	andcs	r0, r0, r8, asr #9
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
  18:	000000c6 	andeq	r0, r0, r6, asr #1
  1c:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  20:	000000f2 	strdeq	r0, [r0], -r2
  24:	000000f4 	strdeq	r0, [r0], -r4
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000001e7 	andeq	r0, r0, r7, ror #3
   4:	00ad0002 	adceq	r0, sp, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	6a6c6566 	bvs	1b195c4 <startup-0x1e4e6a3c>
  28:	65442f6f 	strbvs	r2, [r4, #-3951]	; 0xfffff091
  2c:	6f746b73 	svcvs	0x00746b73
  30:	72612f70 	rsbvc	r2, r1, #112, 30	; 0x1c0
  34:	7373616d 	cmnvc	r3, #1073741851	; 0x4000001b
  38:	6c626d65 	stclvs	13, cr6, [r2], #-404	; 0xfffffe6c
  3c:	632f7265 			; <UNDEFINED> instruction: 0x632f7265
  40:	5f65646f 	svcpl	0x0065646f
  44:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
  48:	6172672f 	cmnvs	r2, pc, lsr #14
  4c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
  50:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
  54:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
  58:	6172672f 	cmnvs	r2, pc, lsr #14
  5c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
  60:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
  64:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
  68:	6172672f 	cmnvs	r2, pc, lsr #14
  6c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
  70:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
  74:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
  78:	626f0000 	rsbvs	r0, pc, #0
  7c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
  80:	0100682e 	tsteq	r0, lr, lsr #16
  84:	74730000 	ldrbtvc	r0, [r3], #-0
  88:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  8c:	00632e70 	rsbeq	r2, r3, r0, ror lr
  90:	74000001 	strvc	r0, [r0], #-1
  94:	73657079 	cmnvc	r5, #121	; 0x79
  98:	0100682e 	tsteq	r0, lr, lsr #16
  9c:	70670000 	rsbvc	r0, r7, r0
  a0:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
  a4:	00000100 	andeq	r0, r0, r0, lsl #2
  a8:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; ffffff14 <ballGeometry+0xdffff458>
  ac:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
  b0:	0100682e 	tsteq	r0, lr, lsr #16
  b4:	00000000 	andeq	r0, r0, r0
  b8:	00100205 	andseq	r0, r0, r5, lsl #4
  bc:	11032000 	mrsne	r2, (UNDEF: 3)
  c0:	4b4bbb01 	blmi	12eeccc <startup-0x1ed11334>
  c4:	c9594b4d 	ldmdbgt	r9, {r0, r2, r3, r6, r8, r9, fp, lr}^
  c8:	040200ca 	streq	r0, [r2], #-202	; 0xffffff36
  cc:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
  d0:	0200929f 	andeq	r9, r0, #-268435447	; 0xf0000009
  d4:	58060104 	stmdapl	r6, {r2, r8}
  d8:	59929f06 	ldmibpl	r2, {r1, r2, r8, r9, sl, fp, ip, pc}
  dc:	15030204 	strne	r0, [r3, #-516]	; 0xfffffdfc
  e0:	313d304a 	teqcc	sp, sl, asr #32
  e4:	4b3e3d3d 	blmi	f8f5e0 <startup-0x1f070a20>
  e8:	bd756759 	ldcllt	7, cr6, [r5, #-356]!	; 0xfffffe9c
  ec:	673f2f36 			; <UNDEFINED> instruction: 0x673f2f36
  f0:	2f68f33d 	svccs	0x0068f33d
  f4:	2f3d5b3d 	svccs	0x003d5b3d
  f8:	6931312f 	ldmdbvs	r1!, {r0, r1, r2, r3, r5, r8, ip, sp}
  fc:	4c854b5a 	vstmiami	r5, {d4-<overflow reg d48>}
 100:	4c774c85 	ldclmi	12, cr4, [r7], #-532	; 0xfffffdec
 104:	69035969 	stmdbvs	r3, {r0, r3, r5, r6, r8, fp, ip, lr}
 108:	3c1b033c 	ldccc	3, cr0, [fp], {60}	; 0x3c
 10c:	594b3d3d 	stmdbpl	fp, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}^
 110:	4b674b5a 	blmi	19d2e80 <startup-0x1e62d180>
 114:	04020091 	streq	r0, [r2], #-145	; 0xffffff6f
 118:	02003e02 	andeq	r3, r0, #2, 28
 11c:	7a030204 	bvc	c0934 <startup-0x1ff3f6cc>
 120:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
 124:	00580601 	subseq	r0, r8, r1, lsl #12
 128:	06020402 	streq	r0, [r2], -r2, lsl #8
 12c:	04020046 	streq	r0, [r2], #-70	; 0xffffffba
 130:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
 134:	2f4a0d03 	svccs	0x004a0d03
 138:	2f2f3d4d 	svccs	0x002f3d4d
 13c:	02003131 	andeq	r3, r0, #1073741836	; 0x4000000c
 140:	006a0104 	rsbeq	r0, sl, r4, lsl #2
 144:	59010402 	stmdbpl	r1, {r1, sl}
 148:	01040200 	mrseq	r0, R12_usr
 14c:	2f3e513a 	svccs	0x003e513a
 150:	02003131 	andeq	r3, r0, #1073741836	; 0x4000000c
 154:	003e0304 	eorseq	r0, lr, r4, lsl #6
 158:	72030402 	andvc	r0, r3, #33554432	; 0x2000000
 15c:	01040200 	mrseq	r0, R12_usr
 160:	40063c06 	andmi	r3, r6, r6, lsl #24
 164:	03040200 	movweq	r0, #16896	; 0x4200
 168:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
 16c:	02007203 	andeq	r7, r0, #805306368	; 0x30000000
 170:	3c060104 	stfccs	f0, [r6], {4}
 174:	005a4106 	subseq	r4, sl, r6, lsl #2
 178:	3e030402 	cdpcc	4, 0, cr0, cr3, cr2, {0}
 17c:	03040200 	movweq	r0, #16896	; 0x4200
 180:	04020072 	streq	r0, [r2], #-114	; 0xffffff8e
 184:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 188:	04020040 	streq	r0, [r2], #-64	; 0xffffffc0
 18c:	02003e03 	andeq	r3, r0, #3, 28	; 0x30
 190:	00720304 	rsbseq	r0, r2, r4, lsl #6
 194:	06010402 	streq	r0, [r1], -r2, lsl #8
 198:	4d40063c 	stclmi	6, cr0, [r0, #-240]	; 0xffffff10
 19c:	005a3d4b 	subseq	r3, sl, fp, asr #26
 1a0:	3e030402 	cdpcc	4, 0, cr0, cr3, cr2, {0}
 1a4:	03040200 	movweq	r0, #16896	; 0x4200
 1a8:	040200c9 	streq	r0, [r2], #-201	; 0xffffff37
 1ac:	00550803 	subseq	r0, r5, r3, lsl #16
 1b0:	06010402 	streq	r0, [r1], -r2, lsl #8
 1b4:	4d6b063c 	stclmi	6, cr0, [fp, #-240]!	; 0xffffff10
 1b8:	005a3d4b 	subseq	r3, sl, fp, asr #26
 1bc:	3e030402 	cdpcc	4, 0, cr0, cr3, cr2, {0}
 1c0:	03040200 	movweq	r0, #16896	; 0x4200
 1c4:	040200c9 	streq	r0, [r2], #-201	; 0xffffff37
 1c8:	00550803 	subseq	r0, r5, r3, lsl #16
 1cc:	06010402 	streq	r0, [r1], -r2, lsl #8
 1d0:	026b063c 	rsbeq	r0, fp, #60, 12	; 0x3c00000
 1d4:	01010006 	tsteq	r1, r6
 1d8:	05000204 	streq	r0, [r0, #-516]	; 0xfffffdfc
 1dc:	00000002 	andeq	r0, r0, r2
 1e0:	012e0320 			; <UNDEFINED> instruction: 0x012e0320
 1e4:	03025e13 	movweq	r5, #11795	; 0x2e13
 1e8:	d9010100 	stmdble	r1, {r8}
 1ec:	02000000 	andeq	r0, r0, #0
 1f0:	00009200 	andeq	r9, r0, r0, lsl #4
 1f4:	fb010200 	blx	409fe <startup-0x1ffbf602>
 1f8:	01000d0e 	tsteq	r0, lr, lsl #26
 1fc:	00010101 	andeq	r0, r1, r1, lsl #2
 200:	00010000 	andeq	r0, r1, r0
 204:	3a430100 	bcc	10c060c <startup-0x1ef3f9f4>
 208:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 20c:	662f7372 			; <UNDEFINED> instruction: 0x662f7372
 210:	6f6a6c65 	svcvs	0x006a6c65
 214:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 218:	706f746b 	rsbvc	r7, pc, fp, ror #8
 21c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 220:	65737361 	ldrbvs	r7, [r3, #-865]!	; 0xfffffc9f
 224:	656c626d 	strbvs	r6, [ip, #-621]!	; 0xfffffd93
 228:	6f632f72 	svcvs	0x00632f72
 22c:	6c5f6564 	cfldr64vs	mvdx6, [pc], {100}	; 0x64
 230:	2f657469 	svccs	0x00657469
 234:	70617267 	rsbvc	r7, r1, r7, ror #4
 238:	5f636968 	svcpl	0x00636968
 23c:	70736964 	rsbsvc	r6, r3, r4, ror #18
 240:	2f79616c 	svccs	0x0079616c
 244:	70617267 	rsbvc	r7, r1, r7, ror #4
 248:	5f636968 	svcpl	0x00636968
 24c:	70736964 	rsbsvc	r6, r3, r4, ror #18
 250:	2f79616c 	svccs	0x0079616c
 254:	70617267 	rsbvc	r7, r1, r7, ror #4
 258:	5f636968 	svcpl	0x00636968
 25c:	70736964 	rsbsvc	r6, r3, r4, ror #18
 260:	0079616c 	rsbseq	r6, r9, ip, ror #2
 264:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 268:	632e7961 			; <UNDEFINED> instruction: 0x632e7961
 26c:	00000100 	andeq	r0, r0, r0, lsl #2
 270:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 274:	00682e73 	rsbeq	r2, r8, r3, ror lr
 278:	64000001 	strvs	r0, [r0], #-1
 27c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 280:	0100682e 	tsteq	r0, lr, lsr #16
 284:	00000000 	andeq	r0, r0, r0
 288:	04cc0205 	strbeq	r0, [ip], #517	; 0x205
 28c:	3d172000 	ldccc	0, cr2, [r7, #-0]
 290:	3d3d3d2f 	ldccc	13, cr3, [sp, #-188]!	; 0xffffff44
 294:	403d3e3d 	eorsmi	r3, sp, sp, lsr lr
 298:	2f2f773d 	svccs	0x002f773d
 29c:	004b3f2f 	subeq	r3, fp, pc, lsr #30
 2a0:	3e030402 	cdpcc	4, 0, cr0, cr3, cr2, {0}
 2a4:	03040200 	movweq	r0, #16896	; 0x4200
 2a8:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
 2ac:	02002f03 	andeq	r2, r0, #3, 30
 2b0:	002f0304 	eoreq	r0, pc, r4, lsl #6
 2b4:	29030402 	stmdbcs	r3, {r1, sl}
 2b8:	01040200 	mrseq	r0, R12_usr
 2bc:	51063c06 	tstpl	r6, r6, lsl #24
 2c0:	02754f4d 	rsbseq	r4, r5, #308	; 0x134
 2c4:	01010004 	tsteq	r1, r4
 2c8:	0000015d 	andeq	r0, r0, sp, asr r1
 2cc:	009a0002 	addseq	r0, sl, r2
 2d0:	01020000 	mrseq	r0, (UNDEF: 2)
 2d4:	000d0efb 	strdeq	r0, [sp], -fp
 2d8:	01010101 	tsteq	r1, r1, lsl #2
 2dc:	01000000 	mrseq	r0, (UNDEF: 0)
 2e0:	43010000 	movwmi	r0, #4096	; 0x1000
 2e4:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 2e8:	2f737265 	svccs	0x00737265
 2ec:	6a6c6566 	bvs	1b1988c <startup-0x1e4e6774>
 2f0:	65442f6f 	strbvs	r2, [r4, #-3951]	; 0xfffff091
 2f4:	6f746b73 	svcvs	0x00746b73
 2f8:	72612f70 	rsbvc	r2, r1, #112, 30	; 0x1c0
 2fc:	7373616d 	cmnvc	r3, #1073741851	; 0x4000001b
 300:	6c626d65 	stclvs	13, cr6, [r2], #-404	; 0xfffffe6c
 304:	632f7265 			; <UNDEFINED> instruction: 0x632f7265
 308:	5f65646f 	svcpl	0x0065646f
 30c:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 310:	6172672f 	cmnvs	r2, pc, lsr #14
 314:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 318:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
 31c:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 320:	6172672f 	cmnvs	r2, pc, lsr #14
 324:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 328:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
 32c:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 330:	6172672f 	cmnvs	r2, pc, lsr #14
 334:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 338:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
 33c:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 340:	72670000 	rsbvc	r0, r7, #0
 344:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 348:	73696463 	cmnvc	r9, #1660944384	; 0x63000000
 34c:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 350:	0100632e 	tsteq	r0, lr, lsr #6
 354:	79740000 	ldmdbvc	r4!, {}^	; <UNPREDICTABLE>
 358:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
 35c:	00010068 	andeq	r0, r1, r8, rrx
 360:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 364:	00682e6f 	rsbeq	r2, r8, pc, ror #28
 368:	00000001 	andeq	r0, r0, r1
 36c:	78020500 	stmdavc	r2, {r8, sl}
 370:	16200005 	strtne	r0, [r0], -r5
 374:	77839167 	strvc	r9, [r3, r7, ror #2]
 378:	6983d767 	stmibvs	r3, {r0, r1, r2, r5, r6, r8, r9, sl, ip, lr, pc}
 37c:	4d593d67 	ldclmi	13, cr3, [r9, #-412]	; 0xfffffe64
 380:	3d3e3e3d 	ldccc	14, cr3, [lr, #-244]!	; 0xffffff0c
 384:	2f3d323e 	svccs	0x003d323e
 388:	032f3d75 			; <UNDEFINED> instruction: 0x032f3d75
 38c:	24284a7a 	strtcs	r4, [r8], #-2682	; 0xfffff586
 390:	67a13d3d 			; <UNDEFINED> instruction: 0x67a13d3d
 394:	593e3e3e 	ldmdbpl	lr!, {r1, r2, r3, r4, r5, r9, sl, fp, ip, sp}
 398:	5a303d30 	bpl	c0f860 <startup-0x1f3f07a0>
 39c:	3d4c3f3e 	stclcc	15, cr3, [ip, #-248]	; 0xffffff08
 3a0:	303d4c30 	eorscc	r4, sp, r0, lsr ip
 3a4:	5967af3d 	stmdbpl	r7!, {r0, r2, r3, r4, r5, r8, r9, sl, fp, sp, pc}^
 3a8:	4c914d67 	ldcmi	13, cr4, [r1], {103}	; 0x67
 3ac:	303e305a 	eorscc	r3, lr, sl, asr r0
 3b0:	303d5a3e 	eorscc	r5, sp, lr, lsr sl
 3b4:	3d313d5a 	ldccc	13, cr3, [r1, #-360]!	; 0xfffffe98
 3b8:	91693d3e 	cmnls	r9, lr, lsr sp
 3bc:	833e5a3e 	teqhi	lr, #253952	; 0x3e000
 3c0:	5a3e914d 	bpl	fa48fc <startup-0x1f05b704>
 3c4:	4d833e3d 	stcmi	14, cr3, [r3, #244]	; 0xf4
 3c8:	3d3e3d2f 	ldccc	13, cr3, [lr, #-188]!	; 0xffffff44
 3cc:	4b4b3e3e 	blmi	12cfccc <startup-0x1ed30334>
 3d0:	3d4b4b4b 	vstrcc	d20, [fp, #-300]	; 0xfffffed4
 3d4:	9f4c3e3f 	svcls	0x004c3e3f
 3d8:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 3dc:	02004c03 	andeq	r4, r0, #768	; 0x300
 3e0:	00480304 	subeq	r0, r8, r4, lsl #6
 3e4:	06010402 	streq	r0, [r1], -r2, lsl #8
 3e8:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
 3ec:	00460602 	subeq	r0, r6, r2, lsl #12
 3f0:	06010402 	streq	r0, [r1], -r2, lsl #8
 3f4:	09030658 	stmdbeq	r3, {r3, r4, r6, r9, sl}
 3f8:	00e54d4a 	rsceq	r4, r5, sl, asr #26
 3fc:	06010402 	streq	r0, [r1], -r2, lsl #8
 400:	005b0658 	subseq	r0, fp, r8, asr r6
 404:	06010402 	streq	r0, [r1], -r2, lsl #8
 408:	ad5b0658 	ldclge	6, cr0, [fp, #-352]	; 0xfffffea0
 40c:	794c2208 	stmdbvc	ip, {r3, r9, sp}^
 410:	4b784b4c 	blmi	1e13148 <startup-0x1e1eceb8>
 414:	a0d8c969 	sbcsge	ip, r8, r9, ror #18
 418:	9fae4bca 	svcls	0x00ae4bca
 41c:	585a039f 	ldmdapl	sl, {r0, r1, r2, r3, r4, r7, r8, r9}^
 420:	20240331 	eorcs	r0, r4, r1, lsr r3
 424:	01000602 	tsteq	r0, r2, lsl #12
 428:	Address 0x00000428 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	78736f70 	ldmdavc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
   4:	50534f00 	subspl	r4, r3, r0, lsl #30
   8:	52444545 	subpl	r4, r4, #289406976	; 0x11400000
   c:	6d696400 	cfstrdvs	mvd6, [r9, #-0]
  10:	69736e65 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
  14:	69536e6f 	ldmdbvs	r3, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
  18:	6300657a 	movwvs	r6, #1402	; 0x57a
  1c:	6d756c6f 	ldclvs	12, cr6, [r5, #-444]!	; 0xfffffe44
  20:	6f63006e 	svcvs	0x0063006e
  24:	6e6d756c 	cdpvs	5, 6, cr7, cr13, cr12, {3}
  28:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
  2c:	75610065 	strbvc	r0, [r1, #-101]!	; 0xffffff9b
  30:	6f706f74 	svcvs	0x00706f74
  34:	4700676e 	strmi	r6, [r0, -lr, ror #14]
  38:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
  3c:	36203939 			; <UNDEFINED> instruction: 0x36203939
  40:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
  44:	31303220 	teqcc	r0, r0, lsr #4
  48:	31323037 	teqcc	r2, r7, lsr r0
  4c:	72282035 	eorvc	r2, r8, #53	; 0x35
  50:	61656c65 	cmnvs	r5, r5, ror #24
  54:	20296573 	eorcs	r6, r9, r3, ror r5
  58:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
  5c:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
  60:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
  64:	2d362d64 	ldccs	13, cr2, [r6, #-400]!	; 0xfffffe70
  68:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  6c:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
  70:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  74:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  78:	35353432 	ldrcc	r3, [r5, #-1074]!	; 0xfffffbce
  7c:	205d3231 	subscs	r3, sp, r1, lsr r2
  80:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  84:	20626d75 	rsbcs	r6, r2, r5, ror sp
  88:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
  8c:	613d6863 	teqvs	sp, r3, ror #16
  90:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
  94:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
  98:	6f6c666d 	svcvs	0x006c666d
  9c:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
  a0:	733d6962 	teqvc	sp, #1605632	; 0x188000
  a4:	2074666f 	rsbscs	r6, r4, pc, ror #12
  a8:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  ac:	20626d75 	rsbcs	r6, r2, r5, ror sp
  b0:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
  b4:	613d6863 	teqvs	sp, r3, ror #16
  b8:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
  bc:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
  c0:	4f2d2067 	svcmi	0x002d2067
  c4:	732d2030 			; <UNDEFINED> instruction: 0x732d2030
  c8:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
  cc:	62003939 	andvs	r3, r0, #933888	; 0xe4000
  d0:	006c6c61 	rsbeq	r6, ip, r1, ror #24
  d4:	75706e69 	ldrbvc	r6, [r0, #-3689]!	; 0xfffff197
  d8:	69730074 	ldmdbvs	r3!, {r2, r4, r5, r6}^
  dc:	7974657a 	ldmdbvc	r4!, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
  e0:	4c006570 	cfstr32mi	mvfx6, [r0], {112}	; 0x70
  e4:	524b434f 	subpl	r4, fp, #1006632961	; 0x3c000001
  e8:	0036315f 	eorseq	r3, r6, pc, asr r1
  ec:	6e69616d 	powvsez	f6, f1, #5.0
  f0:	74636100 	strbtvc	r6, [r3], #-256	; 0xffffff00
  f4:	4b657669 	blmi	195daa0 <startup-0x1e6a2560>
  f8:	75007965 	strvc	r7, [r0, #-2405]	; 0xfffff69b
  fc:	38746e69 	ldmdacc	r4!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
 100:	4900635f 	stmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, r9, sp, lr}
 104:	4c5f5244 	lfmmi	f5, 2, [pc], {68}	; 0x44
 108:	7500574f 	strvc	r5, [r0, #-1871]	; 0xfffff8b1
 10c:	74616470 	strbtvc	r6, [r1], #-1136	; 0xfffffb90
 110:	626f5f65 	rsbvs	r5, pc, #404	; 0x194
 114:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 118:	6f687300 	svcvs	0x00687300
 11c:	69207472 	stmdbvs	r0!, {r1, r4, r5, r6, sl, ip, sp, lr}
 120:	6400746e 	strvs	r7, [r0], #-1134	; 0xfffffb92
 124:	54776172 	ldrbtpl	r6, [r7], #-370	; 0xfffffe8e
 128:	00747365 	rsbseq	r7, r4, r5, ror #6
 12c:	70617267 	rsbvc	r7, r1, r7, ror #4
 130:	5f636968 	svcpl	0x00636968
 134:	61656c63 	cmnvs	r5, r3, ror #24
 138:	63735f72 	cmnvs	r3, #456	; 0x1c8
 13c:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
 140:	6e697500 	cdpvs	5, 6, cr7, cr9, cr0, {0}
 144:	00363174 	eorseq	r3, r6, r4, ror r1
 148:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff70d <ballGeometry+0xdfffec51>
 14c:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 150:	6c65662f 	stclvs	6, cr6, [r5], #-188	; 0xffffff44
 154:	442f6f6a 	strtmi	r6, [pc], #-3946	; 15c <startup-0x1ffffea4>
 158:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
 15c:	612f706f 			; <UNDEFINED> instruction: 0x612f706f
 160:	73616d72 	cmnvc	r1, #7296	; 0x1c80
 164:	626d6573 	rsbvs	r6, sp, #482344960	; 0x1cc00000
 168:	2f72656c 	svccs	0x0072656c
 16c:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 170:	74696c5f 	strbtvc	r6, [r9], #-3167	; 0xfffff3a1
 174:	72672f65 	rsbvc	r2, r7, #404	; 0x194
 178:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 17c:	69645f63 	stmdbvs	r4!, {r0, r1, r5, r6, r8, r9, sl, fp, ip, lr}^
 180:	616c7073 	smcvs	50947	; 0xc703
 184:	72672f79 	rsbvc	r2, r7, #484	; 0x1e4
 188:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 18c:	69645f63 	stmdbvs	r4!, {r0, r1, r5, r6, r8, r9, sl, fp, ip, lr}^
 190:	616c7073 	smcvs	50947	; 0xc703
 194:	72672f79 	rsbvc	r2, r7, #484	; 0x1e4
 198:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 19c:	69645f63 	stmdbvs	r4!, {r0, r1, r5, r6, r8, r9, sl, fp, ip, lr}^
 1a0:	616c7073 	smcvs	50947	; 0xc703
 1a4:	74732f79 	ldrbtvc	r2, [r3], #-3961	; 0xfffff087
 1a8:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 1ac:	00632e70 	rsbeq	r2, r3, r0, ror lr
 1b0:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
 1b4:	626f0038 	rsbvs	r0, pc, #56	; 0x38
 1b8:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 1bc:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 1c0:	544f006c 	strbpl	r0, [pc], #-108	; 1c8 <startup-0x1ffffe38>
 1c4:	52455059 	subpl	r5, r5, #89	; 0x59
 1c8:	736f7000 	cmnvc	pc, #0
 1cc:	70670079 	rsbvc	r0, r7, r9, ror r0
 1d0:	6f506f69 	svcvs	0x00506f69
 1d4:	64007472 	strvs	r7, [r0], #-1138	; 0xfffffb8e
 1d8:	00787269 	rsbseq	r7, r8, r9, ror #4
 1dc:	44505550 	ldrbmi	r5, [r0], #-1360	; 0xfffffab0
 1e0:	61620052 	qdsubvs	r0, r2, r2
 1e4:	65476c6c 	strbvs	r6, [r7, #-3180]	; 0xfffff394
 1e8:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
 1ec:	52007972 	andpl	r7, r0, #1867776	; 0x1c8000
 1f0:	4c5f5345 	mrrcmi	3, 4, r5, pc, cr5	; <UNPREDICTABLE>
 1f4:	524b434f 	subpl	r4, fp, #1006632961	; 0x3c000001
 1f8:	52534200 	subspl	r4, r3, #0, 4
 1fc:	45520052 	ldrbmi	r0, [r2, #-82]	; 0xffffffae
 200:	444f5f53 	strbmi	r5, [pc], #-3923	; 208 <startup-0x1ffffdf8>
 204:	4f4d0052 	svcmi	0x004d0052
 208:	00524544 	subseq	r4, r2, r4, asr #10
 20c:	6279656b 	rsbsvs	r6, r9, #448790528	; 0x1ac00000
 210:	53455200 	movtpl	r5, #20992	; 0x5200
 214:	00544f5f 	subseq	r4, r4, pc, asr pc
 218:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 21c:	69730078 	ldmdbvs	r3!, {r3, r4, r5, r6}^
 220:	0079657a 	rsbseq	r6, r9, sl, ror r5
 224:	5f52444f 	svcpl	0x0052444f
 228:	00574f4c 	subseq	r4, r7, ip, asr #30
 22c:	5f52444f 	svcpl	0x0052444f
 230:	48474948 	stmdami	r7, {r3, r6, r8, fp, lr}^
 234:	6f654700 	svcvs	0x00654700
 238:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
 23c:	72745079 	rsbsvc	r5, r4, #121	; 0x79
 240:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 244:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 18a <startup-0x1ffffe76>	; <UNPREDICTABLE>
 248:	696c6c69 	stmdbvs	ip!, {r0, r3, r5, r6, sl, fp, sp, lr}^
 24c:	65707300 	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
 250:	00786465 	rsbseq	r6, r8, r5, ror #8
 254:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 258:	6e007964 	vmlsvs.f16	s14, s0, s9	; <UNPREDICTABLE>
 25c:	6f706d75 	svcvs	0x00706d75
 260:	73746e69 	cmnvc	r4, #1680	; 0x690
 264:	736e7500 	cmnvc	lr, #0, 10
 268:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 26c:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
 270:	75007261 	strvc	r7, [r0, #-609]	; 0xfffffd9f
 274:	31746e69 	cmncc	r4, r9, ror #28
 278:	00635f36 	rsbeq	r5, r3, r6, lsr pc
 27c:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 280:	65746176 	ldrbvs	r6, [r4, #-374]!	; 0xfffffe8a
 284:	00776f52 	rsbseq	r6, r7, r2, asr pc
 288:	31524641 	cmpcc	r2, r1, asr #12
 28c:	52464100 	subpl	r4, r6, #0, 2
 290:	50740032 	rsbspl	r0, r4, r2, lsr r0
 294:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 298:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
 29c:	6a626f5f 	bvs	189c020 <startup-0x1e763fe0>
 2a0:	5f746365 	svcpl	0x00746365
 2a4:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 2a8:	72640064 	rsbvc	r0, r4, #100	; 0x64
 2ac:	6f5f7761 	svcvs	0x005f7761
 2b0:	63656a62 	cmnvs	r5, #401408	; 0x62000
 2b4:	61620074 	smcvs	8196	; 0x2004
 2b8:	74536c6c 	ldrbvc	r6, [r3], #-3180	; 0xfffff394
 2bc:	69726565 	ldmdbvs	r2!, {r0, r2, r5, r6, r8, sl, sp, lr}^
 2c0:	6400676e 	strvs	r6, [r0], #-1902	; 0xfffff892
 2c4:	00797269 	rsbseq	r7, r9, r9, ror #4
 2c8:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
 2cc:	6e752074 	mrcvs	0, 3, r2, cr5, cr4, {3}
 2d0:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 2d4:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
 2d8:	6900746e 	stmdbvs	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
 2dc:	5f74696e 	svcpl	0x0074696e
 2e0:	00707061 	rsbseq	r7, r0, r1, rrx
 2e4:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 2e8:	6a626f00 	bvs	189bef0 <startup-0x1e764110>
 2ec:	47746365 	ldrbmi	r6, [r4, -r5, ror #6]!
 2f0:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 2f4:	00797274 	rsbseq	r7, r9, r4, ror r2
 2f8:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 2fc:	6f436576 	svcvs	0x00436576
 300:	6e6d756c 	cdpvs	5, 6, cr7, cr13, cr12, {3}
 304:	6c616200 	sfmvs	f6, 2, [r1], #-0
 308:	4272656c 	rsbsmi	r6, r2, #108, 10	; 0x1b000000
 30c:	006c6c61 	rsbeq	r6, ip, r1, ror #24
 310:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
 314:	73003233 	movwvc	r3, #563	; 0x233
 318:	735f7465 	cmpvc	pc, #1694498816	; 0x65000000
 31c:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 320:	53455200 	movtpl	r5, #20992	; 0x5200
 324:	5244495f 	subpl	r4, r4, #1556480	; 0x17c000
 328:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
 32c:	6f5f7261 	svcvs	0x005f7261
 330:	63656a62 	cmnvs	r5, #401408	; 0x62000
 334:	65720074 	ldrbvs	r0, [r2, #-116]!	; 0xffffff8c
 338:	6f436461 	svcvs	0x00436461
 33c:	6e6d756c 	cdpvs	5, 6, cr7, cr13, cr12, {3}
 340:	44490073 	strbmi	r0, [r9], #-115	; 0xffffff8d
 344:	49485f52 	stmdbmi	r8, {r1, r4, r6, r8, r9, sl, fp, ip, lr}^
 348:	67004847 	strvs	r4, [r0, -r7, asr #16]
 34c:	506f6970 	rsbpl	r6, pc, r0, ror r9	; <UNPREDICTABLE>
 350:	4f007274 	svcmi	0x00007274
 354:	63656a62 	cmnvs	r5, #401408	; 0x62000
 358:	72745074 	rsbsvc	r5, r4, #116	; 0x74
 35c:	61747300 	cmnvs	r4, r0, lsl #6
 360:	70757472 	rsbsvc	r7, r5, r2, ror r4
 364:	624f7400 	subvs	r7, pc, #0, 8
 368:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 36c:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 370:	54430065 	strbpl	r0, [r3], #-101	; 0xffffff9b
 374:	435f4c52 	cmpmi	pc, #20992	; 0x5200
 378:	544e554f 	strbpl	r5, [lr], #-1359	; 0xfffffab1
 37c:	52544300 	subspl	r4, r4, #0, 6
 380:	6564004c 	strbvs	r0, [r4, #-76]!	; 0xffffffb4
 384:	5f79616c 	svcpl	0x0079616c
 388:	6e303532 	mrcvs	5, 1, r3, cr0, cr2, {1}
 38c:	65640073 	strbvs	r0, [r4, #-115]!	; 0xffffff8d
 390:	5f79616c 	svcpl	0x0079616c
 394:	6e303035 	mrcvs	0, 1, r3, cr0, cr5, {1}
 398:	65640073 	strbvs	r0, [r4, #-115]!	; 0xffffff8d
 39c:	5f79616c 	svcpl	0x0079616c
 3a0:	7263696d 	rsbvc	r6, r3, #1785856	; 0x1b4000
 3a4:	4f4c006f 	svcmi	0x004c006f
 3a8:	52004441 	andpl	r4, r0, #1090519040	; 0x41000000
 3ac:	435f5345 	cmpmi	pc, #335544321	; 0x14000001
 3b0:	314c5254 	cmpcc	ip, r4, asr r2
 3b4:	2f3a4300 	svccs	0x003a4300
 3b8:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 3bc:	65662f73 	strbvs	r2, [r6, #-3955]!	; 0xfffff08d
 3c0:	2f6f6a6c 	svccs	0x006f6a6c
 3c4:	6b736544 	blvs	1cd98dc <startup-0x1e326724>
 3c8:	2f706f74 	svccs	0x00706f74
 3cc:	616d7261 	cmnvs	sp, r1, ror #4
 3d0:	6d657373 	stclvs	3, cr7, [r5, #-460]!	; 0xfffffe34
 3d4:	72656c62 	rsbvc	r6, r5, #25088	; 0x6200
 3d8:	646f632f 	strbtvs	r6, [pc], #-815	; 3e0 <startup-0x1ffffc20>
 3dc:	696c5f65 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 3e0:	672f6574 			; <UNDEFINED> instruction: 0x672f6574
 3e4:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 3e8:	645f6369 	ldrbvs	r6, [pc], #-873	; 3f0 <startup-0x1ffffc10>
 3ec:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 3f0:	672f7961 	strvs	r7, [pc, -r1, ror #18]!
 3f4:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 3f8:	645f6369 	ldrbvs	r6, [pc], #-873	; 400 <startup-0x1ffffc00>
 3fc:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 400:	672f7961 	strvs	r7, [pc, -r1, ror #18]!
 404:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 408:	645f6369 	ldrbvs	r6, [pc], #-873	; 410 <startup-0x1ffffbf0>
 40c:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 410:	642f7961 	strtvs	r7, [pc], #-2401	; 418 <startup-0x1ffffbe8>
 414:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 418:	6c00632e 	stcvs	3, cr6, [r0], {46}	; 0x2e
 41c:	73706f6f 	cmnvc	r0, #444	; 0x1bc
 420:	6e697500 	cdpvs	5, 6, cr7, cr9, cr0, {0}
 424:	5f323374 	svcpl	0x00323374
 428:	79530063 	ldmdbvc	r3, {r0, r1, r5, r6}^
 42c:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
 430:	7274506b 	rsbsvc	r5, r4, #107	; 0x6b
 434:	73795300 	cmnvc	r9, #0, 6
 438:	6b636954 	blvs	18da990 <startup-0x1e725670>
 43c:	53455200 	movtpl	r5, #20992	; 0x5200
 440:	5254435f 	subspl	r4, r4, #2080374785	; 0x7c000001
 444:	7400324c 	strvc	r3, [r0], #-588	; 0xfffffdb4
 448:	00706d65 	rsbseq	r6, r0, r5, ror #26
 44c:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 450:	76007375 			; <UNDEFINED> instruction: 0x76007375
 454:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 458:	61726700 	cmnvs	r2, r0, lsl #14
 45c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 460:	6165725f 	cmnvs	r5, pc, asr r2
 464:	61645f64 	cmnvs	r4, r4, ror #30
 468:	70006174 	andvc	r6, r0, r4, ror r1
 46c:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 470:	61726700 	cmnvs	r2, r0, lsl #14
 474:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 478:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 47c:	73006574 	movwvc	r6, #1396	; 0x574
 480:	63656c65 	cmnvs	r5, #25856	; 0x6500
 484:	6f635f74 	svcvs	0x00635f74
 488:	6f72746e 	svcvs	0x0072746e
 48c:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 490:	61726700 	cmnvs	r2, r0, lsl #14
 494:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 498:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 49c:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 4a0:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
 4a4:	00726165 	rsbseq	r6, r2, r5, ror #2
 4a8:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffffa6d <ballGeometry+0xdfffefb1>
 4ac:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 4b0:	6c65662f 	stclvs	6, cr6, [r5], #-188	; 0xffffff44
 4b4:	442f6f6a 	strtmi	r6, [pc], #-3946	; 4bc <startup-0x1ffffb44>
 4b8:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
 4bc:	612f706f 			; <UNDEFINED> instruction: 0x612f706f
 4c0:	73616d72 	cmnvc	r1, #7296	; 0x1c80
 4c4:	626d6573 	rsbvs	r6, sp, #482344960	; 0x1cc00000
 4c8:	2f72656c 	svccs	0x0072656c
 4cc:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 4d0:	74696c5f 	strbtvc	r6, [r9], #-3167	; 0xfffff3a1
 4d4:	72672f65 	rsbvc	r2, r7, #404	; 0x194
 4d8:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 4dc:	69645f63 	stmdbvs	r4!, {r0, r1, r5, r6, r8, r9, sl, fp, ip, lr}^
 4e0:	616c7073 	smcvs	50947	; 0xc703
 4e4:	72672f79 	rsbvc	r2, r7, #484	; 0x1e4
 4e8:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 4ec:	69645f63 	stmdbvs	r4!, {r0, r1, r5, r6, r8, r9, sl, fp, ip, lr}^
 4f0:	616c7073 	smcvs	50947	; 0xc703
 4f4:	72672f79 	rsbvc	r2, r7, #484	; 0x1e4
 4f8:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 4fc:	69645f63 	stmdbvs	r4!, {r0, r1, r5, r6, r8, r9, sl, fp, ip, lr}^
 500:	616c7073 	smcvs	50947	; 0xc703
 504:	72672f79 	rsbvc	r2, r7, #484	; 0x1e4
 508:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 50c:	73696463 	cmnvc	r9, #1660944384	; 0x63000000
 510:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 514:	6700632e 	strvs	r6, [r0, -lr, lsr #6]
 518:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 51c:	695f6369 	ldmdbvs	pc, {r0, r3, r5, r6, r8, r9, sp, lr}^	; <UNPREDICTABLE>
 520:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
 524:	7a696c61 	bvc	1a5b6b0 <startup-0x1e5a4950>
 528:	72670065 	rsbvc	r0, r7, #101	; 0x65
 52c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 530:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
 534:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 538:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
 53c:	6d007465 	cfstrsvs	mvf7, [r0, #-404]	; 0xfffffe6c
 540:	006b7361 	rsbeq	r7, fp, r1, ror #6
 544:	70617267 	rsbvc	r7, r1, r7, ror #4
 548:	5f636968 	svcpl	0x00636968
 54c:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 550:	61645f65 	cmnvs	r4, r5, ror #30
 554:	67006174 	smlsdxvs	r0, r4, r1, r6
 558:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 55c:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 560:	5f746961 	svcpl	0x00746961
 564:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 568:	72670079 	rsbvc	r0, r7, #121	; 0x79
 56c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 570:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
 574:	67006461 	strvs	r6, [r0, -r1, ror #8]
 578:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 57c:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 580:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 584:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 410 <startup-0x1ffffbf0>
 588:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000030 	andeq	r0, r0, r0, lsr r0
  20:	40080e41 	andmi	r0, r8, r1, asr #28
  24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  28:	100e4101 	andne	r4, lr, r1, lsl #2
  2c:	00070d41 	andeq	r0, r7, r1, asr #26
  30:	0000001c 	andeq	r0, r0, ip, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000040 	andcs	r0, r0, r0, asr #32
  3c:	000000b8 	strheq	r0, [r0], -r8
  40:	40080e41 	andmi	r0, r8, r1, asr #28
  44:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  48:	100e4101 	andne	r4, lr, r1, lsl #2
  4c:	00070d41 	andeq	r0, r7, r1, asr #26
  50:	0000000c 	andeq	r0, r0, ip
  54:	00000000 	andeq	r0, r0, r0
  58:	20000000 	andcs	r0, r0, r0
  5c:	0000000c 	andeq	r0, r0, ip
  60:	00000018 	andeq	r0, r0, r8, lsl r0
  64:	00000000 	andeq	r0, r0, r0
  68:	200000f8 	strdcs	r0, [r0], -r8
  6c:	00000064 	andeq	r0, r0, r4, rrx
  70:	40080e41 	andmi	r0, r8, r1, asr #28
  74:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  78:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  7c:	00000018 	andeq	r0, r0, r8, lsl r0
  80:	00000000 	andeq	r0, r0, r0
  84:	2000015c 	andcs	r0, r0, ip, asr r1
  88:	0000000e 	andeq	r0, r0, lr
  8c:	40080e41 	andmi	r0, r8, r1, asr #28
  90:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  94:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  98:	0000001c 	andeq	r0, r0, ip, lsl r0
  9c:	00000000 	andeq	r0, r0, r0
  a0:	2000016a 	andcs	r0, r0, sl, ror #2
  a4:	0000003e 	andeq	r0, r0, lr, lsr r0
  a8:	40080e41 	andmi	r0, r8, r1, asr #28
  ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  b0:	100e4101 	andne	r4, lr, r1, lsl #2
  b4:	00070d41 	andeq	r0, r7, r1, asr #26
  b8:	00000018 	andeq	r0, r0, r8, lsl r0
  bc:	00000000 	andeq	r0, r0, r0
  c0:	200001a8 	andcs	r0, r0, r8, lsr #3
  c4:	00000014 	andeq	r0, r0, r4, lsl r0
  c8:	40080e41 	andmi	r0, r8, r1, asr #28
  cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  d0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  d4:	00000020 	andeq	r0, r0, r0, lsr #32
  d8:	00000000 	andeq	r0, r0, r0
  dc:	200001bc 			; <UNDEFINED> instruction: 0x200001bc
  e0:	0000009c 	muleq	r0, ip, r0
  e4:	400c0e41 	andmi	r0, ip, r1, asr #28
  e8:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  ec:	018e4002 	orreq	r4, lr, r2
  f0:	41180e41 	tstmi	r8, r1, asr #28
  f4:	0000070d 	andeq	r0, r0, sp, lsl #14
  f8:	00000020 	andeq	r0, r0, r0, lsr #32
  fc:	00000000 	andeq	r0, r0, r0
 100:	20000258 	andcs	r0, r0, r8, asr r2
 104:	00000096 	muleq	r0, r6, r0
 108:	400c0e41 	andmi	r0, ip, r1, asr #28
 10c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 110:	018e4002 	orreq	r4, lr, r2
 114:	41180e41 	tstmi	r8, r1, asr #28
 118:	0000070d 	andeq	r0, r0, sp, lsl #14
 11c:	0000001c 	andeq	r0, r0, ip, lsl r0
 120:	00000000 	andeq	r0, r0, r0
 124:	200002ee 	andcs	r0, r0, lr, ror #5
 128:	0000003a 	andeq	r0, r0, sl, lsr r0
 12c:	40080e41 	andmi	r0, r8, r1, asr #28
 130:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 134:	100e4101 	andne	r4, lr, r1, lsl #2
 138:	00070d41 	andeq	r0, r7, r1, asr #26
 13c:	0000001c 	andeq	r0, r0, ip, lsl r0
 140:	00000000 	andeq	r0, r0, r0
 144:	20000328 	andcs	r0, r0, r8, lsr #6
 148:	000000a4 	andeq	r0, r0, r4, lsr #1
 14c:	40080e41 	andmi	r0, r8, r1, asr #28
 150:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 154:	100e4101 	andne	r4, lr, r1, lsl #2
 158:	00070d41 	andeq	r0, r7, r1, asr #26
 15c:	0000001c 	andeq	r0, r0, ip, lsl r0
 160:	00000000 	andeq	r0, r0, r0
 164:	200003cc 	andcs	r0, r0, ip, asr #7
 168:	0000007e 	andeq	r0, r0, lr, ror r0
 16c:	40080e41 	andmi	r0, r8, r1, asr #28
 170:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 174:	200e4101 	andcs	r4, lr, r1, lsl #2
 178:	00070d41 	andeq	r0, r7, r1, asr #26
 17c:	0000001c 	andeq	r0, r0, ip, lsl r0
 180:	00000000 	andeq	r0, r0, r0
 184:	2000044a 	andcs	r0, r0, sl, asr #8
 188:	0000007e 	andeq	r0, r0, lr, ror r0
 18c:	40080e41 	andmi	r0, r8, r1, asr #28
 190:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 194:	200e4101 	andcs	r4, lr, r1, lsl #2
 198:	00070d41 	andeq	r0, r7, r1, asr #26
 19c:	0000000c 	andeq	r0, r0, ip
 1a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1a4:	7c020001 	stcvc	0, cr0, [r2], {1}
 1a8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b0:	0000019c 	muleq	r0, ip, r1
 1b4:	200004cc 	andcs	r0, r0, ip, asr #9
 1b8:	00000048 	andeq	r0, r0, r8, asr #32
 1bc:	40080e41 	andmi	r0, r8, r1, asr #28
 1c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1c4:	100e4101 	andne	r4, lr, r1, lsl #2
 1c8:	00070d41 	andeq	r0, r7, r1, asr #26
 1cc:	00000018 	andeq	r0, r0, r8, lsl r0
 1d0:	0000019c 	muleq	r0, ip, r1
 1d4:	20000514 	andcs	r0, r0, r4, lsl r5
 1d8:	00000012 	andeq	r0, r0, r2, lsl r0
 1dc:	40080e41 	andmi	r0, r8, r1, asr #28
 1e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1e4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1ec:	0000019c 	muleq	r0, ip, r1
 1f0:	20000526 	andcs	r0, r0, r6, lsr #10
 1f4:	00000034 	andeq	r0, r0, r4, lsr r0
 1f8:	40080e41 	andmi	r0, r8, r1, asr #28
 1fc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 200:	180e4101 	stmdane	lr, {r0, r8, lr}
 204:	00070d41 	andeq	r0, r7, r1, asr #26
 208:	0000001c 	andeq	r0, r0, ip, lsl r0
 20c:	0000019c 	muleq	r0, ip, r1
 210:	2000055a 	andcs	r0, r0, sl, asr r5
 214:	0000001e 	andeq	r0, r0, lr, lsl r0
 218:	40080e41 	andmi	r0, r8, r1, asr #28
 21c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 220:	100e4101 	andne	r4, lr, r1, lsl #2
 224:	00070d41 	andeq	r0, r7, r1, asr #26
 228:	0000000c 	andeq	r0, r0, ip
 22c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 230:	7c020001 	stcvc	0, cr0, [r2], {1}
 234:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 238:	0000001c 	andeq	r0, r0, ip, lsl r0
 23c:	00000228 	andeq	r0, r0, r8, lsr #4
 240:	20000578 	andcs	r0, r0, r8, ror r5
 244:	0000003c 	andeq	r0, r0, ip, lsr r0
 248:	40080e41 	andmi	r0, r8, r1, asr #28
 24c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 250:	100e4101 	andne	r4, lr, r1, lsl #2
 254:	00070d41 	andeq	r0, r7, r1, asr #26
 258:	0000001c 	andeq	r0, r0, ip, lsl r0
 25c:	00000228 	andeq	r0, r0, r8, lsr #4
 260:	200005b4 			; <UNDEFINED> instruction: 0x200005b4
 264:	00000044 	andeq	r0, r0, r4, asr #32
 268:	40080e41 	andmi	r0, r8, r1, asr #28
 26c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 270:	100e4101 	andne	r4, lr, r1, lsl #2
 274:	00070d41 	andeq	r0, r7, r1, asr #26
 278:	0000001c 	andeq	r0, r0, ip, lsl r0
 27c:	00000228 	andeq	r0, r0, r8, lsr #4
 280:	200005f8 	strdcs	r0, [r0], -r8
 284:	00000024 	andeq	r0, r0, r4, lsr #32
 288:	40080e41 	andmi	r0, r8, r1, asr #28
 28c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 290:	100e4101 	andne	r4, lr, r1, lsl #2
 294:	00070d41 	andeq	r0, r7, r1, asr #26
 298:	0000001c 	andeq	r0, r0, ip, lsl r0
 29c:	00000228 	andeq	r0, r0, r8, lsr #4
 2a0:	2000061c 	andcs	r0, r0, ip, lsl r6
 2a4:	00000070 	andeq	r0, r0, r0, ror r0
 2a8:	40080e41 	andmi	r0, r8, r1, asr #28
 2ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2b0:	100e4101 	andne	r4, lr, r1, lsl #2
 2b4:	00070d41 	andeq	r0, r7, r1, asr #26
 2b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2bc:	00000228 	andeq	r0, r0, r8, lsr #4
 2c0:	2000068c 	andcs	r0, r0, ip, lsl #13
 2c4:	0000008c 	andeq	r0, r0, ip, lsl #1
 2c8:	40080e41 	andmi	r0, r8, r1, asr #28
 2cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2d0:	180e4101 	stmdane	lr, {r0, r8, lr}
 2d4:	00070d41 	andeq	r0, r7, r1, asr #26
 2d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2dc:	00000228 	andeq	r0, r0, r8, lsr #4
 2e0:	20000718 	andcs	r0, r0, r8, lsl r7
 2e4:	0000002a 	andeq	r0, r0, sl, lsr #32
 2e8:	40080e41 	andmi	r0, r8, r1, asr #28
 2ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2f0:	100e4101 	andne	r4, lr, r1, lsl #2
 2f4:	00070d41 	andeq	r0, r7, r1, asr #26
 2f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2fc:	00000228 	andeq	r0, r0, r8, lsr #4
 300:	20000742 	andcs	r0, r0, r2, asr #14
 304:	0000007e 	andeq	r0, r0, lr, ror r0
 308:	40080e41 	andmi	r0, r8, r1, asr #28
 30c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 310:	100e4101 	andne	r4, lr, r1, lsl #2
 314:	00070d41 	andeq	r0, r7, r1, asr #26
 318:	0000001c 	andeq	r0, r0, ip, lsl r0
 31c:	00000228 	andeq	r0, r0, r8, lsr #4
 320:	200007c0 	andcs	r0, r0, r0, asr #15
 324:	00000040 	andeq	r0, r0, r0, asr #32
 328:	40080e41 	andmi	r0, r8, r1, asr #28
 32c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 330:	100e4101 	andne	r4, lr, r1, lsl #2
 334:	00070d41 	andeq	r0, r7, r1, asr #26
 338:	0000001c 	andeq	r0, r0, ip, lsl r0
 33c:	00000228 	andeq	r0, r0, r8, lsr #4
 340:	20000800 	andcs	r0, r0, r0, lsl #16
 344:	00000046 	andeq	r0, r0, r6, asr #32
 348:	40080e41 	andmi	r0, r8, r1, asr #28
 34c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 350:	100e4101 	andne	r4, lr, r1, lsl #2
 354:	00070d41 	andeq	r0, r7, r1, asr #26
 358:	00000018 	andeq	r0, r0, r8, lsl r0
 35c:	00000228 	andeq	r0, r0, r8, lsr #4
 360:	20000846 	andcs	r0, r0, r6, asr #16
 364:	00000056 	andeq	r0, r0, r6, asr r0
 368:	40080e41 	andmi	r0, r8, r1, asr #28
 36c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 370:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 374:	0000001c 	andeq	r0, r0, ip, lsl r0
 378:	00000228 	andeq	r0, r0, r8, lsr #4
 37c:	2000089c 	mulcs	r0, ip, r8
 380:	00000066 	andeq	r0, r0, r6, rrx
 384:	40080e41 	andmi	r0, r8, r1, asr #28
 388:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 38c:	100e4101 	andne	r4, lr, r1, lsl #2
 390:	00070d41 	andeq	r0, r7, r1, asr #26
 394:	00000020 	andeq	r0, r0, r0, lsr #32
 398:	00000228 	andeq	r0, r0, r8, lsr #4
 39c:	20000902 	andcs	r0, r0, r2, lsl #18
 3a0:	0000018e 	andeq	r0, r0, lr, lsl #3
 3a4:	400c0e41 	andmi	r0, ip, r1, asr #28
 3a8:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 3ac:	018e4002 	orreq	r4, lr, r2
 3b0:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 3b4:	0000070d 	andeq	r0, r0, sp, lsl #14
 3b8:	0000000c 	andeq	r0, r0, ip
 3bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 3c0:	7c020001 	stcvc	0, cr0, [r2], {1}
 3c4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 3c8:	00000014 	andeq	r0, r0, r4, lsl r0
 3cc:	000003b8 			; <UNDEFINED> instruction: 0x000003b8
 3d0:	20000a90 	mulcs	r0, r0, sl
 3d4:	00000012 	andeq	r0, r0, r2, lsl r0
 3d8:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
 3dc:	00018e02 	andeq	r8, r1, r2, lsl #28
