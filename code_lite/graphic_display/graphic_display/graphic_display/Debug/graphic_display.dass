
./Debug/graphic_display.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
};


void startup(void)
{
	__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f876 	bl	200000f4 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
		" LDR R0,=0x2001C000\n" /* set stack */
		" MOV SP,R0\n"
		" BL main\n"   /* call main */
		"_exit: B .\n" /* never return */
	);
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <set_object_speed>:
    void                (*move) (struct tObject *);
    void                (*set_speed) (struct tObject *, int8 speedx, int8 speedy);
} Object, *ObjectPtr;

void set_object_speed(ObjectPtr obj, int8 speedx, int8 speedy)
{
20000010:	b580      	push	{r7, lr}
20000012:	b082      	sub	sp, #8
20000014:	af00      	add	r7, sp, #0
20000016:	6078      	str	r0, [r7, #4]
20000018:	0008      	movs	r0, r1
2000001a:	0011      	movs	r1, r2
2000001c:	1cfb      	adds	r3, r7, #3
2000001e:	1c02      	adds	r2, r0, #0
20000020:	701a      	strb	r2, [r3, #0]
20000022:	1cbb      	adds	r3, r7, #2
20000024:	1c0a      	adds	r2, r1, #0
20000026:	701a      	strb	r2, [r3, #0]
    obj->dirx = speedx;
20000028:	687b      	ldr	r3, [r7, #4]
2000002a:	1cfa      	adds	r2, r7, #3
2000002c:	7812      	ldrb	r2, [r2, #0]
2000002e:	711a      	strb	r2, [r3, #4]
    obj->diry = speedy;
20000030:	687b      	ldr	r3, [r7, #4]
20000032:	1cba      	adds	r2, r7, #2
20000034:	7812      	ldrb	r2, [r2, #0]
20000036:	715a      	strb	r2, [r3, #5]
}
20000038:	46c0      	nop			; (mov r8, r8)
2000003a:	46bd      	mov	sp, r7
2000003c:	b002      	add	sp, #8
2000003e:	bd80      	pop	{r7, pc}

20000040 <update_object>:

void update_object(ObjectPtr obj)
{
20000040:	b580      	push	{r7, lr}
20000042:	b082      	sub	sp, #8
20000044:	af00      	add	r7, sp, #0
20000046:	6078      	str	r0, [r7, #4]
    obj->clear(obj);
20000048:	687b      	ldr	r3, [r7, #4]
2000004a:	68db      	ldr	r3, [r3, #12]
2000004c:	687a      	ldr	r2, [r7, #4]
2000004e:	0010      	movs	r0, r2
20000050:	4798      	blx	r3
    obj->posx = obj->posx + obj->dirx;
20000052:	687b      	ldr	r3, [r7, #4]
20000054:	799b      	ldrb	r3, [r3, #6]
20000056:	b25b      	sxtb	r3, r3
20000058:	b2da      	uxtb	r2, r3
2000005a:	687b      	ldr	r3, [r7, #4]
2000005c:	791b      	ldrb	r3, [r3, #4]
2000005e:	b25b      	sxtb	r3, r3
20000060:	b2db      	uxtb	r3, r3
20000062:	18d3      	adds	r3, r2, r3
20000064:	b2db      	uxtb	r3, r3
20000066:	b25a      	sxtb	r2, r3
20000068:	687b      	ldr	r3, [r7, #4]
2000006a:	719a      	strb	r2, [r3, #6]
    obj->posy = obj->posy + obj->diry;
2000006c:	687b      	ldr	r3, [r7, #4]
2000006e:	79db      	ldrb	r3, [r3, #7]
20000070:	b25b      	sxtb	r3, r3
20000072:	b2da      	uxtb	r2, r3
20000074:	687b      	ldr	r3, [r7, #4]
20000076:	795b      	ldrb	r3, [r3, #5]
20000078:	b25b      	sxtb	r3, r3
2000007a:	b2db      	uxtb	r3, r3
2000007c:	18d3      	adds	r3, r2, r3
2000007e:	b2db      	uxtb	r3, r3
20000080:	b25a      	sxtb	r2, r3
20000082:	687b      	ldr	r3, [r7, #4]
20000084:	71da      	strb	r2, [r3, #7]

    if(obj->posx < 1 || obj->posx > 128)
20000086:	687b      	ldr	r3, [r7, #4]
20000088:	799b      	ldrb	r3, [r3, #6]
2000008a:	b25b      	sxtb	r3, r3
2000008c:	2b00      	cmp	r3, #0
2000008e:	dc08      	bgt.n	200000a2 <update_object+0x62>
        obj->dirx = -obj->dirx;
20000090:	687b      	ldr	r3, [r7, #4]
20000092:	791b      	ldrb	r3, [r3, #4]
20000094:	b25b      	sxtb	r3, r3
20000096:	b2db      	uxtb	r3, r3
20000098:	425b      	negs	r3, r3
2000009a:	b2db      	uxtb	r3, r3
2000009c:	b25a      	sxtb	r2, r3
2000009e:	687b      	ldr	r3, [r7, #4]
200000a0:	711a      	strb	r2, [r3, #4]

    if(obj->posy < 1 || obj->posy > 64)
200000a2:	687b      	ldr	r3, [r7, #4]
200000a4:	79db      	ldrb	r3, [r3, #7]
200000a6:	b25b      	sxtb	r3, r3
200000a8:	2b00      	cmp	r3, #0
200000aa:	dd04      	ble.n	200000b6 <update_object+0x76>
200000ac:	687b      	ldr	r3, [r7, #4]
200000ae:	79db      	ldrb	r3, [r3, #7]
200000b0:	b25b      	sxtb	r3, r3
200000b2:	2b40      	cmp	r3, #64	; 0x40
200000b4:	dd08      	ble.n	200000c8 <update_object+0x88>
        obj->diry = -obj->diry;
200000b6:	687b      	ldr	r3, [r7, #4]
200000b8:	795b      	ldrb	r3, [r3, #5]
200000ba:	b25b      	sxtb	r3, r3
200000bc:	b2db      	uxtb	r3, r3
200000be:	425b      	negs	r3, r3
200000c0:	b2db      	uxtb	r3, r3
200000c2:	b25a      	sxtb	r2, r3
200000c4:	687b      	ldr	r3, [r7, #4]
200000c6:	715a      	strb	r2, [r3, #5]

    obj->draw(obj);
200000c8:	687b      	ldr	r3, [r7, #4]
200000ca:	689b      	ldr	r3, [r3, #8]
200000cc:	687a      	ldr	r2, [r7, #4]
200000ce:	0010      	movs	r0, r2
200000d0:	4798      	blx	r3
}
200000d2:	46c0      	nop			; (mov r8, r8)
200000d4:	46bd      	mov	sp, r7
200000d6:	b002      	add	sp, #8
200000d8:	bd80      	pop	{r7, pc}

200000da <init_app>:

void init_app(void)
{
200000da:	b580      	push	{r7, lr}
200000dc:	af00      	add	r7, sp, #0
#ifdef USBDM
	*((unsigned long *)0x40023830) = 0x18;
	__asm volatile(" LDR R0,=0x08000209\n BLX R0 \n");
#endif

	GPIO_E.MODER = 0x55555555;
200000de:	4b03      	ldr	r3, [pc, #12]	; (200000ec <init_app+0x12>)
200000e0:	4a03      	ldr	r2, [pc, #12]	; (200000f0 <init_app+0x16>)
200000e2:	601a      	str	r2, [r3, #0]
}
200000e4:	46c0      	nop			; (mov r8, r8)
200000e6:	46bd      	mov	sp, r7
200000e8:	bd80      	pop	{r7, pc}
200000ea:	46c0      	nop			; (mov r8, r8)
200000ec:	40021000 	andmi	r1, r2, r0
200000f0:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200000f4 <main>:

void main(void)
{
200000f4:	b580      	push	{r7, lr}
200000f6:	af00      	add	r7, sp, #0
	// Test for drawing display
	// drawTest();

	// Autopong
	autopong();
200000f8:	f000 f803 	bl	20000102 <autopong>
}
200000fc:	46c0      	nop			; (mov r8, r8)
200000fe:	46bd      	mov	sp, r7
20000100:	bd80      	pop	{r7, pc}

20000102 <autopong>:

void autopong(void)
{
20000102:	b580      	push	{r7, lr}
20000104:	b082      	sub	sp, #8
20000106:	af00      	add	r7, sp, #0
	ObjectPtr ballerBall = &ball;
20000108:	4b0a      	ldr	r3, [pc, #40]	; (20000134 <autopong+0x32>)
2000010a:	607b      	str	r3, [r7, #4]
	init_app();
2000010c:	f7ff ffe5 	bl	200000da <init_app>
	graphic_initialize();
20000110:	f000 fa81 	bl	20000616 <graphic_initialize>

#ifndef SIMULATOR
	graphic_clear_screen();
#endif

	ballerBall->set_speed(ballerBall, 4, 1);
20000114:	687b      	ldr	r3, [r7, #4]
20000116:	695b      	ldr	r3, [r3, #20]
20000118:	6878      	ldr	r0, [r7, #4]
2000011a:	2201      	movs	r2, #1
2000011c:	2104      	movs	r1, #4
2000011e:	4798      	blx	r3

	while(TRUE)
	{
		ballerBall->move(ballerBall);
20000120:	687b      	ldr	r3, [r7, #4]
20000122:	691b      	ldr	r3, [r3, #16]
20000124:	687a      	ldr	r2, [r7, #4]
20000126:	0010      	movs	r0, r2
20000128:	4798      	blx	r3
		delay_milli(40);
2000012a:	2028      	movs	r0, #40	; 0x28
2000012c:	f000 f919 	bl	20000362 <delay_milli>
	{
20000130:	e7f6      	b.n	20000120 <autopong+0x1e>
20000132:	46c0      	nop			; (mov r8, r8)
20000134:	20000984 	andcs	r0, r0, r4, lsl #19

20000138 <drawTest>:
	}
}

void drawTest(void)
{
20000138:	b580      	push	{r7, lr}
2000013a:	b082      	sub	sp, #8
2000013c:	af00      	add	r7, sp, #0
	uint32 i;
	init_app();
2000013e:	f7ff ffcc 	bl	200000da <init_app>
	graphic_initialize();
20000142:	f000 fa68 	bl	20000616 <graphic_initialize>

#ifndef SIMULATOR
	graphic_clear_screen();
#endif

	for (i = 0; i < 128; i++)
20000146:	2300      	movs	r3, #0
20000148:	607b      	str	r3, [r7, #4]
2000014a:	e009      	b.n	20000160 <drawTest+0x28>
	{
		pixel(i, 10, 1);
2000014c:	687b      	ldr	r3, [r7, #4]
2000014e:	b2db      	uxtb	r3, r3
20000150:	2201      	movs	r2, #1
20000152:	210a      	movs	r1, #10
20000154:	0018      	movs	r0, r3
20000156:	f000 fabc 	bl	200006d2 <pixel>
	for (i = 0; i < 128; i++)
2000015a:	687b      	ldr	r3, [r7, #4]
2000015c:	3301      	adds	r3, #1
2000015e:	607b      	str	r3, [r7, #4]
20000160:	687b      	ldr	r3, [r7, #4]
20000162:	2b7f      	cmp	r3, #127	; 0x7f
20000164:	d9f2      	bls.n	2000014c <drawTest+0x14>
	}
	for (i = 0; i < 64; i++)
20000166:	2300      	movs	r3, #0
20000168:	607b      	str	r3, [r7, #4]
2000016a:	e009      	b.n	20000180 <drawTest+0x48>
	{
		pixel(10, i, 1);
2000016c:	687b      	ldr	r3, [r7, #4]
2000016e:	b2db      	uxtb	r3, r3
20000170:	2201      	movs	r2, #1
20000172:	0019      	movs	r1, r3
20000174:	200a      	movs	r0, #10
20000176:	f000 faac 	bl	200006d2 <pixel>
	for (i = 0; i < 64; i++)
2000017a:	687b      	ldr	r3, [r7, #4]
2000017c:	3301      	adds	r3, #1
2000017e:	607b      	str	r3, [r7, #4]
20000180:	687b      	ldr	r3, [r7, #4]
20000182:	2b3f      	cmp	r3, #63	; 0x3f
20000184:	d9f2      	bls.n	2000016c <drawTest+0x34>
	}

	delay_milli(500);
20000186:	23fa      	movs	r3, #250	; 0xfa
20000188:	005b      	lsls	r3, r3, #1
2000018a:	0018      	movs	r0, r3
2000018c:	f000 f8e9 	bl	20000362 <delay_milli>

	for (i = 0; i < 128; i++)
20000190:	2300      	movs	r3, #0
20000192:	607b      	str	r3, [r7, #4]
20000194:	e009      	b.n	200001aa <drawTest+0x72>
	{
		pixel(i, 10, 0);
20000196:	687b      	ldr	r3, [r7, #4]
20000198:	b2db      	uxtb	r3, r3
2000019a:	2200      	movs	r2, #0
2000019c:	210a      	movs	r1, #10
2000019e:	0018      	movs	r0, r3
200001a0:	f000 fa97 	bl	200006d2 <pixel>
	for (i = 0; i < 128; i++)
200001a4:	687b      	ldr	r3, [r7, #4]
200001a6:	3301      	adds	r3, #1
200001a8:	607b      	str	r3, [r7, #4]
200001aa:	687b      	ldr	r3, [r7, #4]
200001ac:	2b7f      	cmp	r3, #127	; 0x7f
200001ae:	d9f2      	bls.n	20000196 <drawTest+0x5e>
	}
	for (i = 0; i < 64; i++)
200001b0:	2300      	movs	r3, #0
200001b2:	607b      	str	r3, [r7, #4]
200001b4:	e009      	b.n	200001ca <drawTest+0x92>
	{
		pixel(10, i, 0);
200001b6:	687b      	ldr	r3, [r7, #4]
200001b8:	b2db      	uxtb	r3, r3
200001ba:	2200      	movs	r2, #0
200001bc:	0019      	movs	r1, r3
200001be:	200a      	movs	r0, #10
200001c0:	f000 fa87 	bl	200006d2 <pixel>
	for (i = 0; i < 64; i++)
200001c4:	687b      	ldr	r3, [r7, #4]
200001c6:	3301      	adds	r3, #1
200001c8:	607b      	str	r3, [r7, #4]
200001ca:	687b      	ldr	r3, [r7, #4]
200001cc:	2b3f      	cmp	r3, #63	; 0x3f
200001ce:	d9f2      	bls.n	200001b6 <drawTest+0x7e>
	}
}
200001d0:	46c0      	nop			; (mov r8, r8)
200001d2:	46bd      	mov	sp, r7
200001d4:	b002      	add	sp, #8
200001d6:	bd80      	pop	{r7, pc}

200001d8 <clear_object>:

void clear_object (ObjectPtr obj)
{	
200001d8:	b580      	push	{r7, lr}
200001da:	b086      	sub	sp, #24
200001dc:	af00      	add	r7, sp, #0
200001de:	6078      	str	r0, [r7, #4]
	GeometryPtr objectGeometry = obj->geo;
200001e0:	687b      	ldr	r3, [r7, #4]
200001e2:	681b      	ldr	r3, [r3, #0]
200001e4:	613b      	str	r3, [r7, #16]
	uint8 dimensionSize = objectGeometry->numpoints;
200001e6:	230f      	movs	r3, #15
200001e8:	18fb      	adds	r3, r7, r3
200001ea:	693a      	ldr	r2, [r7, #16]
200001ec:	7812      	ldrb	r2, [r2, #0]
200001ee:	701a      	strb	r2, [r3, #0]
	
	for(int i = 0; i < dimensionSize; i++)
200001f0:	2300      	movs	r3, #0
200001f2:	617b      	str	r3, [r7, #20]
200001f4:	e025      	b.n	20000242 <clear_object+0x6a>
	{
		Point objectPixel = objectGeometry->px[i];
200001f6:	230c      	movs	r3, #12
200001f8:	18f8      	adds	r0, r7, r3
200001fa:	693a      	ldr	r2, [r7, #16]
200001fc:	697b      	ldr	r3, [r7, #20]
200001fe:	005b      	lsls	r3, r3, #1
20000200:	2103      	movs	r1, #3
20000202:	18d3      	adds	r3, r2, r3
20000204:	185b      	adds	r3, r3, r1
20000206:	0019      	movs	r1, r3
20000208:	2302      	movs	r3, #2
2000020a:	001a      	movs	r2, r3
2000020c:	f000 fbb0 	bl	20000970 <memcpy>
		pixel(obj->posx + objectPixel.x, obj->posy + objectPixel.y, 0);
20000210:	687b      	ldr	r3, [r7, #4]
20000212:	799b      	ldrb	r3, [r3, #6]
20000214:	b25b      	sxtb	r3, r3
20000216:	b2da      	uxtb	r2, r3
20000218:	230c      	movs	r3, #12
2000021a:	18fb      	adds	r3, r7, r3
2000021c:	781b      	ldrb	r3, [r3, #0]
2000021e:	18d3      	adds	r3, r2, r3
20000220:	b2d8      	uxtb	r0, r3
20000222:	687b      	ldr	r3, [r7, #4]
20000224:	79db      	ldrb	r3, [r3, #7]
20000226:	b25b      	sxtb	r3, r3
20000228:	b2da      	uxtb	r2, r3
2000022a:	230c      	movs	r3, #12
2000022c:	18fb      	adds	r3, r7, r3
2000022e:	785b      	ldrb	r3, [r3, #1]
20000230:	18d3      	adds	r3, r2, r3
20000232:	b2db      	uxtb	r3, r3
20000234:	2200      	movs	r2, #0
20000236:	0019      	movs	r1, r3
20000238:	f000 fa4b 	bl	200006d2 <pixel>
	for(int i = 0; i < dimensionSize; i++)
2000023c:	697b      	ldr	r3, [r7, #20]
2000023e:	3301      	adds	r3, #1
20000240:	617b      	str	r3, [r7, #20]
20000242:	230f      	movs	r3, #15
20000244:	18fb      	adds	r3, r7, r3
20000246:	781a      	ldrb	r2, [r3, #0]
20000248:	697b      	ldr	r3, [r7, #20]
2000024a:	429a      	cmp	r2, r3
2000024c:	dcd3      	bgt.n	200001f6 <clear_object+0x1e>
	}
}
2000024e:	46c0      	nop			; (mov r8, r8)
20000250:	46bd      	mov	sp, r7
20000252:	b006      	add	sp, #24
20000254:	bd80      	pop	{r7, pc}

20000256 <draw_object>:

void draw_object (ObjectPtr obj)
{	
20000256:	b580      	push	{r7, lr}
20000258:	b086      	sub	sp, #24
2000025a:	af00      	add	r7, sp, #0
2000025c:	6078      	str	r0, [r7, #4]
	GeometryPtr objectGeometry = obj->geo;
2000025e:	687b      	ldr	r3, [r7, #4]
20000260:	681b      	ldr	r3, [r3, #0]
20000262:	613b      	str	r3, [r7, #16]
	uint8 dimensionSize = objectGeometry->numpoints;
20000264:	230f      	movs	r3, #15
20000266:	18fb      	adds	r3, r7, r3
20000268:	693a      	ldr	r2, [r7, #16]
2000026a:	7812      	ldrb	r2, [r2, #0]
2000026c:	701a      	strb	r2, [r3, #0]
	
	for(int i = 0; i < dimensionSize; i++)
2000026e:	2300      	movs	r3, #0
20000270:	617b      	str	r3, [r7, #20]
20000272:	e025      	b.n	200002c0 <draw_object+0x6a>
	{
		Point objectPixel = objectGeometry->px[i];
20000274:	230c      	movs	r3, #12
20000276:	18f8      	adds	r0, r7, r3
20000278:	693a      	ldr	r2, [r7, #16]
2000027a:	697b      	ldr	r3, [r7, #20]
2000027c:	005b      	lsls	r3, r3, #1
2000027e:	2103      	movs	r1, #3
20000280:	18d3      	adds	r3, r2, r3
20000282:	185b      	adds	r3, r3, r1
20000284:	0019      	movs	r1, r3
20000286:	2302      	movs	r3, #2
20000288:	001a      	movs	r2, r3
2000028a:	f000 fb71 	bl	20000970 <memcpy>
		pixel(obj->posx + objectPixel.x, obj->posy + objectPixel.y, 1);
2000028e:	687b      	ldr	r3, [r7, #4]
20000290:	799b      	ldrb	r3, [r3, #6]
20000292:	b25b      	sxtb	r3, r3
20000294:	b2da      	uxtb	r2, r3
20000296:	230c      	movs	r3, #12
20000298:	18fb      	adds	r3, r7, r3
2000029a:	781b      	ldrb	r3, [r3, #0]
2000029c:	18d3      	adds	r3, r2, r3
2000029e:	b2d8      	uxtb	r0, r3
200002a0:	687b      	ldr	r3, [r7, #4]
200002a2:	79db      	ldrb	r3, [r3, #7]
200002a4:	b25b      	sxtb	r3, r3
200002a6:	b2da      	uxtb	r2, r3
200002a8:	230c      	movs	r3, #12
200002aa:	18fb      	adds	r3, r7, r3
200002ac:	785b      	ldrb	r3, [r3, #1]
200002ae:	18d3      	adds	r3, r2, r3
200002b0:	b2db      	uxtb	r3, r3
200002b2:	2201      	movs	r2, #1
200002b4:	0019      	movs	r1, r3
200002b6:	f000 fa0c 	bl	200006d2 <pixel>
	for(int i = 0; i < dimensionSize; i++)
200002ba:	697b      	ldr	r3, [r7, #20]
200002bc:	3301      	adds	r3, #1
200002be:	617b      	str	r3, [r7, #20]
200002c0:	230f      	movs	r3, #15
200002c2:	18fb      	adds	r3, r7, r3
200002c4:	781a      	ldrb	r2, [r3, #0]
200002c6:	697b      	ldr	r3, [r7, #20]
200002c8:	429a      	cmp	r2, r3
200002ca:	dcd3      	bgt.n	20000274 <draw_object+0x1e>
	}
200002cc:	46c0      	nop			; (mov r8, r8)
200002ce:	46bd      	mov	sp, r7
200002d0:	b006      	add	sp, #24
200002d2:	bd80      	pop	{r7, pc}

200002d4 <delay_250ns>:
#include "delay.h"

#define STK_CTRL ((volatile unsigned int *)(0xE000E010)) 

void delay_250ns( void )
{
200002d4:	b580      	push	{r7, lr}
200002d6:	b082      	sub	sp, #8
200002d8:	af00      	add	r7, sp, #0
	uint32 x = 0;
200002da:	2300      	movs	r3, #0
200002dc:	607b      	str	r3, [r7, #4]
	SYS_TICK.CTRL = 0;
200002de:	4b0e      	ldr	r3, [pc, #56]	; (20000318 <delay_250ns+0x44>)
200002e0:	2200      	movs	r2, #0
200002e2:	701a      	strb	r2, [r3, #0]
	SYS_TICK.CTRL_COUNT = 0;
200002e4:	4b0c      	ldr	r3, [pc, #48]	; (20000318 <delay_250ns+0x44>)
200002e6:	2200      	movs	r2, #0
200002e8:	709a      	strb	r2, [r3, #2]
	SYS_TICK.VAL = 0;
200002ea:	4b0b      	ldr	r3, [pc, #44]	; (20000318 <delay_250ns+0x44>)
200002ec:	2200      	movs	r2, #0
200002ee:	609a      	str	r2, [r3, #8]
	SYS_TICK.LOAD = 42;
200002f0:	4b09      	ldr	r3, [pc, #36]	; (20000318 <delay_250ns+0x44>)
200002f2:	222a      	movs	r2, #42	; 0x2a
200002f4:	605a      	str	r2, [r3, #4]
	SYS_TICK.CTRL = 0x05;
200002f6:	4b08      	ldr	r3, [pc, #32]	; (20000318 <delay_250ns+0x44>)
200002f8:	2205      	movs	r2, #5
200002fa:	701a      	strb	r2, [r3, #0]
	
	x = SYS_TICK.VAL;
200002fc:	4b06      	ldr	r3, [pc, #24]	; (20000318 <delay_250ns+0x44>)
200002fe:	689b      	ldr	r3, [r3, #8]
20000300:	607b      	str	r3, [r7, #4]
	while (SYS_TICK.CTRL_COUNT & 0x1 == 0) 
20000302:	46c0      	nop			; (mov r8, r8)
20000304:	4b04      	ldr	r3, [pc, #16]	; (20000318 <delay_250ns+0x44>)
20000306:	789b      	ldrb	r3, [r3, #2]
	{
		x = SYS_TICK.VAL;
	}
	SYS_TICK.CTRL = 0;
20000308:	4b03      	ldr	r3, [pc, #12]	; (20000318 <delay_250ns+0x44>)
2000030a:	2200      	movs	r2, #0
2000030c:	701a      	strb	r2, [r3, #0]
}
2000030e:	46c0      	nop			; (mov r8, r8)
20000310:	46bd      	mov	sp, r7
20000312:	b002      	add	sp, #8
20000314:	bd80      	pop	{r7, pc}
20000316:	46c0      	nop			; (mov r8, r8)
20000318:	e000e010 	and	lr, r0, r0, lsl r0

2000031c <delay_500ns>:

void delay_500ns( void ) 
{
2000031c:	b580      	push	{r7, lr}
2000031e:	af00      	add	r7, sp, #0
	delay_250ns();
20000320:	f7ff ffd8 	bl	200002d4 <delay_250ns>
	delay_250ns();
20000324:	f7ff ffd6 	bl	200002d4 <delay_250ns>
}
20000328:	46c0      	nop			; (mov r8, r8)
2000032a:	46bd      	mov	sp, r7
2000032c:	bd80      	pop	{r7, pc}

2000032e <delay_micro>:

void delay_micro( uint32_c us )
{
2000032e:	b580      	push	{r7, lr}
20000330:	b084      	sub	sp, #16
20000332:	af00      	add	r7, sp, #0
20000334:	6078      	str	r0, [r7, #4]
	for (uint32 loops = 0; loops < us; loops++ )
20000336:	2300      	movs	r3, #0
20000338:	60fb      	str	r3, [r7, #12]
2000033a:	e00a      	b.n	20000352 <delay_micro+0x24>
		{
		delay_250ns();
2000033c:	f7ff ffca 	bl	200002d4 <delay_250ns>
		delay_250ns();
20000340:	f7ff ffc8 	bl	200002d4 <delay_250ns>
		delay_250ns();
20000344:	f7ff ffc6 	bl	200002d4 <delay_250ns>
		delay_250ns();
20000348:	f7ff ffc4 	bl	200002d4 <delay_250ns>
	for (uint32 loops = 0; loops < us; loops++ )
2000034c:	68fb      	ldr	r3, [r7, #12]
2000034e:	3301      	adds	r3, #1
20000350:	60fb      	str	r3, [r7, #12]
20000352:	68fa      	ldr	r2, [r7, #12]
20000354:	687b      	ldr	r3, [r7, #4]
20000356:	429a      	cmp	r2, r3
20000358:	d3f0      	bcc.n	2000033c <delay_micro+0xe>
	}
}
2000035a:	46c0      	nop			; (mov r8, r8)
2000035c:	46bd      	mov	sp, r7
2000035e:	b004      	add	sp, #16
20000360:	bd80      	pop	{r7, pc}

20000362 <delay_milli>:

void delay_milli( uint32 ms )
{	
20000362:	b580      	push	{r7, lr}
20000364:	b082      	sub	sp, #8
20000366:	af00      	add	r7, sp, #0
20000368:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
	ms = ms / 1000;
2000036a:	687a      	ldr	r2, [r7, #4]
2000036c:	23fa      	movs	r3, #250	; 0xfa
2000036e:	0099      	lsls	r1, r3, #2
20000370:	0010      	movs	r0, r2
20000372:	f000 fa71 	bl	20000858 <__udivsi3>
20000376:	0003      	movs	r3, r0
20000378:	607b      	str	r3, [r7, #4]
	ms++;
2000037a:	687b      	ldr	r3, [r7, #4]
2000037c:	3301      	adds	r3, #1
2000037e:	607b      	str	r3, [r7, #4]
	#endif // SIMULATOR
	delay_micro(ms*1000);
20000380:	687b      	ldr	r3, [r7, #4]
20000382:	22fa      	movs	r2, #250	; 0xfa
20000384:	0092      	lsls	r2, r2, #2
20000386:	4353      	muls	r3, r2
20000388:	0018      	movs	r0, r3
2000038a:	f7ff ffd0 	bl	2000032e <delay_micro>
2000038e:	46c0      	nop			; (mov r8, r8)
20000390:	46bd      	mov	sp, r7
20000392:	b002      	add	sp, #8
20000394:	bd80      	pop	{r7, pc}
20000396:	46c0      	nop			; (mov r8, r8)

20000398 <graphic_ctrl_bit_set>:
#include "graphicdisplay.h"
#include "gpio.h"

void graphic_ctrl_bit_set(uint8_c x)
{
20000398:	b580      	push	{r7, lr}
2000039a:	b082      	sub	sp, #8
2000039c:	af00      	add	r7, sp, #0
2000039e:	0002      	movs	r2, r0
200003a0:	1dfb      	adds	r3, r7, #7
200003a2:	701a      	strb	r2, [r3, #0]
	GPIO_E.ODR_LOW |= x;
200003a4:	490a      	ldr	r1, [pc, #40]	; (200003d0 <graphic_ctrl_bit_set+0x38>)
200003a6:	4b0a      	ldr	r3, [pc, #40]	; (200003d0 <graphic_ctrl_bit_set+0x38>)
200003a8:	7d1b      	ldrb	r3, [r3, #20]
200003aa:	b2da      	uxtb	r2, r3
200003ac:	1dfb      	adds	r3, r7, #7
200003ae:	781b      	ldrb	r3, [r3, #0]
200003b0:	4313      	orrs	r3, r2
200003b2:	b2db      	uxtb	r3, r3
200003b4:	750b      	strb	r3, [r1, #20]
	GPIO_E.ODR_LOW &= ~B_SELECT;
200003b6:	4a06      	ldr	r2, [pc, #24]	; (200003d0 <graphic_ctrl_bit_set+0x38>)
200003b8:	4b05      	ldr	r3, [pc, #20]	; (200003d0 <graphic_ctrl_bit_set+0x38>)
200003ba:	7d1b      	ldrb	r3, [r3, #20]
200003bc:	b2db      	uxtb	r3, r3
200003be:	2104      	movs	r1, #4
200003c0:	438b      	bics	r3, r1
200003c2:	b2db      	uxtb	r3, r3
200003c4:	7513      	strb	r3, [r2, #20]
}
200003c6:	46c0      	nop			; (mov r8, r8)
200003c8:	46bd      	mov	sp, r7
200003ca:	b002      	add	sp, #8
200003cc:	bd80      	pop	{r7, pc}
200003ce:	46c0      	nop			; (mov r8, r8)
200003d0:	40021000 	andmi	r1, r2, r0

200003d4 <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(uint8_c x)
{
200003d4:	b580      	push	{r7, lr}
200003d6:	b082      	sub	sp, #8
200003d8:	af00      	add	r7, sp, #0
200003da:	0002      	movs	r2, r0
200003dc:	1dfb      	adds	r3, r7, #7
200003de:	701a      	strb	r2, [r3, #0]
	GPIO_E.ODR_LOW &= ~x;
200003e0:	490c      	ldr	r1, [pc, #48]	; (20000414 <graphic_ctrl_bit_clear+0x40>)
200003e2:	4b0c      	ldr	r3, [pc, #48]	; (20000414 <graphic_ctrl_bit_clear+0x40>)
200003e4:	7d1b      	ldrb	r3, [r3, #20]
200003e6:	b2db      	uxtb	r3, r3
200003e8:	b25b      	sxtb	r3, r3
200003ea:	1dfa      	adds	r2, r7, #7
200003ec:	7812      	ldrb	r2, [r2, #0]
200003ee:	b252      	sxtb	r2, r2
200003f0:	43d2      	mvns	r2, r2
200003f2:	b252      	sxtb	r2, r2
200003f4:	4013      	ands	r3, r2
200003f6:	b25b      	sxtb	r3, r3
200003f8:	b2db      	uxtb	r3, r3
200003fa:	750b      	strb	r3, [r1, #20]
	GPIO_E.ODR_LOW &= ~B_SELECT;
200003fc:	4a05      	ldr	r2, [pc, #20]	; (20000414 <graphic_ctrl_bit_clear+0x40>)
200003fe:	4b05      	ldr	r3, [pc, #20]	; (20000414 <graphic_ctrl_bit_clear+0x40>)
20000400:	7d1b      	ldrb	r3, [r3, #20]
20000402:	b2db      	uxtb	r3, r3
20000404:	2104      	movs	r1, #4
20000406:	438b      	bics	r3, r1
20000408:	b2db      	uxtb	r3, r3
2000040a:	7513      	strb	r3, [r2, #20]
}
2000040c:	46c0      	nop			; (mov r8, r8)
2000040e:	46bd      	mov	sp, r7
20000410:	b002      	add	sp, #8
20000412:	bd80      	pop	{r7, pc}
20000414:	40021000 	andmi	r1, r2, r0

20000418 <select_controller>:

void select_controller(uint8_c controller)
{
20000418:	b580      	push	{r7, lr}
2000041a:	b082      	sub	sp, #8
2000041c:	af00      	add	r7, sp, #0
2000041e:	0002      	movs	r2, r0
20000420:	1dfb      	adds	r3, r7, #7
20000422:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_CS1 | B_CS2);
20000424:	2018      	movs	r0, #24
20000426:	f7ff ffd5 	bl	200003d4 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(controller);
2000042a:	1dfb      	adds	r3, r7, #7
2000042c:	781b      	ldrb	r3, [r3, #0]
2000042e:	0018      	movs	r0, r3
20000430:	f7ff ffb2 	bl	20000398 <graphic_ctrl_bit_set>
}
20000434:	46c0      	nop			; (mov r8, r8)
20000436:	46bd      	mov	sp, r7
20000438:	b002      	add	sp, #8
2000043a:	bd80      	pop	{r7, pc}

2000043c <graphic_wait_ready>:

void graphic_wait_ready(void)
{
2000043c:	b580      	push	{r7, lr}
2000043e:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_clear(B_E);
20000440:	2040      	movs	r0, #64	; 0x40
20000442:	f7ff ffc7 	bl	200003d4 <graphic_ctrl_bit_clear>

	GPIO_E.MODER = 0x00005555;
20000446:	4b13      	ldr	r3, [pc, #76]	; (20000494 <graphic_wait_ready+0x58>)
20000448:	4a13      	ldr	r2, [pc, #76]	; (20000498 <graphic_wait_ready+0x5c>)
2000044a:	601a      	str	r2, [r3, #0]

	graphic_ctrl_bit_set(B_RW);
2000044c:	2002      	movs	r0, #2
2000044e:	f7ff ffa3 	bl	20000398 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RS);
20000452:	2001      	movs	r0, #1
20000454:	f7ff ffbe 	bl	200003d4 <graphic_ctrl_bit_clear>

	delay_500ns();
20000458:	f7ff ff60 	bl	2000031c <delay_500ns>

	while (TRUE)
	{
		graphic_ctrl_bit_set(B_E);
2000045c:	2040      	movs	r0, #64	; 0x40
2000045e:	f7ff ff9b 	bl	20000398 <graphic_ctrl_bit_set>
		delay_500ns();
20000462:	f7ff ff5b 	bl	2000031c <delay_500ns>
		graphic_ctrl_bit_clear(B_E);
20000466:	2040      	movs	r0, #64	; 0x40
20000468:	f7ff ffb4 	bl	200003d4 <graphic_ctrl_bit_clear>
		delay_500ns();
2000046c:	f7ff ff56 	bl	2000031c <delay_500ns>
		if ((GPIO_E.IDR_HIGH & LCD_BUSY) == 0)
20000470:	4b08      	ldr	r3, [pc, #32]	; (20000494 <graphic_wait_ready+0x58>)
20000472:	7c5b      	ldrb	r3, [r3, #17]
20000474:	b2db      	uxtb	r3, r3
20000476:	b25b      	sxtb	r3, r3
20000478:	2b00      	cmp	r3, #0
2000047a:	da00      	bge.n	2000047e <graphic_wait_ready+0x42>
		graphic_ctrl_bit_set(B_E);
2000047c:	e7ee      	b.n	2000045c <graphic_wait_ready+0x20>
		{
			break;
2000047e:	46c0      	nop			; (mov r8, r8)
		}
	}

	graphic_ctrl_bit_set(B_E);
20000480:	2040      	movs	r0, #64	; 0x40
20000482:	f7ff ff89 	bl	20000398 <graphic_ctrl_bit_set>
	GPIO_E.MODER = 0x55555555;
20000486:	4b03      	ldr	r3, [pc, #12]	; (20000494 <graphic_wait_ready+0x58>)
20000488:	4a04      	ldr	r2, [pc, #16]	; (2000049c <graphic_wait_ready+0x60>)
2000048a:	601a      	str	r2, [r3, #0]
}
2000048c:	46c0      	nop			; (mov r8, r8)
2000048e:	46bd      	mov	sp, r7
20000490:	bd80      	pop	{r7, pc}
20000492:	46c0      	nop			; (mov r8, r8)
20000494:	40021000 	andmi	r1, r2, r0
20000498:	00005555 	andeq	r5, r0, r5, asr r5
2000049c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200004a0 <graphic_read>:

uint8_c graphic_read(uint8_c controller)
{
200004a0:	b580      	push	{r7, lr}
200004a2:	b084      	sub	sp, #16
200004a4:	af00      	add	r7, sp, #0
200004a6:	0002      	movs	r2, r0
200004a8:	1dfb      	adds	r3, r7, #7
200004aa:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200004ac:	2040      	movs	r0, #64	; 0x40
200004ae:	f7ff ff91 	bl	200003d4 <graphic_ctrl_bit_clear>

	GPIO_E.MODER = 0x00005555;
200004b2:	4b13      	ldr	r3, [pc, #76]	; (20000500 <graphic_read+0x60>)
200004b4:	4a13      	ldr	r2, [pc, #76]	; (20000504 <graphic_read+0x64>)
200004b6:	601a      	str	r2, [r3, #0]

	graphic_ctrl_bit_set(B_RS | B_RW);
200004b8:	2003      	movs	r0, #3
200004ba:	f7ff ff6d 	bl	20000398 <graphic_ctrl_bit_set>

	select_controller(controller);
200004be:	1dfb      	adds	r3, r7, #7
200004c0:	781b      	ldrb	r3, [r3, #0]
200004c2:	0018      	movs	r0, r3
200004c4:	f7ff ffa8 	bl	20000418 <select_controller>
	delay_500ns();
200004c8:	f7ff ff28 	bl	2000031c <delay_500ns>

	graphic_ctrl_bit_set(B_E);
200004cc:	2040      	movs	r0, #64	; 0x40
200004ce:	f7ff ff63 	bl	20000398 <graphic_ctrl_bit_set>
	delay_500ns();
200004d2:	f7ff ff23 	bl	2000031c <delay_500ns>

	uint8_c rv = GPIO_E.IDR_HIGH;
200004d6:	4a0a      	ldr	r2, [pc, #40]	; (20000500 <graphic_read+0x60>)
200004d8:	230f      	movs	r3, #15
200004da:	18fb      	adds	r3, r7, r3
200004dc:	7c52      	ldrb	r2, [r2, #17]
200004de:	701a      	strb	r2, [r3, #0]

	graphic_ctrl_bit_clear(B_E);
200004e0:	2040      	movs	r0, #64	; 0x40
200004e2:	f7ff ff77 	bl	200003d4 <graphic_ctrl_bit_clear>

	GPIO_E.MODER = 0x55555555;
200004e6:	4b06      	ldr	r3, [pc, #24]	; (20000500 <graphic_read+0x60>)
200004e8:	4a07      	ldr	r2, [pc, #28]	; (20000508 <graphic_read+0x68>)
200004ea:	601a      	str	r2, [r3, #0]

	// TODO: MAY NEED CHANGE

	graphic_wait_ready();
200004ec:	f7ff ffa6 	bl	2000043c <graphic_wait_ready>

	return rv;
200004f0:	230f      	movs	r3, #15
200004f2:	18fb      	adds	r3, r7, r3
200004f4:	781b      	ldrb	r3, [r3, #0]
}
200004f6:	0018      	movs	r0, r3
200004f8:	46bd      	mov	sp, r7
200004fa:	b004      	add	sp, #16
200004fc:	bd80      	pop	{r7, pc}
200004fe:	46c0      	nop			; (mov r8, r8)
20000500:	40021000 	andmi	r1, r2, r0
20000504:	00005555 	andeq	r5, r0, r5, asr r5
20000508:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000050c <graphic_read_data>:

uint8_c graphic_read_data(uint8_c controller)
{
2000050c:	b580      	push	{r7, lr}
2000050e:	b082      	sub	sp, #8
20000510:	af00      	add	r7, sp, #0
20000512:	0002      	movs	r2, r0
20000514:	1dfb      	adds	r3, r7, #7
20000516:	701a      	strb	r2, [r3, #0]
	graphic_read(controller);
20000518:	1dfb      	adds	r3, r7, #7
2000051a:	781b      	ldrb	r3, [r3, #0]
2000051c:	0018      	movs	r0, r3
2000051e:	f7ff ffbf 	bl	200004a0 <graphic_read>
	return graphic_read(controller);
20000522:	1dfb      	adds	r3, r7, #7
20000524:	781b      	ldrb	r3, [r3, #0]
20000526:	0018      	movs	r0, r3
20000528:	f7ff ffba 	bl	200004a0 <graphic_read>
2000052c:	0003      	movs	r3, r0
}
2000052e:	0018      	movs	r0, r3
20000530:	46bd      	mov	sp, r7
20000532:	b002      	add	sp, #8
20000534:	bd80      	pop	{r7, pc}

20000536 <graphic_write>:

void graphic_write(uint8_c value, uint8_c controller)
{
20000536:	b580      	push	{r7, lr}
20000538:	b082      	sub	sp, #8
2000053a:	af00      	add	r7, sp, #0
2000053c:	0002      	movs	r2, r0
2000053e:	1dfb      	adds	r3, r7, #7
20000540:	701a      	strb	r2, [r3, #0]
20000542:	1dbb      	adds	r3, r7, #6
20000544:	1c0a      	adds	r2, r1, #0
20000546:	701a      	strb	r2, [r3, #0]
	GPIO_E.ODR_HIGH = value;
20000548:	4a10      	ldr	r2, [pc, #64]	; (2000058c <graphic_write+0x56>)
2000054a:	1dfb      	adds	r3, r7, #7
2000054c:	781b      	ldrb	r3, [r3, #0]
2000054e:	7553      	strb	r3, [r2, #21]

	select_controller(controller);
20000550:	1dbb      	adds	r3, r7, #6
20000552:	781b      	ldrb	r3, [r3, #0]
20000554:	0018      	movs	r0, r3
20000556:	f7ff ff5f 	bl	20000418 <select_controller>

	delay_500ns();
2000055a:	f7ff fedf 	bl	2000031c <delay_500ns>

	graphic_ctrl_bit_set(B_E);
2000055e:	2040      	movs	r0, #64	; 0x40
20000560:	f7ff ff1a 	bl	20000398 <graphic_ctrl_bit_set>

	delay_500ns();
20000564:	f7ff feda 	bl	2000031c <delay_500ns>

	graphic_ctrl_bit_clear(B_E);
20000568:	2040      	movs	r0, #64	; 0x40
2000056a:	f7ff ff33 	bl	200003d4 <graphic_ctrl_bit_clear>

	graphic_wait_ready();
2000056e:	f7ff ff65 	bl	2000043c <graphic_wait_ready>

	GPIO_E.ODR_HIGH = 0;
20000572:	4b06      	ldr	r3, [pc, #24]	; (2000058c <graphic_write+0x56>)
20000574:	2200      	movs	r2, #0
20000576:	755a      	strb	r2, [r3, #21]
	graphic_ctrl_bit_set(B_E);
20000578:	2040      	movs	r0, #64	; 0x40
2000057a:	f7ff ff0d 	bl	20000398 <graphic_ctrl_bit_set>

	select_controller(0);
2000057e:	2000      	movs	r0, #0
20000580:	f7ff ff4a 	bl	20000418 <select_controller>
}
20000584:	46c0      	nop			; (mov r8, r8)
20000586:	46bd      	mov	sp, r7
20000588:	b002      	add	sp, #8
2000058a:	bd80      	pop	{r7, pc}
2000058c:	40021000 	andmi	r1, r2, r0

20000590 <graphic_write_command>:

void graphic_write_command(uint8_c command, uint8_c controller)
{
20000590:	b580      	push	{r7, lr}
20000592:	b082      	sub	sp, #8
20000594:	af00      	add	r7, sp, #0
20000596:	0002      	movs	r2, r0
20000598:	1dfb      	adds	r3, r7, #7
2000059a:	701a      	strb	r2, [r3, #0]
2000059c:	1dbb      	adds	r3, r7, #6
2000059e:	1c0a      	adds	r2, r1, #0
200005a0:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200005a2:	2040      	movs	r0, #64	; 0x40
200005a4:	f7ff ff16 	bl	200003d4 <graphic_ctrl_bit_clear>

	select_controller(controller);
200005a8:	1dbb      	adds	r3, r7, #6
200005aa:	781b      	ldrb	r3, [r3, #0]
200005ac:	0018      	movs	r0, r3
200005ae:	f7ff ff33 	bl	20000418 <select_controller>

	graphic_ctrl_bit_clear(B_RS | B_RW);
200005b2:	2003      	movs	r0, #3
200005b4:	f7ff ff0e 	bl	200003d4 <graphic_ctrl_bit_clear>

	graphic_write(command, controller);
200005b8:	1dbb      	adds	r3, r7, #6
200005ba:	781a      	ldrb	r2, [r3, #0]
200005bc:	1dfb      	adds	r3, r7, #7
200005be:	781b      	ldrb	r3, [r3, #0]
200005c0:	0011      	movs	r1, r2
200005c2:	0018      	movs	r0, r3
200005c4:	f7ff ffb7 	bl	20000536 <graphic_write>
}
200005c8:	46c0      	nop			; (mov r8, r8)
200005ca:	46bd      	mov	sp, r7
200005cc:	b002      	add	sp, #8
200005ce:	bd80      	pop	{r7, pc}

200005d0 <graphic_write_data>:

void graphic_write_data(uint8_c data, uint8_c controller)
{
200005d0:	b580      	push	{r7, lr}
200005d2:	b082      	sub	sp, #8
200005d4:	af00      	add	r7, sp, #0
200005d6:	0002      	movs	r2, r0
200005d8:	1dfb      	adds	r3, r7, #7
200005da:	701a      	strb	r2, [r3, #0]
200005dc:	1dbb      	adds	r3, r7, #6
200005de:	1c0a      	adds	r2, r1, #0
200005e0:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200005e2:	2040      	movs	r0, #64	; 0x40
200005e4:	f7ff fef6 	bl	200003d4 <graphic_ctrl_bit_clear>

	select_controller(controller);
200005e8:	1dbb      	adds	r3, r7, #6
200005ea:	781b      	ldrb	r3, [r3, #0]
200005ec:	0018      	movs	r0, r3
200005ee:	f7ff ff13 	bl	20000418 <select_controller>

	graphic_ctrl_bit_set(B_RS);
200005f2:	2001      	movs	r0, #1
200005f4:	f7ff fed0 	bl	20000398 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
200005f8:	2002      	movs	r0, #2
200005fa:	f7ff feeb 	bl	200003d4 <graphic_ctrl_bit_clear>

	graphic_write(data, controller);
200005fe:	1dbb      	adds	r3, r7, #6
20000600:	781a      	ldrb	r2, [r3, #0]
20000602:	1dfb      	adds	r3, r7, #7
20000604:	781b      	ldrb	r3, [r3, #0]
20000606:	0011      	movs	r1, r2
20000608:	0018      	movs	r0, r3
2000060a:	f7ff ff94 	bl	20000536 <graphic_write>
}
2000060e:	46c0      	nop			; (mov r8, r8)
20000610:	46bd      	mov	sp, r7
20000612:	b002      	add	sp, #8
20000614:	bd80      	pop	{r7, pc}

20000616 <graphic_initialize>:

void graphic_initialize(void)
{
20000616:	b580      	push	{r7, lr}
20000618:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
2000061a:	2040      	movs	r0, #64	; 0x40
2000061c:	f7ff febc 	bl	20000398 <graphic_ctrl_bit_set>
	delay_micro(10);
20000620:	200a      	movs	r0, #10
20000622:	f7ff fe84 	bl	2000032e <delay_micro>

	graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
20000626:	2078      	movs	r0, #120	; 0x78
20000628:	f7ff fed4 	bl	200003d4 <graphic_ctrl_bit_clear>
	delay_milli(30);
2000062c:	201e      	movs	r0, #30
2000062e:	f7ff fe98 	bl	20000362 <delay_milli>

	graphic_ctrl_bit_set(B_RST);
20000632:	2020      	movs	r0, #32
20000634:	f7ff feb0 	bl	20000398 <graphic_ctrl_bit_set>

	graphic_write_command(LCD_OFF, B_CS1 | B_CS2);
20000638:	2118      	movs	r1, #24
2000063a:	203e      	movs	r0, #62	; 0x3e
2000063c:	f7ff ffa8 	bl	20000590 <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1 | B_CS2);		  // Toggle display
20000640:	2118      	movs	r1, #24
20000642:	203f      	movs	r0, #63	; 0x3f
20000644:	f7ff ffa4 	bl	20000590 <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1 | B_CS2); // start = 0
20000648:	2118      	movs	r1, #24
2000064a:	20c0      	movs	r0, #192	; 0xc0
2000064c:	f7ff ffa0 	bl	20000590 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);	// add = 0
20000650:	2118      	movs	r1, #24
20000652:	2040      	movs	r0, #64	; 0x40
20000654:	f7ff ff9c 	bl	20000590 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1 | B_CS2);   // page = 0
20000658:	2118      	movs	r1, #24
2000065a:	20b8      	movs	r0, #184	; 0xb8
2000065c:	f7ff ff98 	bl	20000590 <graphic_write_command>
	select_controller(0);								  // deactivate both CS signals
20000660:	2000      	movs	r0, #0
20000662:	f7ff fed9 	bl	20000418 <select_controller>
}
20000666:	46c0      	nop			; (mov r8, r8)
20000668:	46bd      	mov	sp, r7
2000066a:	bd80      	pop	{r7, pc}

2000066c <graphic_clear_screen>:

void graphic_clear_screen()
{
2000066c:	b580      	push	{r7, lr}
2000066e:	b082      	sub	sp, #8
20000670:	af00      	add	r7, sp, #0

	for (uint8 i = 0; i < 8; i++)
20000672:	1dfb      	adds	r3, r7, #7
20000674:	2200      	movs	r2, #0
20000676:	701a      	strb	r2, [r3, #0]
20000678:	e023      	b.n	200006c2 <graphic_clear_screen+0x56>
	{
		graphic_write_command(LCD_SET_PAGE | i, B_CS1 | B_CS2);
2000067a:	1dfb      	adds	r3, r7, #7
2000067c:	781b      	ldrb	r3, [r3, #0]
2000067e:	2248      	movs	r2, #72	; 0x48
20000680:	4252      	negs	r2, r2
20000682:	4313      	orrs	r3, r2
20000684:	b2db      	uxtb	r3, r3
20000686:	2118      	movs	r1, #24
20000688:	0018      	movs	r0, r3
2000068a:	f7ff ff81 	bl	20000590 <graphic_write_command>
		graphic_write_command(LCD_SET_ADD | 0, B_CS1 | B_CS2);
2000068e:	2118      	movs	r1, #24
20000690:	2040      	movs	r0, #64	; 0x40
20000692:	f7ff ff7d 	bl	20000590 <graphic_write_command>
		for (uint8 j = 0; j < 64; j++)
20000696:	1dbb      	adds	r3, r7, #6
20000698:	2200      	movs	r2, #0
2000069a:	701a      	strb	r2, [r3, #0]
2000069c:	e008      	b.n	200006b0 <graphic_clear_screen+0x44>
		{
			graphic_write_data(0, B_CS1 | B_CS2);
2000069e:	2118      	movs	r1, #24
200006a0:	2000      	movs	r0, #0
200006a2:	f7ff ff95 	bl	200005d0 <graphic_write_data>
		for (uint8 j = 0; j < 64; j++)
200006a6:	1dbb      	adds	r3, r7, #6
200006a8:	781a      	ldrb	r2, [r3, #0]
200006aa:	1dbb      	adds	r3, r7, #6
200006ac:	3201      	adds	r2, #1
200006ae:	701a      	strb	r2, [r3, #0]
200006b0:	1dbb      	adds	r3, r7, #6
200006b2:	781b      	ldrb	r3, [r3, #0]
200006b4:	2b3f      	cmp	r3, #63	; 0x3f
200006b6:	d9f2      	bls.n	2000069e <graphic_clear_screen+0x32>
	for (uint8 i = 0; i < 8; i++)
200006b8:	1dfb      	adds	r3, r7, #7
200006ba:	781a      	ldrb	r2, [r3, #0]
200006bc:	1dfb      	adds	r3, r7, #7
200006be:	3201      	adds	r2, #1
200006c0:	701a      	strb	r2, [r3, #0]
200006c2:	1dfb      	adds	r3, r7, #7
200006c4:	781b      	ldrb	r3, [r3, #0]
200006c6:	2b07      	cmp	r3, #7
200006c8:	d9d7      	bls.n	2000067a <graphic_clear_screen+0xe>
		}
	}
}
200006ca:	46c0      	nop			; (mov r8, r8)
200006cc:	46bd      	mov	sp, r7
200006ce:	b002      	add	sp, #8
200006d0:	bd80      	pop	{r7, pc}

200006d2 <pixel>:

void pixel(uint8_c x, uint8_c y, uint8_c set)
{
200006d2:	b590      	push	{r4, r7, lr}
200006d4:	b085      	sub	sp, #20
200006d6:	af00      	add	r7, sp, #0
200006d8:	0004      	movs	r4, r0
200006da:	0008      	movs	r0, r1
200006dc:	0011      	movs	r1, r2
200006de:	1dfb      	adds	r3, r7, #7
200006e0:	1c22      	adds	r2, r4, #0
200006e2:	701a      	strb	r2, [r3, #0]
200006e4:	1dbb      	adds	r3, r7, #6
200006e6:	1c02      	adds	r2, r0, #0
200006e8:	701a      	strb	r2, [r3, #0]
200006ea:	1d7b      	adds	r3, r7, #5
200006ec:	1c0a      	adds	r2, r1, #0
200006ee:	701a      	strb	r2, [r3, #0]
	if (x > 128 || x < 1)
200006f0:	1dfb      	adds	r3, r7, #7
200006f2:	781b      	ldrb	r3, [r3, #0]
200006f4:	2b80      	cmp	r3, #128	; 0x80
200006f6:	d900      	bls.n	200006fa <pixel+0x28>
200006f8:	e0a5      	b.n	20000846 <pixel+0x174>
200006fa:	1dfb      	adds	r3, r7, #7
200006fc:	781b      	ldrb	r3, [r3, #0]
200006fe:	2b00      	cmp	r3, #0
20000700:	d100      	bne.n	20000704 <pixel+0x32>
20000702:	e0a0      	b.n	20000846 <pixel+0x174>
		return;

	if (y > 64 || y < 1)
20000704:	1dbb      	adds	r3, r7, #6
20000706:	781b      	ldrb	r3, [r3, #0]
20000708:	2b40      	cmp	r3, #64	; 0x40
2000070a:	d900      	bls.n	2000070e <pixel+0x3c>
2000070c:	e09d      	b.n	2000084a <pixel+0x178>
2000070e:	1dbb      	adds	r3, r7, #6
20000710:	781b      	ldrb	r3, [r3, #0]
20000712:	2b00      	cmp	r3, #0
20000714:	d100      	bne.n	20000718 <pixel+0x46>
20000716:	e098      	b.n	2000084a <pixel+0x178>
		return;

	uint8_c row = (y - 1) / 8;
20000718:	1dbb      	adds	r3, r7, #6
2000071a:	781b      	ldrb	r3, [r3, #0]
2000071c:	3b01      	subs	r3, #1
2000071e:	2b00      	cmp	r3, #0
20000720:	da00      	bge.n	20000724 <pixel+0x52>
20000722:	3307      	adds	r3, #7
20000724:	10db      	asrs	r3, r3, #3
20000726:	001a      	movs	r2, r3
20000728:	230c      	movs	r3, #12
2000072a:	18fb      	adds	r3, r7, r3
2000072c:	701a      	strb	r2, [r3, #0]
	uint8 mask = 1 << ((y - 1) % 8);
2000072e:	1dbb      	adds	r3, r7, #6
20000730:	781b      	ldrb	r3, [r3, #0]
20000732:	3b01      	subs	r3, #1
20000734:	4a47      	ldr	r2, [pc, #284]	; (20000854 <pixel+0x182>)
20000736:	4013      	ands	r3, r2
20000738:	d504      	bpl.n	20000744 <pixel+0x72>
2000073a:	3b01      	subs	r3, #1
2000073c:	2208      	movs	r2, #8
2000073e:	4252      	negs	r2, r2
20000740:	4313      	orrs	r3, r2
20000742:	3301      	adds	r3, #1
20000744:	001a      	movs	r2, r3
20000746:	2301      	movs	r3, #1
20000748:	4093      	lsls	r3, r2
2000074a:	001a      	movs	r2, r3
2000074c:	230f      	movs	r3, #15
2000074e:	18fb      	adds	r3, r7, r3
20000750:	701a      	strb	r2, [r3, #0]

	if (set == 0)
20000752:	1d7b      	adds	r3, r7, #5
20000754:	781b      	ldrb	r3, [r3, #0]
20000756:	2b00      	cmp	r3, #0
20000758:	d106      	bne.n	20000768 <pixel+0x96>
	{
		mask = ~mask;
2000075a:	230f      	movs	r3, #15
2000075c:	18fb      	adds	r3, r7, r3
2000075e:	220f      	movs	r2, #15
20000760:	18ba      	adds	r2, r7, r2
20000762:	7812      	ldrb	r2, [r2, #0]
20000764:	43d2      	mvns	r2, r2
20000766:	701a      	strb	r2, [r3, #0]
	}

	uint8 controller;
	uint8 column;
	if (x > 64)
20000768:	1dfb      	adds	r3, r7, #7
2000076a:	781b      	ldrb	r3, [r3, #0]
2000076c:	2b40      	cmp	r3, #64	; 0x40
2000076e:	d90a      	bls.n	20000786 <pixel+0xb4>
	{
		controller = B_CS2;
20000770:	230e      	movs	r3, #14
20000772:	18fb      	adds	r3, r7, r3
20000774:	2210      	movs	r2, #16
20000776:	701a      	strb	r2, [r3, #0]
		column = x - 65;
20000778:	230d      	movs	r3, #13
2000077a:	18fb      	adds	r3, r7, r3
2000077c:	1dfa      	adds	r2, r7, #7
2000077e:	7812      	ldrb	r2, [r2, #0]
20000780:	3a41      	subs	r2, #65	; 0x41
20000782:	701a      	strb	r2, [r3, #0]
20000784:	e009      	b.n	2000079a <pixel+0xc8>
	}
	else
	{
		controller = B_CS1;
20000786:	230e      	movs	r3, #14
20000788:	18fb      	adds	r3, r7, r3
2000078a:	2208      	movs	r2, #8
2000078c:	701a      	strb	r2, [r3, #0]
		column = x - 1;
2000078e:	230d      	movs	r3, #13
20000790:	18fb      	adds	r3, r7, r3
20000792:	1dfa      	adds	r2, r7, #7
20000794:	7812      	ldrb	r2, [r2, #0]
20000796:	3a01      	subs	r2, #1
20000798:	701a      	strb	r2, [r3, #0]
	}

	graphic_write_command(LCD_SET_ADD | column, controller);
2000079a:	230d      	movs	r3, #13
2000079c:	18fb      	adds	r3, r7, r3
2000079e:	781b      	ldrb	r3, [r3, #0]
200007a0:	2240      	movs	r2, #64	; 0x40
200007a2:	4313      	orrs	r3, r2
200007a4:	b2da      	uxtb	r2, r3
200007a6:	230e      	movs	r3, #14
200007a8:	18fb      	adds	r3, r7, r3
200007aa:	781b      	ldrb	r3, [r3, #0]
200007ac:	0019      	movs	r1, r3
200007ae:	0010      	movs	r0, r2
200007b0:	f7ff feee 	bl	20000590 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | row, controller);
200007b4:	230c      	movs	r3, #12
200007b6:	18fb      	adds	r3, r7, r3
200007b8:	781b      	ldrb	r3, [r3, #0]
200007ba:	2248      	movs	r2, #72	; 0x48
200007bc:	4252      	negs	r2, r2
200007be:	4313      	orrs	r3, r2
200007c0:	b2da      	uxtb	r2, r3
200007c2:	230e      	movs	r3, #14
200007c4:	18fb      	adds	r3, r7, r3
200007c6:	781b      	ldrb	r3, [r3, #0]
200007c8:	0019      	movs	r1, r3
200007ca:	0010      	movs	r0, r2
200007cc:	f7ff fee0 	bl	20000590 <graphic_write_command>

	uint8_c temp = graphic_read_data(controller);
200007d0:	230b      	movs	r3, #11
200007d2:	18fc      	adds	r4, r7, r3
200007d4:	230e      	movs	r3, #14
200007d6:	18fb      	adds	r3, r7, r3
200007d8:	781b      	ldrb	r3, [r3, #0]
200007da:	0018      	movs	r0, r3
200007dc:	f7ff fe96 	bl	2000050c <graphic_read_data>
200007e0:	0003      	movs	r3, r0
200007e2:	7023      	strb	r3, [r4, #0]

	graphic_write_command(LCD_SET_ADD | column, controller);
200007e4:	230d      	movs	r3, #13
200007e6:	18fb      	adds	r3, r7, r3
200007e8:	781b      	ldrb	r3, [r3, #0]
200007ea:	2240      	movs	r2, #64	; 0x40
200007ec:	4313      	orrs	r3, r2
200007ee:	b2da      	uxtb	r2, r3
200007f0:	230e      	movs	r3, #14
200007f2:	18fb      	adds	r3, r7, r3
200007f4:	781b      	ldrb	r3, [r3, #0]
200007f6:	0019      	movs	r1, r3
200007f8:	0010      	movs	r0, r2
200007fa:	f7ff fec9 	bl	20000590 <graphic_write_command>

	if (set)
200007fe:	1d7b      	adds	r3, r7, #5
20000800:	781b      	ldrb	r3, [r3, #0]
20000802:	2b00      	cmp	r3, #0
20000804:	d00a      	beq.n	2000081c <pixel+0x14a>
		mask = mask | temp;
20000806:	230f      	movs	r3, #15
20000808:	18fb      	adds	r3, r7, r3
2000080a:	220f      	movs	r2, #15
2000080c:	18b9      	adds	r1, r7, r2
2000080e:	220b      	movs	r2, #11
20000810:	18ba      	adds	r2, r7, r2
20000812:	7809      	ldrb	r1, [r1, #0]
20000814:	7812      	ldrb	r2, [r2, #0]
20000816:	430a      	orrs	r2, r1
20000818:	701a      	strb	r2, [r3, #0]
2000081a:	e009      	b.n	20000830 <pixel+0x15e>
	else
		mask = mask & temp;
2000081c:	230f      	movs	r3, #15
2000081e:	18fb      	adds	r3, r7, r3
20000820:	220f      	movs	r2, #15
20000822:	18ba      	adds	r2, r7, r2
20000824:	210b      	movs	r1, #11
20000826:	1879      	adds	r1, r7, r1
20000828:	7812      	ldrb	r2, [r2, #0]
2000082a:	7809      	ldrb	r1, [r1, #0]
2000082c:	400a      	ands	r2, r1
2000082e:	701a      	strb	r2, [r3, #0]
	graphic_write_data(mask, controller);
20000830:	230e      	movs	r3, #14
20000832:	18fb      	adds	r3, r7, r3
20000834:	781a      	ldrb	r2, [r3, #0]
20000836:	230f      	movs	r3, #15
20000838:	18fb      	adds	r3, r7, r3
2000083a:	781b      	ldrb	r3, [r3, #0]
2000083c:	0011      	movs	r1, r2
2000083e:	0018      	movs	r0, r3
20000840:	f7ff fec6 	bl	200005d0 <graphic_write_data>
20000844:	e002      	b.n	2000084c <pixel+0x17a>
		return;
20000846:	46c0      	nop			; (mov r8, r8)
20000848:	e000      	b.n	2000084c <pixel+0x17a>
		return;
2000084a:	46c0      	nop			; (mov r8, r8)
}
2000084c:	46bd      	mov	sp, r7
2000084e:	b005      	add	sp, #20
20000850:	bd90      	pop	{r4, r7, pc}
20000852:	46c0      	nop			; (mov r8, r8)
20000854:	80000007 	andhi	r0, r0, r7

20000858 <__udivsi3>:
20000858:	2200      	movs	r2, #0
2000085a:	0843      	lsrs	r3, r0, #1
2000085c:	428b      	cmp	r3, r1
2000085e:	d374      	bcc.n	2000094a <__udivsi3+0xf2>
20000860:	0903      	lsrs	r3, r0, #4
20000862:	428b      	cmp	r3, r1
20000864:	d35f      	bcc.n	20000926 <__udivsi3+0xce>
20000866:	0a03      	lsrs	r3, r0, #8
20000868:	428b      	cmp	r3, r1
2000086a:	d344      	bcc.n	200008f6 <__udivsi3+0x9e>
2000086c:	0b03      	lsrs	r3, r0, #12
2000086e:	428b      	cmp	r3, r1
20000870:	d328      	bcc.n	200008c4 <__udivsi3+0x6c>
20000872:	0c03      	lsrs	r3, r0, #16
20000874:	428b      	cmp	r3, r1
20000876:	d30d      	bcc.n	20000894 <__udivsi3+0x3c>
20000878:	22ff      	movs	r2, #255	; 0xff
2000087a:	0209      	lsls	r1, r1, #8
2000087c:	ba12      	rev	r2, r2
2000087e:	0c03      	lsrs	r3, r0, #16
20000880:	428b      	cmp	r3, r1
20000882:	d302      	bcc.n	2000088a <__udivsi3+0x32>
20000884:	1212      	asrs	r2, r2, #8
20000886:	0209      	lsls	r1, r1, #8
20000888:	d065      	beq.n	20000956 <__udivsi3+0xfe>
2000088a:	0b03      	lsrs	r3, r0, #12
2000088c:	428b      	cmp	r3, r1
2000088e:	d319      	bcc.n	200008c4 <__udivsi3+0x6c>
20000890:	e000      	b.n	20000894 <__udivsi3+0x3c>
20000892:	0a09      	lsrs	r1, r1, #8
20000894:	0bc3      	lsrs	r3, r0, #15
20000896:	428b      	cmp	r3, r1
20000898:	d301      	bcc.n	2000089e <__udivsi3+0x46>
2000089a:	03cb      	lsls	r3, r1, #15
2000089c:	1ac0      	subs	r0, r0, r3
2000089e:	4152      	adcs	r2, r2
200008a0:	0b83      	lsrs	r3, r0, #14
200008a2:	428b      	cmp	r3, r1
200008a4:	d301      	bcc.n	200008aa <__udivsi3+0x52>
200008a6:	038b      	lsls	r3, r1, #14
200008a8:	1ac0      	subs	r0, r0, r3
200008aa:	4152      	adcs	r2, r2
200008ac:	0b43      	lsrs	r3, r0, #13
200008ae:	428b      	cmp	r3, r1
200008b0:	d301      	bcc.n	200008b6 <__udivsi3+0x5e>
200008b2:	034b      	lsls	r3, r1, #13
200008b4:	1ac0      	subs	r0, r0, r3
200008b6:	4152      	adcs	r2, r2
200008b8:	0b03      	lsrs	r3, r0, #12
200008ba:	428b      	cmp	r3, r1
200008bc:	d301      	bcc.n	200008c2 <__udivsi3+0x6a>
200008be:	030b      	lsls	r3, r1, #12
200008c0:	1ac0      	subs	r0, r0, r3
200008c2:	4152      	adcs	r2, r2
200008c4:	0ac3      	lsrs	r3, r0, #11
200008c6:	428b      	cmp	r3, r1
200008c8:	d301      	bcc.n	200008ce <__udivsi3+0x76>
200008ca:	02cb      	lsls	r3, r1, #11
200008cc:	1ac0      	subs	r0, r0, r3
200008ce:	4152      	adcs	r2, r2
200008d0:	0a83      	lsrs	r3, r0, #10
200008d2:	428b      	cmp	r3, r1
200008d4:	d301      	bcc.n	200008da <__udivsi3+0x82>
200008d6:	028b      	lsls	r3, r1, #10
200008d8:	1ac0      	subs	r0, r0, r3
200008da:	4152      	adcs	r2, r2
200008dc:	0a43      	lsrs	r3, r0, #9
200008de:	428b      	cmp	r3, r1
200008e0:	d301      	bcc.n	200008e6 <__udivsi3+0x8e>
200008e2:	024b      	lsls	r3, r1, #9
200008e4:	1ac0      	subs	r0, r0, r3
200008e6:	4152      	adcs	r2, r2
200008e8:	0a03      	lsrs	r3, r0, #8
200008ea:	428b      	cmp	r3, r1
200008ec:	d301      	bcc.n	200008f2 <__udivsi3+0x9a>
200008ee:	020b      	lsls	r3, r1, #8
200008f0:	1ac0      	subs	r0, r0, r3
200008f2:	4152      	adcs	r2, r2
200008f4:	d2cd      	bcs.n	20000892 <__udivsi3+0x3a>
200008f6:	09c3      	lsrs	r3, r0, #7
200008f8:	428b      	cmp	r3, r1
200008fa:	d301      	bcc.n	20000900 <__udivsi3+0xa8>
200008fc:	01cb      	lsls	r3, r1, #7
200008fe:	1ac0      	subs	r0, r0, r3
20000900:	4152      	adcs	r2, r2
20000902:	0983      	lsrs	r3, r0, #6
20000904:	428b      	cmp	r3, r1
20000906:	d301      	bcc.n	2000090c <__udivsi3+0xb4>
20000908:	018b      	lsls	r3, r1, #6
2000090a:	1ac0      	subs	r0, r0, r3
2000090c:	4152      	adcs	r2, r2
2000090e:	0943      	lsrs	r3, r0, #5
20000910:	428b      	cmp	r3, r1
20000912:	d301      	bcc.n	20000918 <__udivsi3+0xc0>
20000914:	014b      	lsls	r3, r1, #5
20000916:	1ac0      	subs	r0, r0, r3
20000918:	4152      	adcs	r2, r2
2000091a:	0903      	lsrs	r3, r0, #4
2000091c:	428b      	cmp	r3, r1
2000091e:	d301      	bcc.n	20000924 <__udivsi3+0xcc>
20000920:	010b      	lsls	r3, r1, #4
20000922:	1ac0      	subs	r0, r0, r3
20000924:	4152      	adcs	r2, r2
20000926:	08c3      	lsrs	r3, r0, #3
20000928:	428b      	cmp	r3, r1
2000092a:	d301      	bcc.n	20000930 <__udivsi3+0xd8>
2000092c:	00cb      	lsls	r3, r1, #3
2000092e:	1ac0      	subs	r0, r0, r3
20000930:	4152      	adcs	r2, r2
20000932:	0883      	lsrs	r3, r0, #2
20000934:	428b      	cmp	r3, r1
20000936:	d301      	bcc.n	2000093c <__udivsi3+0xe4>
20000938:	008b      	lsls	r3, r1, #2
2000093a:	1ac0      	subs	r0, r0, r3
2000093c:	4152      	adcs	r2, r2
2000093e:	0843      	lsrs	r3, r0, #1
20000940:	428b      	cmp	r3, r1
20000942:	d301      	bcc.n	20000948 <__udivsi3+0xf0>
20000944:	004b      	lsls	r3, r1, #1
20000946:	1ac0      	subs	r0, r0, r3
20000948:	4152      	adcs	r2, r2
2000094a:	1a41      	subs	r1, r0, r1
2000094c:	d200      	bcs.n	20000950 <__udivsi3+0xf8>
2000094e:	4601      	mov	r1, r0
20000950:	4152      	adcs	r2, r2
20000952:	4610      	mov	r0, r2
20000954:	4770      	bx	lr
20000956:	e7ff      	b.n	20000958 <__udivsi3+0x100>
20000958:	b501      	push	{r0, lr}
2000095a:	2000      	movs	r0, #0
2000095c:	f000 f806 	bl	2000096c <__aeabi_idiv0>
20000960:	bd02      	pop	{r1, pc}
20000962:	46c0      	nop			; (mov r8, r8)

20000964 <__aeabi_uidivmod>:
20000964:	2900      	cmp	r1, #0
20000966:	d0f7      	beq.n	20000958 <__udivsi3+0x100>
20000968:	e776      	b.n	20000858 <__udivsi3>
2000096a:	4770      	bx	lr

2000096c <__aeabi_idiv0>:
2000096c:	4770      	bx	lr
2000096e:	46c0      	nop			; (mov r8, r8)

20000970 <memcpy>:
20000970:	2300      	movs	r3, #0
20000972:	b510      	push	{r4, lr}
20000974:	429a      	cmp	r2, r3
20000976:	d100      	bne.n	2000097a <memcpy+0xa>
20000978:	bd10      	pop	{r4, pc}
2000097a:	5ccc      	ldrb	r4, [r1, r3]
2000097c:	54c4      	strb	r4, [r0, r3]
2000097e:	3301      	adds	r3, #1
20000980:	e7f8      	b.n	20000974 <memcpy+0x4>
	...

20000984 <ball>:
20000984:	2000099c 	mulcs	r0, ip, r9
20000988:	20400101 	subcs	r0, r0, r1, lsl #2
2000098c:	20000257 	andcs	r0, r0, r7, asr r2
20000990:	200001d9 	ldrdcs	r0, [r0], -r9
20000994:	20000041 	andcs	r0, r0, r1, asr #32
20000998:	20000011 	andcs	r0, r0, r1, lsl r0

2000099c <ballGeometry>:
2000099c:	0004040c 	andeq	r0, r4, ip, lsl #8
200009a0:	01020001 	tsteq	r2, r1
200009a4:	01010100 	mrseq	r0, (UNDEF: 17)
200009a8:	02030102 	andeq	r0, r3, #-2147483648	; 0x80000000
200009ac:	02010200 	andeq	r0, r1, #0, 4
200009b0:	03030202 	movweq	r0, #12802	; 0x3202
200009b4:	00020301 	andeq	r0, r2, r1, lsl #6
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000536 	andeq	r0, r0, r6, lsr r5
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000072 	andeq	r0, r0, r2, ror r0
  10:	0001480c 	andeq	r4, r1, ip, lsl #16
	...
  20:	01c40200 	biceq	r0, r4, r0, lsl #4
  24:	07030000 	streq	r0, [r3, -r0]
  28:	0000002c 	andeq	r0, r0, ip, lsr #32
  2c:	35070403 	strcc	r0, [r7, #-1027]	; 0xfffffbfd
  30:	02000001 	andeq	r0, r0, #1
  34:	000001bd 			; <UNDEFINED> instruction: 0x000001bd
  38:	003e0803 	eorseq	r0, lr, r3, lsl #16
  3c:	02030000 	andeq	r0, r3, #0
  40:	00012f07 	andeq	r2, r1, r7, lsl #30
  44:	003e0400 	eorseq	r0, lr, r0, lsl #8
  48:	94020000 	strls	r0, [r2], #-0
  4c:	03000002 	movweq	r0, #2
  50:	00005509 	andeq	r5, r0, r9, lsl #10
  54:	08010300 	stmdaeq	r1, {r8, r9}
  58:	0000010a 	andeq	r0, r0, sl, lsl #2
  5c:	00005504 	andeq	r5, r0, r4, lsl #10
  60:	05040500 	streq	r0, [r4, #-1280]	; 0xfffffb00
  64:	00746e69 	rsbseq	r6, r4, r9, ror #28
  68:	80050203 	andhi	r0, r5, r3, lsl #4
  6c:	02000002 	andeq	r0, r0, #2
  70:	00000295 	muleq	r0, r5, r2
  74:	007a0d03 	rsbseq	r0, sl, r3, lsl #26
  78:	01030000 	mrseq	r0, (UNDEF: 3)
  7c:	00010c06 	andeq	r0, r1, r6, lsl #24
  80:	02200200 	eoreq	r0, r0, #0, 4
  84:	10030000 	andne	r0, r3, r0
  88:	00000045 	andeq	r0, r0, r5, asr #32
  8c:	0001a802 	andeq	sl, r1, r2, lsl #16
  90:	5c110300 	ldcpl	3, cr0, [r1], {-0}
  94:	06000000 	streq	r0, [r0], -r0
  98:	b80f0402 	stmdalt	pc, {r1, sl}	; <UNPREDICTABLE>
  9c:	07000000 	streq	r0, [r0, -r0]
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	004a1004 	subeq	r1, sl, r4
  a8:	07000000 	streq	r0, [r0, -r0]
  ac:	00000024 	andeq	r0, r0, r4, lsr #32
  b0:	004a1104 	subeq	r1, sl, r4, lsl #2
  b4:	00010000 	andeq	r0, r1, r0
  b8:	0e040208 	cdpeq	2, 0, cr0, cr4, cr8, {0}
  bc:	000000d1 	ldrdeq	r0, [r0], -r1
  c0:	52444909 	subpl	r4, r4, #147456	; 0x24000
  c4:	330e0400 	movwcc	r0, #58368	; 0xe400
  c8:	0a000000 	beq	d0 <startup-0x1fffff30>
  cc:	00000097 	muleq	r0, r7, r0
  d0:	04020600 	streq	r0, [r2], #-1536	; 0xfffffa00
  d4:	0000f217 	andeq	pc, r0, r7, lsl r2	; <UNPREDICTABLE>
  d8:	02050700 	andeq	r0, r5, #0, 14
  dc:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
  e0:	0000004a 	andeq	r0, r0, sl, asr #32
  e4:	01260700 			; <UNDEFINED> instruction: 0x01260700
  e8:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
  ec:	0000004a 	andeq	r0, r0, sl, asr #32
  f0:	02080001 	andeq	r0, r8, #1
  f4:	010b1604 	tsteq	fp, r4, lsl #12
  f8:	4f090000 	svcmi	0x00090000
  fc:	04005244 	streq	r5, [r0], #-580	; 0xfffffdbc
 100:	00003316 	andeq	r3, r0, r6, lsl r3
 104:	00d10a00 	sbcseq	r0, r1, r0, lsl #20
 108:	06000000 	streq	r0, [r0], -r0
 10c:	bc080428 	cfstrslt	mvf0, [r8], {40}	; 0x28
 110:	07000001 	streq	r0, [r0, -r1]
 114:	00000046 	andeq	r0, r0, r6, asr #32
 118:	00210904 	eoreq	r0, r1, r4, lsl #18
 11c:	07000000 	streq	r0, [r0, -r0]
 120:	0000006b 	andeq	r0, r0, fp, rrx
 124:	00330a04 	eorseq	r0, r3, r4, lsl #20
 128:	07040000 	streq	r0, [r4, -r0]
 12c:	00000256 	andeq	r0, r0, r6, asr r2
 130:	00810b04 	addeq	r0, r1, r4, lsl #22
 134:	07060000 	streq	r0, [r6, -r0]
 138:	00000008 	andeq	r0, r0, r8
 13c:	00210c04 	eoreq	r0, r1, r4, lsl #24
 140:	07080000 	streq	r0, [r8, -r0]
 144:	00000229 	andeq	r0, r0, r9, lsr #4
 148:	00210d04 	eoreq	r0, r1, r4, lsl #26
 14c:	0b0c0000 	bleq	300154 <startup-0x1fcffeac>
 150:	000000b8 	strheq	r0, [r0], -r8
 154:	01b50710 			; <UNDEFINED> instruction: 0x01b50710
 158:	14040000 	strne	r0, [r4], #-0
 15c:	00000081 	andeq	r0, r0, r1, lsl #1
 160:	00f20b12 	rscseq	r0, r2, r2, lsl fp
 164:	07140000 	ldreq	r0, [r4, -r0]
 168:	000001e4 	andeq	r0, r0, r4, ror #3
 16c:	00811c04 	addeq	r1, r1, r4, lsl #24
 170:	07160000 	ldreq	r0, [r6, -r0]
 174:	00000032 	andeq	r0, r0, r2, lsr r0
 178:	00211d04 	eoreq	r1, r1, r4, lsl #26
 17c:	07180000 	ldreq	r0, [r8, -r0]
 180:	000001f7 	strdeq	r0, [r0], -r7
 184:	00331e04 	eorseq	r1, r3, r4, lsl #28
 188:	071c0000 	ldreq	r0, [ip, -r0]
 18c:	0000011d 	andeq	r0, r0, sp, lsl r1
 190:	004a1f04 	subeq	r1, sl, r4, lsl #30
 194:	071e0000 	ldreq	r0, [lr, -r0]
 198:	000001f3 	strdeq	r0, [r0], -r3
 19c:	008c2004 	addeq	r2, ip, r4
 1a0:	071f0000 	ldreq	r0, [pc, -r0]
 1a4:	0000003c 	andeq	r0, r0, ip, lsr r0
 1a8:	00212104 	eoreq	r2, r1, r4, lsl #2
 1ac:	07200000 	streq	r0, [r0, -r0]!
 1b0:	00000041 	andeq	r0, r0, r1, asr #32
 1b4:	00212204 	eoreq	r2, r1, r4, lsl #4
 1b8:	00240000 	eoreq	r0, r4, r0
 1bc:	00020d02 	andeq	r0, r2, r2, lsl #26
 1c0:	0b230400 	bleq	8c11c8 <startup-0x1f73ee38>
 1c4:	0c000001 	stceq	0, cr0, [r0], {1}
 1c8:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
 1cc:	0001fd02 	andeq	pc, r1, r2, lsl #26
 1d0:	d7250400 	strle	r0, [r5, -r0, lsl #8]!
 1d4:	0d000001 	stceq	0, cr0, [r0, #-4]
 1d8:	0001c704 	andeq	ip, r1, r4, lsl #14
 1dc:	00640e00 	rsbeq	r0, r4, r0, lsl #28
 1e0:	05020000 	streq	r0, [r2, #-0]
 1e4:	0001fe08 	andeq	pc, r1, r8, lsl #28
 1e8:	00780f00 	rsbseq	r0, r8, r0, lsl #30
 1ec:	004a0a05 	subeq	r0, sl, r5, lsl #20
 1f0:	0f000000 	svceq	0x00000000
 1f4:	0b050079 	bleq	1403e0 <startup-0x1febfc20>
 1f8:	0000004a 	andeq	r0, r0, sl, asr #32
 1fc:	65020001 	strvs	r0, [r2, #-1]
 200:	05000000 	streq	r0, [r0, #-0]
 204:	0001dd0c 	andeq	sp, r1, ip, lsl #26
 208:	029f0e00 	addseq	r0, pc, #0, 28
 20c:	052b0000 	streq	r0, [fp, #-0]!
 210:	0002450e 	andeq	r4, r2, lr, lsl #10
 214:	02160700 	andseq	r0, r6, #0, 14
 218:	10050000 	andne	r0, r5, r0
 21c:	0000004a 	andeq	r0, r0, sl, asr #32
 220:	01de0700 	bicseq	r0, lr, r0, lsl #14
 224:	11050000 	mrsne	r0, (UNDEF: 5)
 228:	0000004a 	andeq	r0, r0, sl, asr #32
 22c:	01420701 	cmpeq	r2, r1, lsl #14
 230:	12050000 	andne	r0, r5, #0
 234:	0000004a 	andeq	r0, r0, sl, asr #32
 238:	78700f02 	ldmdavc	r0!, {r1, r8, r9, sl, fp}^
 23c:	45130500 	ldrmi	r0, [r3, #-1280]	; 0xfffffb00
 240:	03000002 	movweq	r0, #2
 244:	01fe1000 	mvnseq	r1, r0
 248:	02550000 	subseq	r0, r5, #0
 24c:	55110000 	ldrpl	r0, [r1, #-0]
 250:	13000002 	movwne	r0, #2
 254:	07040300 	streq	r0, [r4, -r0, lsl #6]
 258:	0000022f 	andeq	r0, r0, pc, lsr #4
 25c:	0002ba02 	andeq	fp, r2, r2, lsl #20
 260:	09140500 	ldmdbeq	r4, {r8, sl}
 264:	04000002 	streq	r0, [r0], #-2
 268:	0000025c 	andeq	r0, r0, ip, asr r2
 26c:	00001002 	andeq	r1, r0, r2
 270:	77140500 	ldrvc	r0, [r4, -r0, lsl #10]
 274:	0d000002 	stceq	0, cr0, [r0, #-8]
 278:	00020904 	andeq	r0, r2, r4, lsl #18
 27c:	02db0e00 	sbcseq	r0, fp, #0, 28
 280:	01180000 	tsteq	r8, r0
 284:	0002f606 	andeq	pc, r2, r6, lsl #12
 288:	65670f00 	strbvs	r0, [r7, #-3840]!	; 0xfffff100
 28c:	0801006f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6}
 290:	0000026c 	andeq	r0, r0, ip, ror #4
 294:	01b00700 	lslseq	r0, r0, #14
 298:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
 29c:	0000006f 	andeq	r0, r0, pc, rrx
 2a0:	00370704 	eorseq	r0, r7, r4, lsl #14
 2a4:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
 2a8:	0000006f 	andeq	r0, r0, pc, rrx
 2ac:	01180705 	tsteq	r8, r5, lsl #14
 2b0:	0a010000 	beq	402b8 <startup-0x1ffbfd48>
 2b4:	0000006f 	andeq	r0, r0, pc, rrx
 2b8:	005f0706 	subseq	r0, pc, r6, lsl #14
 2bc:	0a010000 	beq	402c4 <startup-0x1ffbfd3c>
 2c0:	0000006f 	andeq	r0, r0, pc, rrx
 2c4:	02380707 	eorseq	r0, r8, #1835008	; 0x1c0000
 2c8:	0b010000 	bleq	402d0 <startup-0x1ffbfd30>
 2cc:	00000307 	andeq	r0, r0, r7, lsl #6
 2d0:	04540708 	ldrbeq	r0, [r4], #-1800	; 0xfffff8f8
 2d4:	0c010000 	stceq	0, cr0, [r1], {-0}
 2d8:	00000307 	andeq	r0, r0, r7, lsl #6
 2dc:	002d070c 	eoreq	r0, sp, ip, lsl #14
 2e0:	0d010000 	stceq	0, cr0, [r1, #-0]
 2e4:	00000307 	andeq	r0, r0, r7, lsl #6
 2e8:	028a0710 	addeq	r0, sl, #16, 14	; 0x400000
 2ec:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
 2f0:	00000322 	andeq	r0, r0, r2, lsr #6
 2f4:	01120014 	tsteq	r2, r4, lsl r0
 2f8:	13000003 	movwne	r0, #3
 2fc:	00000301 	andeq	r0, r0, r1, lsl #6
 300:	7d040d00 	stcvc	13, cr0, [r4, #-0]
 304:	0d000002 	stceq	0, cr0, [r0, #-8]
 308:	0002f604 	andeq	pc, r2, r4, lsl #12
 30c:	03221200 			; <UNDEFINED> instruction: 0x03221200
 310:	01130000 	tsteq	r3, r0
 314:	13000003 	movwne	r0, #3
 318:	0000006f 	andeq	r0, r0, pc, rrx
 31c:	00006f13 	andeq	r6, r0, r3, lsl pc
 320:	040d0000 	streq	r0, [sp], #-0
 324:	0000030d 	andeq	r0, r0, sp, lsl #6
 328:	0002dc02 	andeq	sp, r2, r2, lsl #24
 32c:	7d0f0100 	stfvcs	f0, [pc, #-0]	; 334 <startup-0x1ffffccc>
 330:	02000002 	andeq	r0, r0, #2
 334:	000001cb 	andeq	r0, r0, fp, asr #3
 338:	03010f01 	movweq	r0, #7937	; 0x1f01
 33c:	b6140000 	ldrlt	r0, [r4], -r0
 340:	02000002 	andeq	r0, r0, #2
 344:	00026712 	andeq	r6, r2, r2, lsl r7
 348:	9c030500 	cfstr32ls	mvfx0, [r3], {-0}
 34c:	14200009 	strtne	r0, [r0], #-9
 350:	0000005a 	andeq	r0, r0, sl, asr r0
 354:	03281f02 			; <UNDEFINED> instruction: 0x03281f02
 358:	03050000 	movweq	r0, #20480	; 0x5000
 35c:	20000984 	andcs	r0, r0, r4, lsl #19
 360:	0002cf15 	andeq	ip, r2, r5, lsl pc
 364:	56850200 	strpl	r0, [r5], r0, lsl #4
 368:	7e200002 	cdpvc	0, 2, cr0, cr0, cr2, {0}
 36c:	01000000 	mrseq	r0, (UNDEF: 0)
 370:	0003ce9c 	muleq	r3, ip, lr
 374:	626f1600 	rsbvs	r1, pc, #0, 12
 378:	8502006a 	strhi	r0, [r2, #-106]	; 0xffffff96
 37c:	00000333 	andeq	r0, r0, r3, lsr r3
 380:	17649102 	strbne	r9, [r4, -r2, lsl #2]!
 384:	0000029a 	muleq	r0, sl, r2
 388:	026c8702 	rsbeq	r8, ip, #524288	; 0x80000
 38c:	91020000 	mrsls	r0, (UNDEF: 2)
 390:	004c1770 	subeq	r1, ip, r0, ror r7
 394:	88020000 	stmdahi	r2, {}	; <UNPREDICTABLE>
 398:	0000004a 	andeq	r0, r0, sl, asr #32
 39c:	186f9102 	stmdane	pc!, {r1, r8, ip, pc}^	; <UNPREDICTABLE>
 3a0:	2000026e 	andcs	r0, r0, lr, ror #4
 3a4:	0000005e 	andeq	r0, r0, lr, asr r0
 3a8:	02006919 	andeq	r6, r0, #409600	; 0x64000
 3ac:	0000618a 	andeq	r6, r0, sl, lsl #3
 3b0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 3b4:	00027418 	andeq	r7, r2, r8, lsl r4
 3b8:	00004620 	andeq	r4, r0, r0, lsr #12
 3bc:	02c31700 	sbceq	r1, r3, #0, 14
 3c0:	8c020000 	stchi	0, cr0, [r2], {-0}
 3c4:	000001fe 	strdeq	r0, [r0], -lr
 3c8:	006c9102 	rsbeq	r9, ip, r2, lsl #2
 3cc:	a9150000 	ldmdbge	r5, {}	; <UNPREDICTABLE>
 3d0:	02000002 	andeq	r0, r0, #2
 3d4:	0001d879 	andeq	sp, r1, r9, ror r8
 3d8:	00007e20 	andeq	r7, r0, r0, lsr #28
 3dc:	3c9c0100 	ldfccs	f0, [ip], {0}
 3e0:	16000004 	strne	r0, [r0], -r4
 3e4:	006a626f 	rsbeq	r6, sl, pc, ror #4
 3e8:	03337902 	teqeq	r3, #32768	; 0x8000
 3ec:	91020000 	mrsls	r0, (UNDEF: 2)
 3f0:	029a1764 	addseq	r1, sl, #100, 14	; 0x1900000
 3f4:	7b020000 	blvc	803fc <startup-0x1ff7fc04>
 3f8:	0000026c 	andeq	r0, r0, ip, ror #4
 3fc:	17709102 	ldrbne	r9, [r0, -r2, lsl #2]!
 400:	0000004c 	andeq	r0, r0, ip, asr #32
 404:	004a7c02 	subeq	r7, sl, r2, lsl #24
 408:	91020000 	mrsls	r0, (UNDEF: 2)
 40c:	01f0186f 	mvnseq	r1, pc, ror #16
 410:	005e2000 	subseq	r2, lr, r0
 414:	69190000 	ldmdbvs	r9, {}	; <UNPREDICTABLE>
 418:	617e0200 	cmnvs	lr, r0, lsl #4
 41c:	02000000 	andeq	r0, r0, #0
 420:	f6187491 			; <UNDEFINED> instruction: 0xf6187491
 424:	46200001 	strtmi	r0, [r0], -r1
 428:	17000000 	strne	r0, [r0, -r0]
 42c:	000002c3 	andeq	r0, r0, r3, asr #5
 430:	01fe8002 	mvnseq	r8, r2
 434:	91020000 	mrsls	r0, (UNDEF: 2)
 438:	0000006c 	andeq	r0, r0, ip, rrx
 43c:	00026e15 	andeq	r6, r2, r5, lsl lr
 440:	385a0200 	ldmdacc	sl, {r9}^
 444:	a0200001 	eorge	r0, r0, r1
 448:	01000000 	mrseq	r0, (UNDEF: 0)
 44c:	00046b9c 	muleq	r4, ip, fp
 450:	00691900 	rsbeq	r1, r9, r0, lsl #18
 454:	00215c02 	eoreq	r5, r1, r2, lsl #24
 458:	91020000 	mrsls	r0, (UNDEF: 2)
 45c:	02621a74 	rsbeq	r1, r2, #116, 20	; 0x74000
 460:	56020000 	strpl	r0, [r2], -r0
 464:	00000061 	andeq	r0, r0, r1, rrx
 468:	1500001b 	strne	r0, [r0, #-27]	; 0xffffffe5
 46c:	00000277 	andeq	r0, r0, r7, ror r2
 470:	01024702 	tsteq	r2, r2, lsl #14
 474:	00362000 	eorseq	r2, r6, r0
 478:	9c010000 	stcls	0, cr0, [r1], {-0}
 47c:	000004a6 	andeq	r0, r0, r6, lsr #9
 480:	00024b17 	andeq	r4, r2, r7, lsl fp
 484:	33490200 	movtcc	r0, #37376	; 0x9200
 488:	02000003 	andeq	r0, r0, #3
 48c:	20187491 	mulscs	r8, r1, r4
 490:	10200001 	eorne	r0, r0, r1
 494:	1a000000 	bne	49c <startup-0x1ffffb64>
 498:	00000262 	andeq	r0, r0, r2, ror #4
 49c:	00615602 	rsbeq	r5, r1, r2, lsl #12
 4a0:	001b0000 	andseq	r0, fp, r0
 4a4:	5d1c0000 	ldcpl	0, cr0, [ip, #-0]
 4a8:	02000002 	andeq	r0, r0, #2
 4ac:	0000f43e 	andeq	pc, r0, lr, lsr r4	; <UNPREDICTABLE>
 4b0:	00000e20 	andeq	r0, r0, r0, lsr #28
 4b4:	1d9c0100 	ldfnes	f0, [ip]
 4b8:	000001d5 	ldrdeq	r0, [r0], -r5
 4bc:	00da3402 	sbcseq	r3, sl, r2, lsl #8
 4c0:	001a2000 	andseq	r2, sl, r0
 4c4:	9c010000 	stcls	0, cr0, [r1], {-0}
 4c8:	0000001d 	andeq	r0, r0, sp, lsl r0
 4cc:	002a0200 	eoreq	r0, sl, r0, lsl #4
 4d0:	0c200000 	stceq	0, cr0, [r0], #-0
 4d4:	01000000 	mrseq	r0, (UNDEF: 0)
 4d8:	023d159c 	eorseq	r1, sp, #156, 10	; 0x27000000
 4dc:	17010000 	strne	r0, [r1, -r0]
 4e0:	20000040 	andcs	r0, r0, r0, asr #32
 4e4:	0000009a 	muleq	r0, sl, r0
 4e8:	04fd9c01 	ldrbteq	r9, [sp], #3073	; 0xc01
 4ec:	6f160000 	svcvs	0x00160000
 4f0:	01006a62 	tsteq	r0, r2, ror #20
 4f4:	00033317 	andeq	r3, r3, r7, lsl r3
 4f8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 4fc:	02ea1e00 	rsceq	r1, sl, #0, 28
 500:	11010000 	mrsne	r0, (UNDEF: 1)
 504:	20000010 	andcs	r0, r0, r0, lsl r0
 508:	00000030 	andeq	r0, r0, r0, lsr r0
 50c:	6f169c01 	svcvs	0x00169c01
 510:	01006a62 	tsteq	r0, r2, ror #20
 514:	00033311 	andeq	r3, r3, r1, lsl r3
 518:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 51c:	0001ec1f 	andeq	lr, r1, pc, lsl ip
 520:	6f110100 	svcvs	0x00110100
 524:	02000000 	andeq	r0, r0, #0
 528:	e31f7391 	tst	pc, #1140850690	; 0x44000002
 52c:	01000002 	tsteq	r0, r2
 530:	00006f11 	andeq	r6, r0, r1, lsl pc
 534:	72910200 	addsvc	r0, r1, #0, 4
 538:	017d0000 	cmneq	sp, r0
 53c:	00040000 	andeq	r0, r4, r0
 540:	000001a0 	andeq	r0, r0, r0, lsr #3
 544:	00720104 	rsbseq	r0, r2, r4, lsl #2
 548:	060c0000 	streq	r0, [ip], -r0
 54c:	d4000003 	strle	r0, [r0], #-3
 550:	c2200002 	eorgt	r0, r0, #2
 554:	c3000000 	movwgt	r0, #0
 558:	02000001 	andeq	r0, r0, #1
 55c:	000001c4 	andeq	r0, r0, r4, asr #3
 560:	002c0702 	eoreq	r0, ip, r2, lsl #14
 564:	04030000 	streq	r0, [r3], #-0
 568:	00013507 	andeq	r3, r1, r7, lsl #10
 56c:	002c0400 	eoreq	r0, ip, r0, lsl #8
 570:	02030000 	andeq	r0, r3, #0
 574:	00012f07 	andeq	r2, r1, r7, lsl #30
 578:	02940200 	addseq	r0, r4, #0, 4
 57c:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
 580:	0000004a 	andeq	r0, r0, sl, asr #32
 584:	0a080103 	beq	200998 <startup-0x1fdff668>
 588:	04000001 	streq	r0, [r0], #-1
 58c:	0000004a 	andeq	r0, r0, sl, asr #32
 590:	69050405 	stmdbvs	r5, {r0, r2, sl}
 594:	0300746e 	movweq	r7, #1134	; 0x46e
 598:	02800502 	addeq	r0, r0, #8388608	; 0x800000
 59c:	01030000 	mrseq	r0, (UNDEF: 3)
 5a0:	00010c06 	andeq	r0, r1, r6, lsl #24
 5a4:	038c0200 	orreq	r0, ip, #0, 4
 5a8:	0f020000 	svceq	0x00020000
 5ac:	00000033 	andeq	r0, r0, r3, lsr r0
 5b0:	0001a802 	andeq	sl, r1, r2, lsl #16
 5b4:	51110200 	tstpl	r1, r0, lsl #4
 5b8:	06000000 	streq	r0, [r0], -r0
 5bc:	d208030c 	andle	r0, r8, #12, 6	; 0x30000000
 5c0:	07000000 	streq	r0, [r0, -r0]
 5c4:	000003a0 	andeq	r0, r0, r0, lsr #7
 5c8:	003f0903 	eorseq	r0, pc, r3, lsl #18
 5cc:	07000000 	streq	r0, [r0, -r0]
 5d0:	00000372 	andeq	r0, r0, r2, ror r3
 5d4:	00760a03 	rsbseq	r0, r6, r3, lsl #20
 5d8:	07010000 	streq	r0, [r1, -r0]
 5dc:	000002fb 	strdeq	r0, [r0], -fp
 5e0:	003f0b03 	eorseq	r0, pc, r3, lsl #22
 5e4:	07020000 	streq	r0, [r2, -r0]
 5e8:	0000037c 	andeq	r0, r0, ip, ror r3
 5ec:	00760c03 	rsbseq	r0, r6, r3, lsl #24
 5f0:	07030000 	streq	r0, [r3, -r0]
 5f4:	0000036d 	andeq	r0, r0, sp, ror #6
 5f8:	00210d03 	eoreq	r0, r1, r3, lsl #26
 5fc:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
 600:	004c4156 	subeq	r4, ip, r6, asr r1
 604:	00210e03 	eoreq	r0, r1, r3, lsl #28
 608:	00080000 	andeq	r0, r8, r0
 60c:	0003a502 	andeq	sl, r3, r2, lsl #10
 610:	810f0300 	mrshi	r0, SP_hyp
 614:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 618:	000000d2 	ldrdeq	r0, [r0], -r2
 61c:	00039502 	andeq	r9, r3, r2, lsl #10
 620:	ed110300 	ldc	3, cr0, [r1, #-0]
 624:	0a000000 	beq	62c <startup-0x1ffff9d4>
 628:	0000dd04 	andeq	sp, r0, r4, lsl #26
 62c:	02620b00 	rsbeq	r0, r2, #0, 22
 630:	27010000 	strcs	r0, [r1, -r0]
 634:	20000362 	andcs	r0, r0, r2, ror #6
 638:	00000034 	andeq	r0, r0, r4, lsr r0
 63c:	01169c01 	tsteq	r6, r1, lsl #24
 640:	6d0c0000 	stcvs	0, cr0, [ip, #-0]
 644:	27010073 	smlsdxcs	r1, r3, r0, r0
 648:	00000021 	andeq	r0, r0, r1, lsr #32
 64c:	00749102 	rsbseq	r9, r4, r2, lsl #2
 650:	0003610b 	andeq	r6, r3, fp, lsl #2
 654:	2e1c0100 	mufcse	f0, f4, f0
 658:	34200003 	strtcc	r0, [r0], #-3
 65c:	01000000 	mrseq	r0, (UNDEF: 0)
 660:	0001519c 	muleq	r1, ip, r1
 664:	73750c00 	cmnvc	r5, #0, 24
 668:	6b1c0100 	blvs	700a70 <startup-0x1f8ff590>
 66c:	02000000 	andeq	r0, r0, #0
 670:	360d6c91 			; <UNDEFINED> instruction: 0x360d6c91
 674:	24200003 	strtcs	r0, [r0], #-3
 678:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
 67c:	00000386 	andeq	r0, r0, r6, lsl #7
 680:	00211e01 	eoreq	r1, r1, r1, lsl #28
 684:	91020000 	mrsls	r0, (UNDEF: 2)
 688:	0f000074 	svceq	0x00000074
 68c:	00000355 	andeq	r0, r0, r5, asr r3
 690:	031c1601 	tsteq	ip, #1048576	; 0x100000
 694:	00122000 	andseq	r2, r2, r0
 698:	9c010000 	stcls	0, cr0, [r1], {-0}
 69c:	00034910 	andeq	r4, r3, r0, lsl r9
 6a0:	d4050100 	strle	r0, [r5], #-256	; 0xffffff00
 6a4:	48200002 	stmdami	r0!, {r1}
 6a8:	01000000 	mrseq	r0, (UNDEF: 0)
 6ac:	0078119c 			; <UNDEFINED> instruction: 0x0078119c
 6b0:	00210701 	eoreq	r0, r1, r1, lsl #14
 6b4:	91020000 	mrsls	r0, (UNDEF: 2)
 6b8:	5f000074 	svcpl	0x00000074
 6bc:	04000004 	streq	r0, [r0], #-4
 6c0:	00029700 	andeq	r9, r2, r0, lsl #14
 6c4:	72010400 	andvc	r0, r1, #0, 8
 6c8:	0c000000 	stceq	0, cr0, [r0], {-0}
 6cc:	000003d7 	ldrdeq	r0, [r0], -r7
 6d0:	20000398 	mulcs	r0, r8, r3
 6d4:	000004c0 	andeq	r0, r0, r0, asr #9
 6d8:	0000027f 	andeq	r0, r0, pc, ror r2
 6dc:	0001c402 	andeq	ip, r1, r2, lsl #8
 6e0:	2c070200 	sfmcs	f0, 4, [r7], {-0}
 6e4:	03000000 	movweq	r0, #0
 6e8:	01350704 	teqeq	r5, r4, lsl #14
 6ec:	bd020000 	stclt	0, cr0, [r2, #-0]
 6f0:	02000001 	andeq	r0, r0, #1
 6f4:	00003e08 	andeq	r3, r0, r8, lsl #28
 6f8:	07020300 	streq	r0, [r2, -r0, lsl #6]
 6fc:	0000012f 	andeq	r0, r0, pc, lsr #2
 700:	00003e04 	andeq	r3, r0, r4, lsl #28
 704:	02940200 	addseq	r0, r4, #0, 4
 708:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
 70c:	00000055 	andeq	r0, r0, r5, asr r0
 710:	0a080103 	beq	200b24 <startup-0x1fdff4dc>
 714:	04000001 	streq	r0, [r0], #-1
 718:	00000055 	andeq	r0, r0, r5, asr r0
 71c:	69050405 	stmdbvs	r5, {r0, r2, sl}
 720:	0300746e 	movweq	r7, #1134	; 0x46e
 724:	02800502 	addeq	r0, r0, #8388608	; 0x800000
 728:	01030000 	mrseq	r0, (UNDEF: 3)
 72c:	00010c06 	andeq	r0, r1, r6, lsl #24
 730:	02200200 	eoreq	r0, r0, #0, 4
 734:	10020000 	andne	r0, r2, r0
 738:	00000045 	andeq	r0, r0, r5, asr #32
 73c:	0001a802 	andeq	sl, r1, r2, lsl #16
 740:	5c110200 	lfmpl	f0, 4, [r1], {-0}
 744:	06000000 	streq	r0, [r0], -r0
 748:	ad0f0302 	stcge	3, cr0, [pc, #-8]	; 748 <startup-0x1ffff8b8>
 74c:	07000000 	streq	r0, [r0, -r0]
 750:	0000001c 	andeq	r0, r0, ip, lsl r0
 754:	004a1003 	subeq	r1, sl, r3
 758:	07000000 	streq	r0, [r0, -r0]
 75c:	00000024 	andeq	r0, r0, r4, lsr #32
 760:	004a1103 	subeq	r1, sl, r3, lsl #2
 764:	00010000 	andeq	r0, r1, r0
 768:	0e030208 	cdpeq	2, 0, cr0, cr3, cr8, {0}
 76c:	000000c6 	andeq	r0, r0, r6, asr #1
 770:	52444909 	subpl	r4, r4, #147456	; 0x24000
 774:	330e0300 	movwcc	r0, #58112	; 0xe300
 778:	0a000000 	beq	780 <startup-0x1ffff880>
 77c:	0000008c 	andeq	r0, r0, ip, lsl #1
 780:	03020600 	movweq	r0, #9728	; 0x2600
 784:	0000e717 	andeq	lr, r0, r7, lsl r7
 788:	02050700 	andeq	r0, r5, #0, 14
 78c:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
 790:	0000004a 	andeq	r0, r0, sl, asr #32
 794:	01260700 			; <UNDEFINED> instruction: 0x01260700
 798:	19030000 	stmdbne	r3, {}	; <UNPREDICTABLE>
 79c:	0000004a 	andeq	r0, r0, sl, asr #32
 7a0:	02080001 	andeq	r0, r8, #1
 7a4:	01001603 	tsteq	r0, r3, lsl #12
 7a8:	4f090000 	svcmi	0x00090000
 7ac:	03005244 	movweq	r5, #580	; 0x244
 7b0:	00003316 	andeq	r3, r0, r6, lsl r3
 7b4:	00c60a00 	sbceq	r0, r6, r0, lsl #20
 7b8:	06000000 	streq	r0, [r0], -r0
 7bc:	b1080328 	tstlt	r8, r8, lsr #6
 7c0:	07000001 	streq	r0, [r0, -r1]
 7c4:	00000046 	andeq	r0, r0, r6, asr #32
 7c8:	00210903 	eoreq	r0, r1, r3, lsl #18
 7cc:	07000000 	streq	r0, [r0, -r0]
 7d0:	0000006b 	andeq	r0, r0, fp, rrx
 7d4:	00330a03 	eorseq	r0, r3, r3, lsl #20
 7d8:	07040000 	streq	r0, [r4, -r0]
 7dc:	00000256 	andeq	r0, r0, r6, asr r2
 7e0:	00760b03 	rsbseq	r0, r6, r3, lsl #22
 7e4:	07060000 	streq	r0, [r6, -r0]
 7e8:	00000008 	andeq	r0, r0, r8
 7ec:	00210c03 	eoreq	r0, r1, r3, lsl #24
 7f0:	07080000 	streq	r0, [r8, -r0]
 7f4:	00000229 	andeq	r0, r0, r9, lsr #4
 7f8:	00210d03 	eoreq	r0, r1, r3, lsl #26
 7fc:	0b0c0000 	bleq	300804 <startup-0x1fcff7fc>
 800:	000000ad 	andeq	r0, r0, sp, lsr #1
 804:	01b50710 			; <UNDEFINED> instruction: 0x01b50710
 808:	14030000 	strne	r0, [r3], #-0
 80c:	00000076 	andeq	r0, r0, r6, ror r0
 810:	00e70b12 	rsceq	r0, r7, r2, lsl fp
 814:	07140000 	ldreq	r0, [r4, -r0]
 818:	000001e4 	andeq	r0, r0, r4, ror #3
 81c:	00761c03 	rsbseq	r1, r6, r3, lsl #24
 820:	07160000 	ldreq	r0, [r6, -r0]
 824:	00000032 	andeq	r0, r0, r2, lsr r0
 828:	00211d03 	eoreq	r1, r1, r3, lsl #26
 82c:	07180000 	ldreq	r0, [r8, -r0]
 830:	000001f7 	strdeq	r0, [r0], -r7
 834:	00331e03 	eorseq	r1, r3, r3, lsl #28
 838:	071c0000 	ldreq	r0, [ip, -r0]
 83c:	0000011d 	andeq	r0, r0, sp, lsl r1
 840:	004a1f03 	subeq	r1, sl, r3, lsl #30
 844:	071e0000 	ldreq	r0, [lr, -r0]
 848:	000001f3 	strdeq	r0, [r0], -r3
 84c:	00812003 	addeq	r2, r1, r3
 850:	071f0000 	ldreq	r0, [pc, -r0]
 854:	0000003c 	andeq	r0, r0, ip, lsr r0
 858:	00212103 	eoreq	r2, r1, r3, lsl #2
 85c:	07200000 	streq	r0, [r0, -r0]!
 860:	00000041 	andeq	r0, r0, r1, asr #32
 864:	00212203 	eoreq	r2, r1, r3, lsl #4
 868:	00240000 	eoreq	r0, r4, r0
 86c:	00020d02 	andeq	r0, r2, r2, lsl #26
 870:	00230300 	eoreq	r0, r3, r0, lsl #6
 874:	0c000001 	stceq	0, cr0, [r0], {1}
 878:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
 87c:	0001fd02 	andeq	pc, r1, r2, lsl #26
 880:	cc250300 	stcgt	3, cr0, [r5], #-0
 884:	0d000001 	stceq	0, cr0, [r0, #-4]
 888:	0001bc04 	andeq	fp, r1, r4, lsl #24
 88c:	03ca0e00 	biceq	r0, sl, #0, 28
 890:	9f010000 	svcls	0x00010000
 894:	200006d2 	ldrdcs	r0, [r0], -r2
 898:	00000186 	andeq	r0, r0, r6, lsl #3
 89c:	02549c01 	subseq	r9, r4, #256	; 0x100
 8a0:	780f0000 	stmdavc	pc, {}	; <UNPREDICTABLE>
 8a4:	819f0100 	orrshi	r0, pc, r0, lsl #2
 8a8:	02000000 	andeq	r0, r0, #0
 8ac:	790f6791 	stmdbvc	pc, {r0, r4, r7, r8, r9, sl, sp, lr}	; <UNPREDICTABLE>
 8b0:	819f0100 	orrshi	r0, pc, r0, lsl #2
 8b4:	02000000 	andeq	r0, r0, #0
 8b8:	730f6691 	movwvc	r6, #63121	; 0xf691
 8bc:	01007465 	tsteq	r0, r5, ror #8
 8c0:	0000819f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
 8c4:	65910200 	ldrvs	r0, [r1, #512]	; 0x200
 8c8:	776f7210 			; <UNDEFINED> instruction: 0x776f7210
 8cc:	81a70100 			; <UNDEFINED> instruction: 0x81a70100
 8d0:	02000000 	andeq	r0, r0, #0
 8d4:	82116c91 	andshi	r6, r1, #37120	; 0x9100
 8d8:	01000004 	tsteq	r0, r4
 8dc:	00004aa8 	andeq	r4, r0, r8, lsr #21
 8e0:	6f910200 	svcvs	0x00910200
 8e4:	00043811 	andeq	r3, r4, r1, lsl r8
 8e8:	4aaf0100 	bmi	febc0cf0 <ballGeometry+0xdebc0354>
 8ec:	02000000 	andeq	r0, r0, #0
 8f0:	d0116e91 	mulsle	r1, r1, lr
 8f4:	01000003 	tsteq	r0, r3
 8f8:	00004ab0 			; <UNDEFINED> instruction: 0x00004ab0
 8fc:	6d910200 	lfmvs	f0, 4, [r1]
 900:	0003ad11 	andeq	sl, r3, r1, lsl sp
 904:	81bf0100 			; <UNDEFINED> instruction: 0x81bf0100
 908:	02000000 	andeq	r0, r0, #0
 90c:	12006b91 	andne	r6, r0, #148480	; 0x24400
 910:	000004ad 	andeq	r0, r0, sp, lsr #9
 914:	066c9101 	strbteq	r9, [ip], -r1, lsl #2
 918:	00662000 	rsbeq	r2, r6, r0
 91c:	9c010000 	stcls	0, cr0, [r1], {-0}
 920:	00000296 	muleq	r0, r6, r2
 924:	00067213 	andeq	r7, r6, r3, lsl r2
 928:	00005820 	andeq	r5, r0, r0, lsr #16
 92c:	00691000 	rsbeq	r1, r9, r0
 930:	004a9401 	subeq	r9, sl, r1, lsl #8
 934:	91020000 	mrsls	r0, (UNDEF: 2)
 938:	06961377 			; <UNDEFINED> instruction: 0x06961377
 93c:	00222000 	eoreq	r2, r2, r0
 940:	6a100000 	bvs	400948 <startup-0x1fbff6b8>
 944:	4a980100 	bmi	fe600d4c <ballGeometry+0xde6003b0>
 948:	02000000 	andeq	r0, r0, #0
 94c:	00007691 	muleq	r0, r1, r6
 950:	045a0e00 	ldrbeq	r0, [sl], #-3584	; 0xfffff200
 954:	7f010000 	svcvc	0x00010000
 958:	20000616 	andcs	r0, r0, r6, lsl r6
 95c:	00000056 	andeq	r0, r0, r6, asr r0
 960:	02ca9c01 	sbceq	r9, sl, #256	; 0x100
 964:	61140000 	tstvs	r4, r0
 968:	01000003 	tsteq	r0, r3
 96c:	00006182 	andeq	r6, r0, r2, lsl #3
 970:	0002bc00 	andeq	fp, r2, r0, lsl #24
 974:	16001500 	strne	r1, [r0], -r0, lsl #10
 978:	00000262 	andeq	r0, r0, r2, ror #4
 97c:	00618501 	rsbeq	r8, r1, r1, lsl #10
 980:	00150000 	andseq	r0, r5, r0
 984:	04870e00 	streq	r0, [r7], #3584	; 0xe00
 988:	73010000 	movwvc	r0, #4096	; 0x1000
 98c:	200005d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 990:	00000046 	andeq	r0, r0, r6, asr #32
 994:	02fc9c01 	rscseq	r9, ip, #256	; 0x100
 998:	c5170000 	ldrgt	r0, [r7, #-0]
 99c:	01000003 	tsteq	r0, r3
 9a0:	00008173 	andeq	r8, r0, r3, ror r1
 9a4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 9a8:	00043817 	andeq	r3, r4, r7, lsl r8
 9ac:	81730100 	cmnhi	r3, r0, lsl #2
 9b0:	02000000 	andeq	r0, r0, #0
 9b4:	0e007691 	mcreq	6, 0, r7, cr0, cr1, {4}
 9b8:	000004cf 	andeq	r0, r0, pc, asr #9
 9bc:	05906801 	ldreq	r6, [r0, #2049]	; 0x801
 9c0:	00402000 	subeq	r2, r0, r0
 9c4:	9c010000 	stcls	0, cr0, [r1], {-0}
 9c8:	0000032e 	andeq	r0, r0, lr, lsr #6
 9cc:	0004dd17 	andeq	sp, r4, r7, lsl sp
 9d0:	81680100 	cmnhi	r8, r0, lsl #2
 9d4:	02000000 	andeq	r0, r0, #0
 9d8:	38177791 	ldmdacc	r7, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
 9dc:	01000004 	tsteq	r0, r4
 9e0:	00008168 	andeq	r8, r0, r8, ror #2
 9e4:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 9e8:	04230e00 	strteq	r0, [r3], #-3584	; 0xfffff200
 9ec:	52010000 	andpl	r0, r1, #0
 9f0:	20000536 	andcs	r0, r0, r6, lsr r5
 9f4:	0000005a 	andeq	r0, r0, sl, asr r0
 9f8:	036d9c01 	cmneq	sp, #256	; 0x100
 9fc:	b2170000 	andslt	r0, r7, #0
 a00:	01000003 	tsteq	r0, r3
 a04:	00008152 	andeq	r8, r0, r2, asr r1
 a08:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 a0c:	00043817 	andeq	r3, r4, r7, lsl r8
 a10:	81520100 	cmphi	r2, r0, lsl #2
 a14:	02000000 	andeq	r0, r0, #0
 a18:	55167691 	ldrpl	r7, [r6, #-1681]	; 0xfffff96f
 a1c:	01000003 	tsteq	r0, r3
 a20:	0000611f 	andeq	r6, r0, pc, lsl r1
 a24:	00001500 	andeq	r1, r0, r0, lsl #10
 a28:	0003b818 	andeq	fp, r3, r8, lsl r8
 a2c:	814c0100 	mrshi	r0, (UNDEF: 92)
 a30:	0c000000 	stceq	0, cr0, [r0], {-0}
 a34:	2a200005 	bcs	800a50 <startup-0x1f7ff5b0>
 a38:	01000000 	mrseq	r0, (UNDEF: 0)
 a3c:	0003959c 	muleq	r3, ip, r5
 a40:	04381700 	ldrteq	r1, [r8], #-1792	; 0xfffff900
 a44:	4c010000 	stcmi	0, cr0, [r1], {-0}
 a48:	00000081 	andeq	r0, r0, r1, lsl #1
 a4c:	00779102 	rsbseq	r9, r7, r2, lsl #2
 a50:	0004c218 	andeq	ip, r4, r8, lsl r2
 a54:	81310100 	teqhi	r1, r0, lsl #2
 a58:	a0000000 	andge	r0, r0, r0
 a5c:	6c200004 	stcvs	0, cr0, [r0], #-16
 a60:	01000000 	mrseq	r0, (UNDEF: 0)
 a64:	0003db9c 	muleq	r3, ip, fp
 a68:	04381700 	ldrteq	r1, [r8], #-1792	; 0xfffff900
 a6c:	31010000 	mrscc	r0, (UNDEF: 1)
 a70:	00000081 	andeq	r0, r0, r1, lsl #1
 a74:	146f9102 	strbtne	r9, [pc], #-258	; a7c <startup-0x1ffff584>
 a78:	00000355 	andeq	r0, r0, r5, asr r3
 a7c:	00611f01 	rsbeq	r1, r1, r1, lsl #30
 a80:	03cd0000 	biceq	r0, sp, #0
 a84:	00150000 	andseq	r0, r5, r0
 a88:	00767210 	rsbseq	r7, r6, r0, lsl r2
 a8c:	00813f01 	addeq	r3, r1, r1, lsl #30
 a90:	91020000 	mrsls	r0, (UNDEF: 2)
 a94:	9a0e0077 	bls	380c78 <startup-0x1fc7f388>
 a98:	01000004 	tsteq	r0, r4
 a9c:	00043c16 	andeq	r3, r4, r6, lsl ip
 aa0:	00006420 	andeq	r6, r0, r0, lsr #8
 aa4:	fe9c0100 	cdp2	1, 9, cr0, cr12, cr0, {0}
 aa8:	16000003 	strne	r0, [r0], -r3
 aac:	00000355 	andeq	r0, r0, r5, asr r3
 ab0:	00611f01 	rsbeq	r1, r1, r1, lsl #30
 ab4:	00150000 	andseq	r0, r5, r0
 ab8:	04310e00 	ldrteq	r0, [r1], #-3584	; 0xfffff200
 abc:	10010000 	andne	r0, r1, r0
 ac0:	20000418 	andcs	r0, r0, r8, lsl r4
 ac4:	00000024 	andeq	r0, r0, r4, lsr #32
 ac8:	04229c01 	strteq	r9, [r2], #-3073	; 0xfffff3ff
 acc:	38170000 	ldmdacc	r7, {}	; <UNPREDICTABLE>
 ad0:	01000004 	tsteq	r0, r4
 ad4:	00008110 	andeq	r8, r0, r0, lsl r1
 ad8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 adc:	04431900 	strbeq	r1, [r3], #-2304	; 0xfffff700
 ae0:	0a010000 	beq	40ae8 <startup-0x1ffbf518>
 ae4:	200003d4 	ldrdcs	r0, [r0], -r4
 ae8:	00000044 	andeq	r0, r0, r4, asr #32
 aec:	04449c01 	strbeq	r9, [r4], #-3073	; 0xfffff3ff
 af0:	780f0000 	stmdavc	pc, {}	; <UNPREDICTABLE>
 af4:	810a0100 	mrshi	r0, (UNDEF: 26)
 af8:	02000000 	andeq	r0, r0, #0
 afc:	1a007791 	bne	1e948 <startup-0x1ffe16b8>
 b00:	0000046d 	andeq	r0, r0, sp, ror #8
 b04:	03980401 	orrseq	r0, r8, #16777216	; 0x1000000
 b08:	003c2000 	eorseq	r2, ip, r0
 b0c:	9c010000 	stcls	0, cr0, [r1], {-0}
 b10:	0100780f 	tsteq	r0, pc, lsl #16
 b14:	00008104 	andeq	r8, r0, r4, lsl #2
 b18:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	00160200 	andseq	r0, r6, r0, lsl #4
  14:	0b3a0e03 	bleq	e83828 <startup-0x1f17c7d8>
  18:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  1c:	24030000 	strcs	r0, [r3], #-0
  20:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  24:	000e030b 	andeq	r0, lr, fp, lsl #6
  28:	00260400 	eoreq	r0, r6, r0, lsl #8
  2c:	00001349 	andeq	r1, r0, r9, asr #6
  30:	0b002405 	bleq	904c <startup-0x1fff6fb4>
  34:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  38:	06000008 	streq	r0, [r0], -r8
  3c:	0b0b0113 	bleq	2c0490 <startup-0x1fd3fb70>
  40:	0b3b0b3a 	bleq	ec2d30 <startup-0x1f13d2d0>
  44:	00001301 	andeq	r1, r0, r1, lsl #6
  48:	03000d07 	movweq	r0, #3335	; 0xd07
  4c:	3b0b3a0e 	blcc	2ce88c <startup-0x1fd31774>
  50:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  54:	0800000b 	stmdaeq	r0, {r0, r1, r3}
  58:	0b0b0117 	bleq	2c04bc <startup-0x1fd3fb44>
  5c:	0b3b0b3a 	bleq	ec2d4c <startup-0x1f13d2b4>
  60:	00001301 	andeq	r1, r0, r1, lsl #6
  64:	03000d09 	movweq	r0, #3337	; 0xd09
  68:	3b0b3a08 	blcc	2ce890 <startup-0x1fd31770>
  6c:	0013490b 	andseq	r4, r3, fp, lsl #18
  70:	000d0a00 	andeq	r0, sp, r0, lsl #20
  74:	00001349 	andeq	r1, r0, r9, asr #6
  78:	49000d0b 	stmdbmi	r0, {r0, r1, r3, r8, sl, fp}
  7c:	000b3813 	andeq	r3, fp, r3, lsl r8
  80:	00350c00 	eorseq	r0, r5, r0, lsl #24
  84:	00001349 	andeq	r1, r0, r9, asr #6
  88:	0b000f0d 	bleq	3cc4 <startup-0x1fffc33c>
  8c:	0013490b 	andseq	r4, r3, fp, lsl #18
  90:	01130e00 	tsteq	r3, r0, lsl #28
  94:	0b0b0e03 	bleq	2c38a8 <startup-0x1fd3c758>
  98:	0b3b0b3a 	bleq	ec2d88 <startup-0x1f13d278>
  9c:	00001301 	andeq	r1, r0, r1, lsl #6
  a0:	03000d0f 	movweq	r0, #3343	; 0xd0f
  a4:	3b0b3a08 	blcc	2ce8cc <startup-0x1fd31734>
  a8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  ac:	1000000b 	andne	r0, r0, fp
  b0:	13490101 	movtne	r0, #37121	; 0x9101
  b4:	00001301 	andeq	r1, r0, r1, lsl #6
  b8:	49002111 	stmdbmi	r0, {r0, r4, r8, sp}
  bc:	000b2f13 	andeq	r2, fp, r3, lsl pc
  c0:	01151200 	tsteq	r5, r0, lsl #4
  c4:	13011927 	movwne	r1, #6439	; 0x1927
  c8:	05130000 	ldreq	r0, [r3, #-0]
  cc:	00134900 	andseq	r4, r3, r0, lsl #18
  d0:	00341400 	eorseq	r1, r4, r0, lsl #8
  d4:	0b3a0e03 	bleq	e838e8 <startup-0x1f17c718>
  d8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  dc:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
  e0:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
  e4:	03193f01 	tsteq	r9, #1, 30
  e8:	3b0b3a0e 	blcc	2ce928 <startup-0x1fd316d8>
  ec:	1119270b 	tstne	r9, fp, lsl #14
  f0:	40061201 	andmi	r1, r6, r1, lsl #4
  f4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  f8:	00001301 	andeq	r1, r0, r1, lsl #6
  fc:	03000516 	movweq	r0, #1302	; 0x516
 100:	3b0b3a08 	blcc	2ce928 <startup-0x1fd316d8>
 104:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 108:	17000018 	smladne	r0, r8, r0, r0
 10c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 110:	0b3b0b3a 	bleq	ec2e00 <startup-0x1f13d200>
 114:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 118:	0b180000 	bleq	600120 <startup-0x1f9ffee0>
 11c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 120:	19000006 	stmdbne	r0, {r1, r2}
 124:	08030034 	stmdaeq	r3, {r2, r4, r5}
 128:	0b3b0b3a 	bleq	ec2e18 <startup-0x1f13d1e8>
 12c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 130:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
 134:	03193f01 	tsteq	r9, #1, 30
 138:	3b0b3a0e 	blcc	2ce978 <startup-0x1fd31688>
 13c:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 140:	1b000019 	blne	1ac <startup-0x1ffffe54>
 144:	00000018 	andeq	r0, r0, r8, lsl r0
 148:	3f002e1c 	svccc	0x00002e1c
 14c:	3a0e0319 	bcc	380db8 <startup-0x1fc7f248>
 150:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 154:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 158:	96184006 	ldrls	r4, [r8], -r6
 15c:	00001942 	andeq	r1, r0, r2, asr #18
 160:	3f002e1d 	svccc	0x00002e1d
 164:	3a0e0319 	bcc	380dd0 <startup-0x1fc7f230>
 168:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 16c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 170:	97184006 	ldrls	r4, [r8, -r6]
 174:	00001942 	andeq	r1, r0, r2, asr #18
 178:	3f012e1e 	svccc	0x00012e1e
 17c:	3a0e0319 	bcc	380de8 <startup-0x1fc7f218>
 180:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 184:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 188:	97184006 	ldrls	r4, [r8, -r6]
 18c:	00001942 	andeq	r1, r0, r2, asr #18
 190:	0300051f 	movweq	r0, #1311	; 0x51f
 194:	3b0b3a0e 	blcc	2ce9d4 <startup-0x1fd3162c>
 198:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 19c:	00000018 	andeq	r0, r0, r8, lsl r0
 1a0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 1a4:	030b130e 	movweq	r1, #45838	; 0xb30e
 1a8:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 1ac:	00171006 	andseq	r1, r7, r6
 1b0:	00160200 	andseq	r0, r6, r0, lsl #4
 1b4:	0b3a0e03 	bleq	e839c8 <startup-0x1f17c638>
 1b8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 1bc:	24030000 	strcs	r0, [r3], #-0
 1c0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 1c4:	000e030b 	andeq	r0, lr, fp, lsl #6
 1c8:	00260400 	eoreq	r0, r6, r0, lsl #8
 1cc:	00001349 	andeq	r1, r0, r9, asr #6
 1d0:	0b002405 	bleq	91ec <startup-0x1fff6e14>
 1d4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 1d8:	06000008 	streq	r0, [r0], -r8
 1dc:	0b0b0113 	bleq	2c0630 <startup-0x1fd3f9d0>
 1e0:	0b3b0b3a 	bleq	ec2ed0 <startup-0x1f13d130>
 1e4:	00001301 	andeq	r1, r0, r1, lsl #6
 1e8:	03000d07 	movweq	r0, #3335	; 0xd07
 1ec:	3b0b3a0e 	blcc	2cea2c <startup-0x1fd315d4>
 1f0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 1f4:	0800000b 	stmdaeq	r0, {r0, r1, r3}
 1f8:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 1fc:	0b3b0b3a 	bleq	ec2eec <startup-0x1f13d114>
 200:	0b381349 	bleq	e04f2c <startup-0x1f1fb0d4>
 204:	35090000 	strcc	r0, [r9, #-0]
 208:	00134900 	andseq	r4, r3, r0, lsl #18
 20c:	000f0a00 	andeq	r0, pc, r0, lsl #20
 210:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 214:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
 218:	03193f01 	tsteq	r9, #1, 30
 21c:	3b0b3a0e 	blcc	2cea5c <startup-0x1fd315a4>
 220:	1119270b 	tstne	r9, fp, lsl #14
 224:	40061201 	andmi	r1, r6, r1, lsl #4
 228:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 22c:	00001301 	andeq	r1, r0, r1, lsl #6
 230:	0300050c 	movweq	r0, #1292	; 0x50c
 234:	3b0b3a08 	blcc	2cea5c <startup-0x1fd315a4>
 238:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 23c:	0d000018 	stceq	0, cr0, [r0, #-96]	; 0xffffffa0
 240:	0111010b 	tsteq	r1, fp, lsl #2
 244:	00000612 	andeq	r0, r0, r2, lsl r6
 248:	0300340e 	movweq	r3, #1038	; 0x40e
 24c:	3b0b3a0e 	blcc	2cea8c <startup-0x1fd31574>
 250:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 254:	0f000018 	svceq	0x00000018
 258:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 25c:	0b3a0e03 	bleq	e83a70 <startup-0x1f17c590>
 260:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 264:	06120111 			; <UNDEFINED> instruction: 0x06120111
 268:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 26c:	10000019 	andne	r0, r0, r9, lsl r0
 270:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 274:	0b3a0e03 	bleq	e83a88 <startup-0x1f17c578>
 278:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 27c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 280:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 284:	11000019 	tstne	r0, r9, lsl r0
 288:	08030034 	stmdaeq	r3, {r2, r4, r5}
 28c:	0b3b0b3a 	bleq	ec2f7c <startup-0x1f13d084>
 290:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 294:	01000000 	mrseq	r0, (UNDEF: 0)
 298:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 29c:	0e030b13 	vmoveq.32	d3[0], r0
 2a0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2a4:	00001710 	andeq	r1, r0, r0, lsl r7
 2a8:	03001602 	movweq	r1, #1538	; 0x602
 2ac:	3b0b3a0e 	blcc	2ceaec <startup-0x1fd31514>
 2b0:	0013490b 	andseq	r4, r3, fp, lsl #18
 2b4:	00240300 	eoreq	r0, r4, r0, lsl #6
 2b8:	0b3e0b0b 	bleq	f82eec <startup-0x1f07d114>
 2bc:	00000e03 	andeq	r0, r0, r3, lsl #28
 2c0:	49002604 	stmdbmi	r0, {r2, r9, sl, sp}
 2c4:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
 2c8:	0b0b0024 	bleq	2c0360 <startup-0x1fd3fca0>
 2cc:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 2d0:	13060000 	movwne	r0, #24576	; 0x6000
 2d4:	3a0b0b01 	bcc	2c2ee0 <startup-0x1fd3d120>
 2d8:	010b3b0b 	tsteq	fp, fp, lsl #22
 2dc:	07000013 	smladeq	r0, r3, r0, r0
 2e0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 2e4:	0b3b0b3a 	bleq	ec2fd4 <startup-0x1f13d02c>
 2e8:	0b381349 	bleq	e05014 <startup-0x1f1fafec>
 2ec:	17080000 	strne	r0, [r8, -r0]
 2f0:	3a0b0b01 	bcc	2c2efc <startup-0x1fd3d104>
 2f4:	010b3b0b 	tsteq	fp, fp, lsl #22
 2f8:	09000013 	stmdbeq	r0, {r0, r1, r4}
 2fc:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 300:	0b3b0b3a 	bleq	ec2ff0 <startup-0x1f13d010>
 304:	00001349 	andeq	r1, r0, r9, asr #6
 308:	49000d0a 	stmdbmi	r0, {r1, r3, r8, sl, fp}
 30c:	0b000013 	bleq	360 <startup-0x1ffffca0>
 310:	1349000d 	movtne	r0, #36877	; 0x900d
 314:	00000b38 	andeq	r0, r0, r8, lsr fp
 318:	4900350c 	stmdbmi	r0, {r2, r3, r8, sl, ip, sp}
 31c:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 320:	0b0b000f 	bleq	2c0364 <startup-0x1fd3fc9c>
 324:	00001349 	andeq	r1, r0, r9, asr #6
 328:	3f012e0e 	svccc	0x00012e0e
 32c:	3a0e0319 	bcc	380f98 <startup-0x1fc7f068>
 330:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 334:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 338:	96184006 	ldrls	r4, [r8], -r6
 33c:	13011942 	movwne	r1, #6466	; 0x1942
 340:	050f0000 	streq	r0, [pc, #-0]	; 348 <startup-0x1ffffcb8>
 344:	3a080300 	bcc	200f4c <startup-0x1fdff0b4>
 348:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 34c:	00180213 	andseq	r0, r8, r3, lsl r2
 350:	00341000 	eorseq	r1, r4, r0
 354:	0b3a0803 	bleq	e82368 <startup-0x1f17dc98>
 358:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 35c:	00001802 	andeq	r1, r0, r2, lsl #16
 360:	03003411 	movweq	r3, #1041	; 0x411
 364:	3b0b3a0e 	blcc	2ceba4 <startup-0x1fd3145c>
 368:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 36c:	12000018 	andne	r0, r0, #24
 370:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 374:	0b3a0e03 	bleq	e83b88 <startup-0x1f17c478>
 378:	01110b3b 	tsteq	r1, fp, lsr fp
 37c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 380:	01194296 			; <UNDEFINED> instruction: 0x01194296
 384:	13000013 	movwne	r0, #19
 388:	0111010b 	tsteq	r1, fp, lsl #2
 38c:	00000612 	andeq	r0, r0, r2, lsl r6
 390:	3f012e14 	svccc	0x00012e14
 394:	3a0e0319 	bcc	381000 <startup-0x1fc7f000>
 398:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 39c:	01193c13 	tsteq	r9, r3, lsl ip
 3a0:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
 3a4:	00000018 	andeq	r0, r0, r8, lsl r0
 3a8:	3f012e16 	svccc	0x00012e16
 3ac:	3a0e0319 	bcc	381018 <startup-0x1fc7efe8>
 3b0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3b4:	00193c13 	andseq	r3, r9, r3, lsl ip
 3b8:	00051700 	andeq	r1, r5, r0, lsl #14
 3bc:	0b3a0e03 	bleq	e83bd0 <startup-0x1f17c430>
 3c0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 3c4:	00001802 	andeq	r1, r0, r2, lsl #16
 3c8:	3f012e18 	svccc	0x00012e18
 3cc:	3a0e0319 	bcc	381038 <startup-0x1fc7efc8>
 3d0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 3d4:	11134919 	tstne	r3, r9, lsl r9
 3d8:	40061201 	andmi	r1, r6, r1, lsl #4
 3dc:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 3e0:	00001301 	andeq	r1, r0, r1, lsl #6
 3e4:	3f012e19 	svccc	0x00012e19
 3e8:	3a0e0319 	bcc	381054 <startup-0x1fc7efac>
 3ec:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 3f0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 3f4:	97184006 	ldrls	r4, [r8, -r6]
 3f8:	13011942 	movwne	r1, #6466	; 0x1942
 3fc:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
 400:	03193f01 	tsteq	r9, #1, 30
 404:	3b0b3a0e 	blcc	2cec44 <startup-0x1fd313bc>
 408:	1119270b 	tstne	r9, fp, lsl #14
 40c:	40061201 	andmi	r1, r6, r1, lsl #4
 410:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 414:	Address 0x00000414 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000002c4 	andeq	r0, r0, r4, asr #5
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	053a0002 	ldreq	r0, [sl, #-2]!
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	200002d4 	ldrdcs	r0, [r0], -r4
  3c:	000000c2 	andeq	r0, r0, r2, asr #1
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	06bb0002 	ldrteq	r0, [fp], r2
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20000398 	mulcs	r0, r8, r3
  5c:	000004c0 	andeq	r0, r0, r0, asr #9
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	200002d4 	ldrdcs	r0, [r0], -r4
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000001bf 			; <UNDEFINED> instruction: 0x000001bf
   4:	00e00002 	rsceq	r0, r0, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	63010000 	movwvs	r0, #4096	; 0x1000
  1c:	65645c3a 	strbvs	r5, [r4, #-3130]!	; 0xfffff3c6
  20:	6f6c6576 	svcvs	0x006c6576
  24:	6e656d70 	mcrvs	13, 3, r6, cr5, cr0, {3}
  28:	72615c74 	rsbvc	r5, r1, #116, 24	; 0x7400
  2c:	7373616d 	cmnvc	r3, #1073741851	; 0x4000001b
  30:	6c626d65 	stclvs	13, cr6, [r2], #-404	; 0xfffffe6c
  34:	635c7265 	cmpvs	ip, #1342177286	; 0x50000006
  38:	5f65646f 	svcpl	0x0065646f
  3c:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
  40:	6172675c 	cmnvs	r2, ip, asr r7
  44:	63696870 	cmnvs	r9, #112, 16	; 0x700000
  48:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
  4c:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
  50:	6974755c 	ldmdbvs	r4!, {r2, r3, r4, r6, r8, sl, ip, sp, lr}^
  54:	3a43006c 	bcc	10c020c <startup-0x1ef3fdf4>
  58:	7665642f 	strbtvc	r6, [r5], -pc, lsr #8
  5c:	706f6c65 	rsbvc	r6, pc, r5, ror #24
  60:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
  64:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
  68:	65737361 	ldrbvs	r7, [r3, #-865]!	; 0xfffffc9f
  6c:	656c626d 	strbvs	r6, [ip, #-621]!	; 0xfffffd93
  70:	6f632f72 	svcvs	0x00632f72
  74:	6c5f6564 	cfldr64vs	mvdx6, [pc], {100}	; 0x64
  78:	2f657469 	svccs	0x00657469
  7c:	70617267 	rsbvc	r7, r1, r7, ror #4
  80:	5f636968 	svcpl	0x00636968
  84:	70736964 	rsbsvc	r6, r3, r4, ror #18
  88:	2f79616c 	svccs	0x0079616c
  8c:	70617267 	rsbvc	r7, r1, r7, ror #4
  90:	5f636968 	svcpl	0x00636968
  94:	70736964 	rsbsvc	r6, r3, r4, ror #18
  98:	2f79616c 	svccs	0x0079616c
  9c:	70617267 	rsbvc	r7, r1, r7, ror #4
  a0:	5f636968 	svcpl	0x00636968
  a4:	70736964 	rsbsvc	r6, r3, r4, ror #18
  a8:	0079616c 	rsbseq	r6, r9, ip, ror #2
  ac:	6a626f00 	bvs	189bcb4 <startup-0x1e76434c>
  b0:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
  b4:	00010068 	andeq	r0, r1, r8, rrx
  b8:	61747300 	cmnvs	r4, r0, lsl #6
  bc:	70757472 	rsbsvc	r7, r5, r2, ror r4
  c0:	0200632e 	andeq	r6, r0, #-1207959552	; 0xb8000000
  c4:	79740000 	ldmdbvc	r4!, {}^	; <UNPREDICTABLE>
  c8:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
  cc:	00010068 	andeq	r0, r1, r8, rrx
  d0:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
  d4:	00682e6f 	rsbeq	r2, r8, pc, ror #28
  d8:	67000001 	strvs	r0, [r0, -r1]
  dc:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
  e0:	2e797274 	mrccs	2, 3, r7, cr9, cr4, {3}
  e4:	00010068 	andeq	r0, r1, r8, rrx
  e8:	05000000 	streq	r0, [r0, #-0]
  ec:	00001002 	andeq	r1, r0, r2
  f0:	01110320 	tsteq	r1, r0, lsr #6
  f4:	4d4b4bbb 	vstrmi	d20, [fp, #-748]	; 0xfffffd14
  f8:	cac9594b 	bgt	ff25662c <ballGeometry+0xdf255c90>
  fc:	02009259 	andeq	r9, r0, #-1879048187	; 0x90000005
 100:	58060104 	stmdapl	r6, {r2, r8}
 104:	59925906 	ldmibpl	r2, {r1, r2, r8, fp, ip, lr}
 108:	11030204 	tstne	r3, r4, lsl #4
 10c:	853d344a 	ldrhi	r3, [sp, #-1098]!	; 0xfffffbb6
 110:	3d3f2f33 	ldccc	15, cr2, [pc, #-204]!	; 4c <startup-0x1fffffb4>
 114:	00342f2f 	eorseq	r2, r4, pc, lsr #30
 118:	6a010402 	bvs	41128 <startup-0x1ffbeed8>
 11c:	01040200 	mrseq	r0, R12_usr
 120:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
 124:	3e513a01 	vnmlscc.f32	s7, s2, s2
 128:	0200342f 	andeq	r3, r0, #788529152	; 0x2f000000
 12c:	003e0304 	eorseq	r0, lr, r4, lsl #6
 130:	72030402 	andvc	r0, r3, #33554432	; 0x2000000
 134:	01040200 	mrseq	r0, R12_usr
 138:	40063c06 	andmi	r3, r6, r6, lsl #24
 13c:	03040200 	movweq	r0, #16896	; 0x4200
 140:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
 144:	02007203 	andeq	r7, r0, #805306368	; 0x30000000
 148:	3c060104 	stfccs	f0, [r6], {4}
 14c:	005a4106 	subseq	r4, sl, r6, lsl #2
 150:	3e030402 	cdpcc	4, 0, cr0, cr3, cr2, {0}
 154:	03040200 	movweq	r0, #16896	; 0x4200
 158:	04020072 	streq	r0, [r2], #-114	; 0xffffff8e
 15c:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 160:	04020040 	streq	r0, [r2], #-64	; 0xffffffc0
 164:	02003e03 	andeq	r3, r0, #3, 28	; 0x30
 168:	00720304 	rsbseq	r0, r2, r4, lsl #6
 16c:	06010402 	streq	r0, [r1], -r2, lsl #8
 170:	4d40063c 	stclmi	6, cr0, [r0, #-240]	; 0xffffff10
 174:	005a3d4b 	subseq	r3, sl, fp, asr #26
 178:	3e030402 	cdpcc	4, 0, cr0, cr3, cr2, {0}
 17c:	03040200 	movweq	r0, #16896	; 0x4200
 180:	040200c9 	streq	r0, [r2], #-201	; 0xffffff37
 184:	00550803 	subseq	r0, r5, r3, lsl #16
 188:	06010402 	streq	r0, [r1], -r2, lsl #8
 18c:	4d6b063c 	stclmi	6, cr0, [fp, #-240]!	; 0xffffff10
 190:	005a3d4b 	subseq	r3, sl, fp, asr #26
 194:	3e030402 	cdpcc	4, 0, cr0, cr3, cr2, {0}
 198:	03040200 	movweq	r0, #16896	; 0x4200
 19c:	040200c9 	streq	r0, [r2], #-201	; 0xffffff37
 1a0:	00550803 	subseq	r0, r5, r3, lsl #16
 1a4:	06010402 	streq	r0, [r1], -r2, lsl #8
 1a8:	026b063c 	rsbeq	r0, fp, #60, 12	; 0x3c00000
 1ac:	01010004 	tsteq	r1, r4
 1b0:	05000204 	streq	r0, [r0, #-516]	; 0xfffffdfc
 1b4:	00000002 	andeq	r0, r0, r2
 1b8:	012a0320 			; <UNDEFINED> instruction: 0x012a0320
 1bc:	03025e13 	movweq	r5, #11795	; 0x2e13
 1c0:	b8010100 	stmdalt	r1, {r8}
 1c4:	02000000 	andeq	r0, r0, #0
 1c8:	00006f00 	andeq	r6, r0, r0, lsl #30
 1cc:	fb010200 	blx	409d6 <startup-0x1ffbf62a>
 1d0:	01000d0e 	tsteq	r0, lr, lsl #26
 1d4:	00010101 	andeq	r0, r1, r1, lsl #2
 1d8:	00010000 	andeq	r0, r1, r0
 1dc:	3a430100 	bcc	10c05e4 <startup-0x1ef3fa1c>
 1e0:	7665642f 	strbtvc	r6, [r5], -pc, lsr #8
 1e4:	706f6c65 	rsbvc	r6, pc, r5, ror #24
 1e8:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 1ec:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 1f0:	65737361 	ldrbvs	r7, [r3, #-865]!	; 0xfffffc9f
 1f4:	656c626d 	strbvs	r6, [ip, #-621]!	; 0xfffffd93
 1f8:	6f632f72 	svcvs	0x00632f72
 1fc:	6c5f6564 	cfldr64vs	mvdx6, [pc], {100}	; 0x64
 200:	2f657469 	svccs	0x00657469
 204:	70617267 	rsbvc	r7, r1, r7, ror #4
 208:	5f636968 	svcpl	0x00636968
 20c:	70736964 	rsbsvc	r6, r3, r4, ror #18
 210:	2f79616c 	svccs	0x0079616c
 214:	6c697475 	cfstrdvs	mvd7, [r9], #-468	; 0xfffffe2c
 218:	65640000 	strbvs	r0, [r4, #-0]!
 21c:	2e79616c 	rpwcsez	f6, f1, #4.0
 220:	00010063 	andeq	r0, r1, r3, rrx
 224:	70797400 	rsbsvc	r7, r9, r0, lsl #8
 228:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
 22c:	00000100 	andeq	r0, r0, r0, lsl #2
 230:	616c6564 	cmnvs	ip, r4, ror #10
 234:	00682e79 	rsbeq	r2, r8, r9, ror lr
 238:	00000001 	andeq	r0, r0, r1
 23c:	d4020500 	strle	r0, [r2], #-1280	; 0xfffffb00
 240:	17200002 	strne	r0, [r0, -r2]!
 244:	3d3d2f3d 	ldccc	15, cr2, [sp, #-244]!	; 0xffffff0c
 248:	3d3e3d3d 	ldccc	13, cr3, [lr, #-244]!	; 0xffffff0c
 24c:	2f773d40 	svccs	0x00773d40
 250:	4b3f2f2f 	blmi	fcbf14 <startup-0x1f0340ec>
 254:	03040200 	movweq	r0, #16896	; 0x4200
 258:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
 25c:	02002f03 	andeq	r2, r0, #3, 30
 260:	002f0304 	eoreq	r0, pc, r4, lsl #6
 264:	2f030402 	svccs	0x00030402
 268:	03040200 	movweq	r0, #16896	; 0x4200
 26c:	04020029 	streq	r0, [r2], #-41	; 0xffffffd7
 270:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 274:	834c4d51 	movthi	r4, #52561	; 0xcd51
 278:	0402753e 	streq	r7, [r2], #-1342	; 0xfffffac2
 27c:	2c010100 	stfcss	f0, [r1], {-0}
 280:	02000001 	andeq	r0, r0, #1
 284:	00007700 	andeq	r7, r0, r0, lsl #14
 288:	fb010200 	blx	40a92 <startup-0x1ffbf56e>
 28c:	01000d0e 	tsteq	r0, lr, lsl #26
 290:	00010101 	andeq	r0, r1, r1, lsl #2
 294:	00010000 	andeq	r0, r1, r0
 298:	3a430100 	bcc	10c06a0 <startup-0x1ef3f960>
 29c:	7665642f 	strbtvc	r6, [r5], -pc, lsr #8
 2a0:	706f6c65 	rsbvc	r6, pc, r5, ror #24
 2a4:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 2a8:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 2ac:	65737361 	ldrbvs	r7, [r3, #-865]!	; 0xfffffc9f
 2b0:	656c626d 	strbvs	r6, [ip, #-621]!	; 0xfffffd93
 2b4:	6f632f72 	svcvs	0x00632f72
 2b8:	6c5f6564 	cfldr64vs	mvdx6, [pc], {100}	; 0x64
 2bc:	2f657469 	svccs	0x00657469
 2c0:	70617267 	rsbvc	r7, r1, r7, ror #4
 2c4:	5f636968 	svcpl	0x00636968
 2c8:	70736964 	rsbsvc	r6, r3, r4, ror #18
 2cc:	2f79616c 	svccs	0x0079616c
 2d0:	6c697475 	cfstrdvs	mvd7, [r9], #-468	; 0xfffffe2c
 2d4:	72670000 	rsbvc	r0, r7, #0
 2d8:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 2dc:	73696463 	cmnvc	r9, #1660944384	; 0x63000000
 2e0:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 2e4:	0100632e 	tsteq	r0, lr, lsr #6
 2e8:	79740000 	ldmdbvc	r4!, {}^	; <UNPREDICTABLE>
 2ec:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
 2f0:	00010068 	andeq	r0, r1, r8, rrx
 2f4:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 2f8:	00682e6f 	rsbeq	r2, r8, pc, ror #28
 2fc:	00000001 	andeq	r0, r0, r1
 300:	98020500 	stmdals	r2, {r8, sl}
 304:	16200003 	strtne	r0, [r0], -r3
 308:	77839167 	strvc	r9, [r3, r7, ror #2]
 30c:	6983d767 	stmibvs	r3, {r0, r1, r2, r5, r6, r8, r9, sl, ip, lr, pc}
 310:	4d593d67 	ldclmi	13, cr3, [r9, #-412]	; 0xfffffe64
 314:	3d3e3e2f 	ldccc	14, cr3, [lr, #-188]!	; 0xffffff44
 318:	2f3d323e 	svccs	0x003d323e
 31c:	26622f3d 	uqasxcs	r2, r2, sp
 320:	a13d3d24 	teqge	sp, r4, lsr #26
 324:	3e3e3e67 	cdpcc	14, 3, cr3, cr14, cr7, {3}
 328:	303d3059 	eorscc	r3, sp, r9, asr r0
 32c:	30403e5a 	subcc	r3, r0, sl, asr lr
 330:	5967af3d 	stmdbpl	r7!, {r0, r2, r3, r4, r5, r8, r9, sl, fp, sp, pc}^
 334:	4c914d67 	ldcmi	13, cr4, [r1], {103}	; 0x67
 338:	303e305a 	eorscc	r3, lr, sl, asr r0
 33c:	3e3d303e 	mrccc	0, 1, r3, cr13, cr14, {1}
 340:	3e91693d 			; <UNDEFINED> instruction: 0x3e91693d
 344:	4d833e5a 	stcmi	14, cr3, [r3, #360]	; 0x168
 348:	3d5a3e91 	ldclcc	14, cr3, [sl, #-580]	; 0xfffffdbc
 34c:	2f4d833e 	svccs	0x004d833e
 350:	3e3d3e3d 	mrccc	14, 1, r3, cr13, cr13, {1}
 354:	4b4b4b3e 	blmi	12d3054 <startup-0x1ed2cfac>
 358:	3f3d4b4b 	svccc	0x003d4b4b
 35c:	4b9f4c3e 	blmi	fe7d345c <ballGeometry+0xde7d2ac0>
 360:	03040200 	movweq	r0, #16896	; 0x4200
 364:	0402004c 	streq	r0, [r2], #-76	; 0xffffffb4
 368:	02004803 	andeq	r4, r0, #196608	; 0x30000
 36c:	58060104 	stmdapl	r6, {r2, r8}
 370:	02040200 	andeq	r0, r4, #0, 4
 374:	02004606 	andeq	r4, r0, #6291456	; 0x600000
 378:	58060104 	stmdapl	r6, {r2, r8}
 37c:	4a090306 	bmi	240f9c <startup-0x1fdbf064>
 380:	0200e54d 	andeq	lr, r0, #322961408	; 0x13400000
 384:	58060104 	stmdapl	r6, {r2, r8}
 388:	02005b06 	andeq	r5, r0, #6144	; 0x1800
 38c:	58060104 	stmdapl	r6, {r2, r8}
 390:	08ad5b06 	stmiaeq	sp!, {r1, r2, r8, r9, fp, ip, lr}
 394:	4c794c22 	ldclmi	12, cr4, [r9], #-136	; 0xffffff78
 398:	694b784b 	stmdbvs	fp, {r0, r1, r3, r6, fp, ip, sp, lr}^
 39c:	caa0d8c9 	bgt	fe8366c8 <ballGeometry+0xde835d2c>
 3a0:	039fae4b 	orrseq	sl, pc, #1200	; 0x4b0
 3a4:	0331ac5b 	teqeq	r1, #23296	; 0x5b00
 3a8:	06022023 	streq	r2, [r2], -r3, lsr #32
 3ac:	Address 0x000003ac is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
   4:	00707574 	rsbseq	r7, r0, r4, ror r5
   8:	4550534f 	ldrbmi	r5, [r0, #-847]	; 0xfffffcb1
   c:	00524445 	subseq	r4, r2, r5, asr #8
  10:	6d6f6547 	cfstr64vs	mvdx6, [pc, #-284]!	; fffffefc <ballGeometry+0xdffff560>
  14:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
  18:	00727450 	rsbseq	r7, r2, r0, asr r4
  1c:	5f524449 	svcpl	0x00524449
  20:	00574f4c 	subseq	r4, r7, ip, asr #30
  24:	5f524449 	svcpl	0x00524449
  28:	48474948 	stmdami	r7, {r3, r6, r8, fp, lr}^
  2c:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
  30:	53420065 	movtpl	r0, #8293	; 0x2065
  34:	64005252 	strvs	r5, [r0], #-594	; 0xfffffdae
  38:	00797269 	rsbseq	r7, r9, r9, ror #4
  3c:	31524641 	cmpcc	r2, r1, asr #12
  40:	52464100 	subpl	r4, r6, #0, 2
  44:	4f4d0032 	svcmi	0x004d0032
  48:	00524544 	subseq	r4, r2, r4, asr #10
  4c:	656d6964 	strbvs	r6, [sp, #-2404]!	; 0xfffff69c
  50:	6f69736e 	svcvs	0x0069736e
  54:	7a69536e 	bvc	1a54e14 <startup-0x1e5ab1ec>
  58:	61620065 	cmnvs	r2, r5, rrx
  5c:	70006c6c 	andvc	r6, r0, ip, ror #24
  60:	0079736f 	rsbseq	r7, r9, pc, ror #6
  64:	696f5074 	stmdbvs	pc!, {r2, r4, r5, r6, ip, lr}^	; <UNPREDICTABLE>
  68:	4f00746e 	svcmi	0x0000746e
  6c:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
  70:	4e470052 	mcrmi	0, 2, r0, cr7, cr2, {2}
  74:	39432055 	stmdbcc	r3, {r0, r2, r4, r6, sp}^
  78:	2e362039 	mrccs	0, 1, r2, cr6, cr9, {1}
  7c:	20312e33 	eorscs	r2, r1, r3, lsr lr
  80:	37313032 			; <UNDEFINED> instruction: 0x37313032
  84:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  88:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  8c:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  90:	5b202965 	blpl	80a62c <startup-0x1f7f59d4>
  94:	2f4d5241 	svccs	0x004d5241
  98:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  9c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  a0:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  a4:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  a8:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  ac:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  b0:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  b4:	31353534 	teqcc	r5, r4, lsr r5
  b8:	2d205d32 	stccs	13, cr5, [r0, #-200]!	; 0xffffff38
  bc:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
  c0:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
  c4:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
  c8:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
  cc:	2d36766d 	ldccs	6, cr7, [r6, #-436]!	; 0xfffffe4c
  d0:	6d2d206d 	stcvs	0, cr2, [sp, #-436]!	; 0xfffffe4c
  d4:	616f6c66 	cmnvs	pc, r6, ror #24
  d8:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
  dc:	6f733d69 	svcvs	0x00733d69
  e0:	2d207466 	cfstrscs	mvf7, [r0, #-408]!	; 0xfffffe68
  e4:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
  e8:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
  ec:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
  f0:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
  f4:	2d36766d 	ldccs	6, cr7, [r6, #-436]!	; 0xfffffe4c
  f8:	672d206d 	strvs	r2, [sp, -sp, rrx]!
  fc:	304f2d20 	subcc	r2, pc, r0, lsr #26
 100:	74732d20 	ldrbtvc	r2, [r3], #-3360	; 0xfffff2e0
 104:	39633d64 	stmdbcc	r3!, {r2, r5, r6, r8, sl, fp, ip, sp}^
 108:	6e750039 	mrcvs	0, 3, r0, cr5, cr9, {1}
 10c:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 110:	63206465 			; <UNDEFINED> instruction: 0x63206465
 114:	00726168 	rsbseq	r6, r2, r8, ror #2
 118:	78736f70 	ldmdavc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 11c:	434f4c00 	movtmi	r4, #64512	; 0xfc00
 120:	315f524b 	cmpcc	pc, fp, asr #4
 124:	444f0036 	strbmi	r0, [pc], #-54	; 12c <startup-0x1ffffed4>
 128:	49485f52 	stmdbmi	r8, {r1, r4, r6, r8, r9, sl, fp, ip, lr}^
 12c:	73004847 	movwvc	r4, #2119	; 0x847
 130:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
 134:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
 138:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 13c:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
 140:	69730074 	ldmdbvs	r3!, {r2, r4, r5, r6}^
 144:	0079657a 	rsbseq	r6, r9, sl, ror r5
 148:	642f3a43 	strtvs	r3, [pc], #-2627	; 150 <startup-0x1ffffeb0>
 14c:	6c657665 	stclvs	6, cr7, [r5], #-404	; 0xfffffe6c
 150:	656d706f 	strbvs	r7, [sp, #-111]!	; 0xffffff91
 154:	612f746e 			; <UNDEFINED> instruction: 0x612f746e
 158:	73616d72 	cmnvc	r1, #7296	; 0x1c80
 15c:	626d6573 	rsbvs	r6, sp, #482344960	; 0x1cc00000
 160:	2f72656c 	svccs	0x0072656c
 164:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 168:	74696c5f 	strbtvc	r6, [r9], #-3167	; 0xfffff3a1
 16c:	72672f65 	rsbvc	r2, r7, #404	; 0x194
 170:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 174:	69645f63 	stmdbvs	r4!, {r0, r1, r5, r6, r8, r9, sl, fp, ip, lr}^
 178:	616c7073 	smcvs	50947	; 0xc703
 17c:	72672f79 	rsbvc	r2, r7, #484	; 0x1e4
 180:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 184:	69645f63 	stmdbvs	r4!, {r0, r1, r5, r6, r8, r9, sl, fp, ip, lr}^
 188:	616c7073 	smcvs	50947	; 0xc703
 18c:	72672f79 	rsbvc	r2, r7, #484	; 0x1e4
 190:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 194:	69645f63 	stmdbvs	r4!, {r0, r1, r5, r6, r8, r9, sl, fp, ip, lr}^
 198:	616c7073 	smcvs	50947	; 0xc703
 19c:	74732f79 	ldrbtvc	r2, [r3], #-3961	; 0xfffff087
 1a0:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 1a4:	00632e70 	rsbeq	r2, r3, r0, ror lr
 1a8:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
 1ac:	00635f38 	rsbeq	r5, r3, r8, lsr pc
 1b0:	78726964 	ldmdavc	r2!, {r2, r5, r6, r8, fp, sp, lr}^
 1b4:	53455200 	movtpl	r5, #20992	; 0x5200
 1b8:	5244495f 	subpl	r4, r4, #1556480	; 0x17c000
 1bc:	6e697500 	cdpvs	5, 6, cr7, cr9, cr0, {0}
 1c0:	00363174 	eorseq	r3, r6, r4, ror r1
 1c4:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
 1c8:	4f003233 	svcmi	0x00003233
 1cc:	63656a62 	cmnvs	r5, #401408	; 0x62000
 1d0:	72745074 	rsbsvc	r5, r4, #116	; 0x74
 1d4:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
 1d8:	70615f74 	rsbvc	r5, r1, r4, ror pc
 1dc:	69730070 	ldmdbvs	r3!, {r4, r5, r6}^
 1e0:	0078657a 	rsbseq	r6, r8, sl, ror r5
 1e4:	5f534552 	svcpl	0x00534552
 1e8:	0052444f 	subseq	r4, r2, pc, asr #8
 1ec:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 1f0:	52007864 	andpl	r7, r0, #100, 16	; 0x640000
 1f4:	4c5f5345 	mrrcmi	3, 4, r5, pc, cr5	; <UNPREDICTABLE>
 1f8:	524b434f 	subpl	r4, fp, #1006632961	; 0x3c000001
 1fc:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 200:	7274506f 	rsbsvc	r5, r4, #111	; 0x6f
 204:	52444f00 	subpl	r4, r4, #0, 30
 208:	574f4c5f 	smlsldpl	r4, pc, pc, ip	; <UNPREDICTABLE>
 20c:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 210:	726f506f 	rsbvc	r5, pc, #111	; 0x6f
 214:	756e0074 	strbvc	r0, [lr, #-116]!	; 0xffffff8c
 218:	696f706d 	stmdbvs	pc!, {r0, r2, r3, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
 21c:	0073746e 	rsbseq	r7, r3, lr, ror #8
 220:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
 224:	635f3631 	cmpvs	pc, #51380224	; 0x3100000
 228:	50555000 	subspl	r5, r5, r0
 22c:	73005244 	movwvc	r5, #580	; 0x244
 230:	74657a69 	strbtvc	r7, [r5], #-2665	; 0xfffff597
 234:	00657079 	rsbeq	r7, r5, r9, ror r0
 238:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 23c:	64707500 	ldrbtvs	r7, [r0], #-1280	; 0xfffffb00
 240:	5f657461 	svcpl	0x00657461
 244:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 248:	62007463 	andvs	r7, r0, #1660944384	; 0x63000000
 24c:	656c6c61 	strbvs	r6, [ip, #-3169]!	; 0xfffff39f
 250:	6c614272 	sfmvs	f4, 2, [r1], #-456	; 0xfffffe38
 254:	4552006c 	ldrbmi	r0, [r2, #-108]	; 0xffffff94
 258:	544f5f53 	strbpl	r5, [pc], #-3923	; 260 <startup-0x1ffffda0>
 25c:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
 260:	6564006e 	strbvs	r0, [r4, #-110]!	; 0xffffff92
 264:	5f79616c 	svcpl	0x0079616c
 268:	6c6c696d 			; <UNDEFINED> instruction: 0x6c6c696d
 26c:	72640069 	rsbvc	r0, r4, #105	; 0x69
 270:	65547761 	ldrbvs	r7, [r4, #-1889]	; 0xfffff89f
 274:	61007473 	tstvs	r0, r3, ror r4
 278:	706f7475 	rsbvc	r7, pc, r5, ror r4	; <UNPREDICTABLE>
 27c:	00676e6f 	rsbeq	r6, r7, pc, ror #28
 280:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
 284:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
 288:	65730074 	ldrbvs	r0, [r3, #-116]!	; 0xffffff8c
 28c:	70735f74 	rsbsvc	r5, r3, r4, ror pc
 290:	00646565 	rsbeq	r6, r4, r5, ror #10
 294:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
 298:	626f0038 	rsbvs	r0, pc, #56	; 0x38
 29c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 2a0:	6d6f6547 	cfstr64vs	mvdx6, [pc, #-284]!	; 18c <startup-0x1ffffe74>
 2a4:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 2a8:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
 2ac:	6f5f7261 	svcvs	0x005f7261
 2b0:	63656a62 	cmnvs	r5, #401408	; 0x62000
 2b4:	61620074 	smcvs	8196	; 0x2004
 2b8:	65476c6c 	strbvs	r6, [r7, #-3180]	; 0xfffff394
 2bc:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
 2c0:	6f007972 	svcvs	0x00007972
 2c4:	63656a62 	cmnvs	r5, #401408	; 0x62000
 2c8:	78695074 	stmdavc	r9!, {r2, r4, r5, r6, ip, lr}^
 2cc:	64006c65 	strvs	r6, [r0], #-3173	; 0xfffff39b
 2d0:	5f776172 	svcpl	0x00776172
 2d4:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 2d8:	74007463 	strvc	r7, [r0], #-1123	; 0xfffffb9d
 2dc:	656a624f 	strbvs	r6, [sl, #-591]!	; 0xfffffdb1
 2e0:	73007463 	movwvc	r7, #1123	; 0x463
 2e4:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 2e8:	65730079 	ldrbvs	r0, [r3, #-121]!	; 0xffffff87
 2ec:	626f5f74 	rsbvs	r5, pc, #116, 30	; 0x1d0
 2f0:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 2f4:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
 2f8:	43006465 	movwmi	r6, #1125	; 0x465
 2fc:	5f4c5254 	svcpl	0x004c5254
 300:	4e554f43 	cdpmi	15, 5, cr4, cr5, cr3, {2}
 304:	3a430054 	bcc	10c045c <startup-0x1ef3fba4>
 308:	7665642f 	strbtvc	r6, [r5], -pc, lsr #8
 30c:	706f6c65 	rsbvc	r6, pc, r5, ror #24
 310:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 314:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 318:	65737361 	ldrbvs	r7, [r3, #-865]!	; 0xfffffc9f
 31c:	656c626d 	strbvs	r6, [ip, #-621]!	; 0xfffffd93
 320:	6f632f72 	svcvs	0x00632f72
 324:	6c5f6564 	cfldr64vs	mvdx6, [pc], {100}	; 0x64
 328:	2f657469 	svccs	0x00657469
 32c:	70617267 	rsbvc	r7, r1, r7, ror #4
 330:	5f636968 	svcpl	0x00636968
 334:	70736964 	rsbsvc	r6, r3, r4, ror #18
 338:	2f79616c 	svccs	0x0079616c
 33c:	6c697475 	cfstrdvs	mvd7, [r9], #-468	; 0xfffffe2c
 340:	6c65642f 	cfstrdvs	mvd6, [r5], #-188	; 0xffffff44
 344:	632e7961 			; <UNDEFINED> instruction: 0x632e7961
 348:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 34c:	325f7961 	subscc	r7, pc, #1589248	; 0x184000
 350:	736e3035 	cmnvc	lr, #53	; 0x35
 354:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 358:	355f7961 	ldrbcc	r7, [pc, #-2401]	; fffff9ff <ballGeometry+0xdffff063>
 35c:	736e3030 	cmnvc	lr, #48	; 0x30
 360:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 364:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 2aa <startup-0x1ffffd56>	; <UNPREDICTABLE>
 368:	6f726369 	svcvs	0x00726369
 36c:	414f4c00 	cmpmi	pc, r0, lsl #24
 370:	45520044 	ldrbmi	r0, [r2, #-68]	; 0xffffffbc
 374:	54435f53 	strbpl	r5, [r3], #-3923	; 0xfffff0ad
 378:	00314c52 	eorseq	r4, r1, r2, asr ip
 37c:	5f534552 	svcpl	0x00534552
 380:	4c525443 	cfldrdmi	mvd5, [r2], {67}	; 0x43
 384:	6f6c0032 	svcvs	0x006c0032
 388:	0073706f 	rsbseq	r7, r3, pc, rrx
 38c:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
 390:	635f3233 	cmpvs	pc, #805306371	; 0x30000003
 394:	73795300 	cmnvc	r9, #0, 6
 398:	6b636954 	blvs	18da8f0 <startup-0x1e725710>
 39c:	00727450 	rsbseq	r7, r2, r0, asr r4
 3a0:	4c525443 	cfldrdmi	mvd5, [r2], {67}	; 0x43
 3a4:	73795300 	cmnvc	r9, #0, 6
 3a8:	6b636954 	blvs	18da900 <startup-0x1e725700>
 3ac:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
 3b0:	61760070 	cmnvs	r6, r0, ror r0
 3b4:	0065756c 	rsbeq	r7, r5, ip, ror #10
 3b8:	70617267 	rsbvc	r7, r1, r7, ror #4
 3bc:	5f636968 	svcpl	0x00636968
 3c0:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 3c4:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 3c8:	69700061 	ldmdbvs	r0!, {r0, r5, r6}^
 3cc:	006c6578 	rsbeq	r6, ip, r8, ror r5
 3d0:	756c6f63 	strbvc	r6, [ip, #-3939]!	; 0xfffff09d
 3d4:	43006e6d 	movwmi	r6, #3693	; 0xe6d
 3d8:	65642f3a 	strbvs	r2, [r4, #-3898]!	; 0xfffff0c6
 3dc:	6f6c6576 	svcvs	0x006c6576
 3e0:	6e656d70 	mcrvs	13, 3, r6, cr5, cr0, {3}
 3e4:	72612f74 	rsbvc	r2, r1, #116, 30	; 0x1d0
 3e8:	7373616d 	cmnvc	r3, #1073741851	; 0x4000001b
 3ec:	6c626d65 	stclvs	13, cr6, [r2], #-404	; 0xfffffe6c
 3f0:	632f7265 			; <UNDEFINED> instruction: 0x632f7265
 3f4:	5f65646f 	svcpl	0x0065646f
 3f8:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 3fc:	6172672f 	cmnvs	r2, pc, lsr #14
 400:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 404:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
 408:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 40c:	6974752f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r8, sl, ip, sp, lr}^
 410:	72672f6c 	rsbvc	r2, r7, #108, 30	; 0x1b0
 414:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 418:	73696463 	cmnvc	r9, #1660944384	; 0x63000000
 41c:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 420:	6700632e 	strvs	r6, [r0, -lr, lsr #6]
 424:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 428:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 42c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 430:	6c657300 	stclvs	3, cr7, [r5], #-0
 434:	5f746365 	svcpl	0x00746365
 438:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 43c:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 440:	67007265 	strvs	r7, [r0, -r5, ror #4]
 444:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 448:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 44c:	5f6c7274 	svcpl	0x006c7274
 450:	5f746962 	svcpl	0x00746962
 454:	61656c63 	cmnvs	r5, r3, ror #24
 458:	72670072 	rsbvc	r0, r7, #114	; 0x72
 45c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 460:	6e695f63 	cdpvs	15, 6, cr5, cr9, cr3, {3}
 464:	61697469 	cmnvs	r9, r9, ror #8
 468:	657a696c 	ldrbvs	r6, [sl, #-2412]!	; 0xfffff694
 46c:	61726700 	cmnvs	r2, r0, lsl #14
 470:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 474:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 478:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 47c:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
 480:	616d0074 	smcvs	53252	; 0xd004
 484:	67006b73 	smlsdxvs	r0, r3, fp, r6
 488:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 48c:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 490:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 494:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 498:	72670061 	rsbvc	r0, r7, #97	; 0x61
 49c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 4a0:	61775f63 	cmnvs	r7, r3, ror #30
 4a4:	725f7469 	subsvc	r7, pc, #1761607680	; 0x69000000
 4a8:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
 4ac:	61726700 	cmnvs	r2, r0, lsl #14
 4b0:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 4b4:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 4b8:	735f7261 	cmpvc	pc, #268435462	; 0x10000006
 4bc:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
 4c0:	7267006e 	rsbvc	r0, r7, #110	; 0x6e
 4c4:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 4c8:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
 4cc:	67006461 	strvs	r6, [r0, -r1, ror #8]
 4d0:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 4d4:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 4d8:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 4dc:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 368 <startup-0x1ffffc98>
 4e0:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000030 	andeq	r0, r0, r0, lsr r0
  20:	40080e41 	andmi	r0, r8, r1, asr #28
  24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  28:	100e4101 	andne	r4, lr, r1, lsl #2
  2c:	00070d41 	andeq	r0, r7, r1, asr #26
  30:	0000001c 	andeq	r0, r0, ip, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000040 	andcs	r0, r0, r0, asr #32
  3c:	0000009a 	muleq	r0, sl, r0
  40:	40080e41 	andmi	r0, r8, r1, asr #28
  44:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  48:	100e4101 	andne	r4, lr, r1, lsl #2
  4c:	00070d41 	andeq	r0, r7, r1, asr #26
  50:	0000000c 	andeq	r0, r0, ip
  54:	00000000 	andeq	r0, r0, r0
  58:	20000000 	andcs	r0, r0, r0
  5c:	0000000c 	andeq	r0, r0, ip
  60:	00000018 	andeq	r0, r0, r8, lsl r0
  64:	00000000 	andeq	r0, r0, r0
  68:	200000da 	ldrdcs	r0, [r0], -sl
  6c:	0000001a 	andeq	r0, r0, sl, lsl r0
  70:	40080e41 	andmi	r0, r8, r1, asr #28
  74:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  78:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  7c:	00000018 	andeq	r0, r0, r8, lsl r0
  80:	00000000 	andeq	r0, r0, r0
  84:	200000f4 	strdcs	r0, [r0], -r4
  88:	0000000e 	andeq	r0, r0, lr
  8c:	40080e41 	andmi	r0, r8, r1, asr #28
  90:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  94:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  98:	0000001c 	andeq	r0, r0, ip, lsl r0
  9c:	00000000 	andeq	r0, r0, r0
  a0:	20000102 	andcs	r0, r0, r2, lsl #2
  a4:	00000036 	andeq	r0, r0, r6, lsr r0
  a8:	40080e41 	andmi	r0, r8, r1, asr #28
  ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  b0:	100e4101 	andne	r4, lr, r1, lsl #2
  b4:	00070d41 	andeq	r0, r7, r1, asr #26
  b8:	0000001c 	andeq	r0, r0, ip, lsl r0
  bc:	00000000 	andeq	r0, r0, r0
  c0:	20000138 	andcs	r0, r0, r8, lsr r1
  c4:	000000a0 	andeq	r0, r0, r0, lsr #1
  c8:	40080e41 	andmi	r0, r8, r1, asr #28
  cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  d0:	100e4101 	andne	r4, lr, r1, lsl #2
  d4:	00070d41 	andeq	r0, r7, r1, asr #26
  d8:	0000001c 	andeq	r0, r0, ip, lsl r0
  dc:	00000000 	andeq	r0, r0, r0
  e0:	200001d8 	ldrdcs	r0, [r0], -r8
  e4:	0000007e 	andeq	r0, r0, lr, ror r0
  e8:	40080e41 	andmi	r0, r8, r1, asr #28
  ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f0:	200e4101 	andcs	r4, lr, r1, lsl #2
  f4:	00070d41 	andeq	r0, r7, r1, asr #26
  f8:	0000001c 	andeq	r0, r0, ip, lsl r0
  fc:	00000000 	andeq	r0, r0, r0
 100:	20000256 	andcs	r0, r0, r6, asr r2
 104:	0000007e 	andeq	r0, r0, lr, ror r0
 108:	40080e41 	andmi	r0, r8, r1, asr #28
 10c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 110:	200e4101 	andcs	r4, lr, r1, lsl #2
 114:	00070d41 	andeq	r0, r7, r1, asr #26
 118:	0000000c 	andeq	r0, r0, ip
 11c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 120:	7c020001 	stcvc	0, cr0, [r2], {1}
 124:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 128:	0000001c 	andeq	r0, r0, ip, lsl r0
 12c:	00000118 	andeq	r0, r0, r8, lsl r1
 130:	200002d4 	ldrdcs	r0, [r0], -r4
 134:	00000048 	andeq	r0, r0, r8, asr #32
 138:	40080e41 	andmi	r0, r8, r1, asr #28
 13c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 140:	100e4101 	andne	r4, lr, r1, lsl #2
 144:	00070d41 	andeq	r0, r7, r1, asr #26
 148:	00000018 	andeq	r0, r0, r8, lsl r0
 14c:	00000118 	andeq	r0, r0, r8, lsl r1
 150:	2000031c 	andcs	r0, r0, ip, lsl r3
 154:	00000012 	andeq	r0, r0, r2, lsl r0
 158:	40080e41 	andmi	r0, r8, r1, asr #28
 15c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 160:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 164:	0000001c 	andeq	r0, r0, ip, lsl r0
 168:	00000118 	andeq	r0, r0, r8, lsl r1
 16c:	2000032e 	andcs	r0, r0, lr, lsr #6
 170:	00000034 	andeq	r0, r0, r4, lsr r0
 174:	40080e41 	andmi	r0, r8, r1, asr #28
 178:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 17c:	180e4101 	stmdane	lr, {r0, r8, lr}
 180:	00070d41 	andeq	r0, r7, r1, asr #26
 184:	0000001c 	andeq	r0, r0, ip, lsl r0
 188:	00000118 	andeq	r0, r0, r8, lsl r1
 18c:	20000362 	andcs	r0, r0, r2, ror #6
 190:	00000034 	andeq	r0, r0, r4, lsr r0
 194:	40080e41 	andmi	r0, r8, r1, asr #28
 198:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 19c:	100e4101 	andne	r4, lr, r1, lsl #2
 1a0:	00070d41 	andeq	r0, r7, r1, asr #26
 1a4:	0000000c 	andeq	r0, r0, ip
 1a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1ac:	7c020001 	stcvc	0, cr0, [r2], {1}
 1b0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b8:	000001a4 	andeq	r0, r0, r4, lsr #3
 1bc:	20000398 	mulcs	r0, r8, r3
 1c0:	0000003c 	andeq	r0, r0, ip, lsr r0
 1c4:	40080e41 	andmi	r0, r8, r1, asr #28
 1c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1cc:	100e4101 	andne	r4, lr, r1, lsl #2
 1d0:	00070d41 	andeq	r0, r7, r1, asr #26
 1d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d8:	000001a4 	andeq	r0, r0, r4, lsr #3
 1dc:	200003d4 	ldrdcs	r0, [r0], -r4
 1e0:	00000044 	andeq	r0, r0, r4, asr #32
 1e4:	40080e41 	andmi	r0, r8, r1, asr #28
 1e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1ec:	100e4101 	andne	r4, lr, r1, lsl #2
 1f0:	00070d41 	andeq	r0, r7, r1, asr #26
 1f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f8:	000001a4 	andeq	r0, r0, r4, lsr #3
 1fc:	20000418 	andcs	r0, r0, r8, lsl r4
 200:	00000024 	andeq	r0, r0, r4, lsr #32
 204:	40080e41 	andmi	r0, r8, r1, asr #28
 208:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 20c:	100e4101 	andne	r4, lr, r1, lsl #2
 210:	00070d41 	andeq	r0, r7, r1, asr #26
 214:	00000018 	andeq	r0, r0, r8, lsl r0
 218:	000001a4 	andeq	r0, r0, r4, lsr #3
 21c:	2000043c 	andcs	r0, r0, ip, lsr r4
 220:	00000064 	andeq	r0, r0, r4, rrx
 224:	40080e41 	andmi	r0, r8, r1, asr #28
 228:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 22c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 230:	0000001c 	andeq	r0, r0, ip, lsl r0
 234:	000001a4 	andeq	r0, r0, r4, lsr #3
 238:	200004a0 	andcs	r0, r0, r0, lsr #9
 23c:	0000006c 	andeq	r0, r0, ip, rrx
 240:	40080e41 	andmi	r0, r8, r1, asr #28
 244:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 248:	180e4101 	stmdane	lr, {r0, r8, lr}
 24c:	00070d41 	andeq	r0, r7, r1, asr #26
 250:	0000001c 	andeq	r0, r0, ip, lsl r0
 254:	000001a4 	andeq	r0, r0, r4, lsr #3
 258:	2000050c 	andcs	r0, r0, ip, lsl #10
 25c:	0000002a 	andeq	r0, r0, sl, lsr #32
 260:	40080e41 	andmi	r0, r8, r1, asr #28
 264:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 268:	100e4101 	andne	r4, lr, r1, lsl #2
 26c:	00070d41 	andeq	r0, r7, r1, asr #26
 270:	0000001c 	andeq	r0, r0, ip, lsl r0
 274:	000001a4 	andeq	r0, r0, r4, lsr #3
 278:	20000536 	andcs	r0, r0, r6, lsr r5
 27c:	0000005a 	andeq	r0, r0, sl, asr r0
 280:	40080e41 	andmi	r0, r8, r1, asr #28
 284:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 288:	100e4101 	andne	r4, lr, r1, lsl #2
 28c:	00070d41 	andeq	r0, r7, r1, asr #26
 290:	0000001c 	andeq	r0, r0, ip, lsl r0
 294:	000001a4 	andeq	r0, r0, r4, lsr #3
 298:	20000590 	mulcs	r0, r0, r5
 29c:	00000040 	andeq	r0, r0, r0, asr #32
 2a0:	40080e41 	andmi	r0, r8, r1, asr #28
 2a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2a8:	100e4101 	andne	r4, lr, r1, lsl #2
 2ac:	00070d41 	andeq	r0, r7, r1, asr #26
 2b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 2b4:	000001a4 	andeq	r0, r0, r4, lsr #3
 2b8:	200005d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 2bc:	00000046 	andeq	r0, r0, r6, asr #32
 2c0:	40080e41 	andmi	r0, r8, r1, asr #28
 2c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2c8:	100e4101 	andne	r4, lr, r1, lsl #2
 2cc:	00070d41 	andeq	r0, r7, r1, asr #26
 2d0:	00000018 	andeq	r0, r0, r8, lsl r0
 2d4:	000001a4 	andeq	r0, r0, r4, lsr #3
 2d8:	20000616 	andcs	r0, r0, r6, lsl r6
 2dc:	00000056 	andeq	r0, r0, r6, asr r0
 2e0:	40080e41 	andmi	r0, r8, r1, asr #28
 2e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2e8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 2f0:	000001a4 	andeq	r0, r0, r4, lsr #3
 2f4:	2000066c 	andcs	r0, r0, ip, ror #12
 2f8:	00000066 	andeq	r0, r0, r6, rrx
 2fc:	40080e41 	andmi	r0, r8, r1, asr #28
 300:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 304:	100e4101 	andne	r4, lr, r1, lsl #2
 308:	00070d41 	andeq	r0, r7, r1, asr #26
 30c:	00000020 	andeq	r0, r0, r0, lsr #32
 310:	000001a4 	andeq	r0, r0, r4, lsr #3
 314:	200006d2 	ldrdcs	r0, [r0], -r2
 318:	00000186 	andeq	r0, r0, r6, lsl #3
 31c:	400c0e41 	andmi	r0, ip, r1, asr #28
 320:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 324:	018e4002 	orreq	r4, lr, r2
 328:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 32c:	0000070d 	andeq	r0, r0, sp, lsl #14
 330:	0000000c 	andeq	r0, r0, ip
 334:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 338:	7c010001 	stcvc	0, cr0, [r1], {1}
 33c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 340:	0000000c 	andeq	r0, r0, ip
 344:	00000330 	andeq	r0, r0, r0, lsr r3
 348:	20000859 	andcs	r0, r0, r9, asr r8
 34c:	0000010a 	andeq	r0, r0, sl, lsl #2
 350:	0000000c 	andeq	r0, r0, ip
 354:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 358:	7c020001 	stcvc	0, cr0, [r2], {1}
 35c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 360:	00000014 	andeq	r0, r0, r4, lsl r0
 364:	00000350 	andeq	r0, r0, r0, asr r3
 368:	20000970 	andcs	r0, r0, r0, ror r9
 36c:	00000012 	andeq	r0, r0, r2, lsl r0
 370:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
 374:	00018e02 	andeq	r8, r1, r2, lsl #28
