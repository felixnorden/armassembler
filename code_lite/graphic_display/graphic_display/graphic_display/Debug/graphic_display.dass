
./Debug/graphic_display.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
 */
void startup(void) __attribute__((naked)) __attribute__((section(".start_section")));

void startup(void)
{
	__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f810 	bl	20000028 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
		" LDR R0,=0x2001C000\n" /* set stack */
		" MOV SP,R0\n"
		" BL main\n"   /* call main */
		"_exit: B .\n" /* never return */
	);
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <init_app>:

void init_app(void)
{
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
#ifdef USBDM
	*((unsigned long *)0x40023830) = 0x18;
	__asm volatile(" LDR R0,=0x08000209\n BLX R0 \n");
#endif

	GPIO_E.MODER = 0x55555555;
20000014:	4b02      	ldr	r3, [pc, #8]	; (20000020 <init_app+0x10>)
20000016:	4a03      	ldr	r2, [pc, #12]	; (20000024 <init_app+0x14>)
20000018:	601a      	str	r2, [r3, #0]
}
2000001a:	46c0      	nop			; (mov r8, r8)
2000001c:	46bd      	mov	sp, r7
2000001e:	bd80      	pop	{r7, pc}
20000020:	40021000 	andmi	r1, r2, r0
20000024:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000028 <main>:

void main(void)
{
20000028:	b580      	push	{r7, lr}
2000002a:	b082      	sub	sp, #8
2000002c:	af00      	add	r7, sp, #0
	uint32 i;
	init_app();
2000002e:	f7ff ffef 	bl	20000010 <init_app>
	graphic_initialize();
20000032:	f000 f9ea 	bl	2000040a <graphic_initialize>

#ifndef SIMULATOR
	graphic_clear_screen();
#endif

	for (i = 0; i < 128; i++)
20000036:	2300      	movs	r3, #0
20000038:	607b      	str	r3, [r7, #4]
2000003a:	e009      	b.n	20000050 <main+0x28>
	{
		pixel(i, 10, 1);
2000003c:	687b      	ldr	r3, [r7, #4]
2000003e:	b2db      	uxtb	r3, r3
20000040:	2201      	movs	r2, #1
20000042:	210a      	movs	r1, #10
20000044:	0018      	movs	r0, r3
20000046:	f000 fa3e 	bl	200004c6 <pixel>
	for (i = 0; i < 128; i++)
2000004a:	687b      	ldr	r3, [r7, #4]
2000004c:	3301      	adds	r3, #1
2000004e:	607b      	str	r3, [r7, #4]
20000050:	687b      	ldr	r3, [r7, #4]
20000052:	2b7f      	cmp	r3, #127	; 0x7f
20000054:	d9f2      	bls.n	2000003c <main+0x14>
	}
	for (i = 0; i < 64; i++)
20000056:	2300      	movs	r3, #0
20000058:	607b      	str	r3, [r7, #4]
2000005a:	e009      	b.n	20000070 <main+0x48>
	{
		pixel(10, i, 1);
2000005c:	687b      	ldr	r3, [r7, #4]
2000005e:	b2db      	uxtb	r3, r3
20000060:	2201      	movs	r2, #1
20000062:	0019      	movs	r1, r3
20000064:	200a      	movs	r0, #10
20000066:	f000 fa2e 	bl	200004c6 <pixel>
	for (i = 0; i < 64; i++)
2000006a:	687b      	ldr	r3, [r7, #4]
2000006c:	3301      	adds	r3, #1
2000006e:	607b      	str	r3, [r7, #4]
20000070:	687b      	ldr	r3, [r7, #4]
20000072:	2b3f      	cmp	r3, #63	; 0x3f
20000074:	d9f2      	bls.n	2000005c <main+0x34>
	}

	delay_milli(500);
20000076:	23fa      	movs	r3, #250	; 0xfa
20000078:	005b      	lsls	r3, r3, #1
2000007a:	0018      	movs	r0, r3
2000007c:	f000 f86b 	bl	20000156 <delay_milli>

	for (i = 0; i < 128; i++)
20000080:	2300      	movs	r3, #0
20000082:	607b      	str	r3, [r7, #4]
20000084:	e009      	b.n	2000009a <main+0x72>
	{
		pixel(i, 10, 0);
20000086:	687b      	ldr	r3, [r7, #4]
20000088:	b2db      	uxtb	r3, r3
2000008a:	2200      	movs	r2, #0
2000008c:	210a      	movs	r1, #10
2000008e:	0018      	movs	r0, r3
20000090:	f000 fa19 	bl	200004c6 <pixel>
	for (i = 0; i < 128; i++)
20000094:	687b      	ldr	r3, [r7, #4]
20000096:	3301      	adds	r3, #1
20000098:	607b      	str	r3, [r7, #4]
2000009a:	687b      	ldr	r3, [r7, #4]
2000009c:	2b7f      	cmp	r3, #127	; 0x7f
2000009e:	d9f2      	bls.n	20000086 <main+0x5e>
	}
	for (i = 0; i < 64; i++)
200000a0:	2300      	movs	r3, #0
200000a2:	607b      	str	r3, [r7, #4]
200000a4:	e009      	b.n	200000ba <main+0x92>
	{
		pixel(10, i, 0);
200000a6:	687b      	ldr	r3, [r7, #4]
200000a8:	b2db      	uxtb	r3, r3
200000aa:	2200      	movs	r2, #0
200000ac:	0019      	movs	r1, r3
200000ae:	200a      	movs	r0, #10
200000b0:	f000 fa09 	bl	200004c6 <pixel>
	for (i = 0; i < 64; i++)
200000b4:	687b      	ldr	r3, [r7, #4]
200000b6:	3301      	adds	r3, #1
200000b8:	607b      	str	r3, [r7, #4]
200000ba:	687b      	ldr	r3, [r7, #4]
200000bc:	2b3f      	cmp	r3, #63	; 0x3f
200000be:	d9f2      	bls.n	200000a6 <main+0x7e>
	}
}
200000c0:	46c0      	nop			; (mov r8, r8)
200000c2:	46bd      	mov	sp, r7
200000c4:	b002      	add	sp, #8
200000c6:	bd80      	pop	{r7, pc}

200000c8 <delay_250ns>:
#include "delay.h"

#define STK_CTRL ((volatile unsigned int *)(0xE000E010)) 

void delay_250ns( void )
{
200000c8:	b580      	push	{r7, lr}
200000ca:	b082      	sub	sp, #8
200000cc:	af00      	add	r7, sp, #0
	uint32 x = 0;
200000ce:	2300      	movs	r3, #0
200000d0:	607b      	str	r3, [r7, #4]
	SYS_TICK.CTRL = 0;
200000d2:	4b0e      	ldr	r3, [pc, #56]	; (2000010c <delay_250ns+0x44>)
200000d4:	2200      	movs	r2, #0
200000d6:	701a      	strb	r2, [r3, #0]
	SYS_TICK.CTRL_COUNT = 0;
200000d8:	4b0c      	ldr	r3, [pc, #48]	; (2000010c <delay_250ns+0x44>)
200000da:	2200      	movs	r2, #0
200000dc:	709a      	strb	r2, [r3, #2]
	SYS_TICK.VAL = 0;
200000de:	4b0b      	ldr	r3, [pc, #44]	; (2000010c <delay_250ns+0x44>)
200000e0:	2200      	movs	r2, #0
200000e2:	609a      	str	r2, [r3, #8]
	SYS_TICK.LOAD = 42;
200000e4:	4b09      	ldr	r3, [pc, #36]	; (2000010c <delay_250ns+0x44>)
200000e6:	222a      	movs	r2, #42	; 0x2a
200000e8:	605a      	str	r2, [r3, #4]
	SYS_TICK.CTRL = 0x05;
200000ea:	4b08      	ldr	r3, [pc, #32]	; (2000010c <delay_250ns+0x44>)
200000ec:	2205      	movs	r2, #5
200000ee:	701a      	strb	r2, [r3, #0]
	
	x = SYS_TICK.VAL;
200000f0:	4b06      	ldr	r3, [pc, #24]	; (2000010c <delay_250ns+0x44>)
200000f2:	689b      	ldr	r3, [r3, #8]
200000f4:	607b      	str	r3, [r7, #4]
	while (SYS_TICK.CTRL_COUNT & 0x1 == 0) 
200000f6:	46c0      	nop			; (mov r8, r8)
200000f8:	4b04      	ldr	r3, [pc, #16]	; (2000010c <delay_250ns+0x44>)
200000fa:	789b      	ldrb	r3, [r3, #2]
	{
		x = SYS_TICK.VAL;
	}
	SYS_TICK.CTRL = 0;
200000fc:	4b03      	ldr	r3, [pc, #12]	; (2000010c <delay_250ns+0x44>)
200000fe:	2200      	movs	r2, #0
20000100:	701a      	strb	r2, [r3, #0]
}
20000102:	46c0      	nop			; (mov r8, r8)
20000104:	46bd      	mov	sp, r7
20000106:	b002      	add	sp, #8
20000108:	bd80      	pop	{r7, pc}
2000010a:	46c0      	nop			; (mov r8, r8)
2000010c:	e000e010 	and	lr, r0, r0, lsl r0

20000110 <delay_500ns>:

void delay_500ns( void ) 
{
20000110:	b580      	push	{r7, lr}
20000112:	af00      	add	r7, sp, #0
	delay_250ns();
20000114:	f7ff ffd8 	bl	200000c8 <delay_250ns>
	delay_250ns();
20000118:	f7ff ffd6 	bl	200000c8 <delay_250ns>
}
2000011c:	46c0      	nop			; (mov r8, r8)
2000011e:	46bd      	mov	sp, r7
20000120:	bd80      	pop	{r7, pc}

20000122 <delay_micro>:

void delay_micro( uint32_c us )
{
20000122:	b580      	push	{r7, lr}
20000124:	b084      	sub	sp, #16
20000126:	af00      	add	r7, sp, #0
20000128:	6078      	str	r0, [r7, #4]
	for (uint32 loops = 0; loops < us; loops++ )
2000012a:	2300      	movs	r3, #0
2000012c:	60fb      	str	r3, [r7, #12]
2000012e:	e00a      	b.n	20000146 <delay_micro+0x24>
		{
		delay_250ns();
20000130:	f7ff ffca 	bl	200000c8 <delay_250ns>
		delay_250ns();
20000134:	f7ff ffc8 	bl	200000c8 <delay_250ns>
		delay_250ns();
20000138:	f7ff ffc6 	bl	200000c8 <delay_250ns>
		delay_250ns();
2000013c:	f7ff ffc4 	bl	200000c8 <delay_250ns>
	for (uint32 loops = 0; loops < us; loops++ )
20000140:	68fb      	ldr	r3, [r7, #12]
20000142:	3301      	adds	r3, #1
20000144:	60fb      	str	r3, [r7, #12]
20000146:	68fa      	ldr	r2, [r7, #12]
20000148:	687b      	ldr	r3, [r7, #4]
2000014a:	429a      	cmp	r2, r3
2000014c:	d3f0      	bcc.n	20000130 <delay_micro+0xe>
	}
}
2000014e:	46c0      	nop			; (mov r8, r8)
20000150:	46bd      	mov	sp, r7
20000152:	b004      	add	sp, #16
20000154:	bd80      	pop	{r7, pc}

20000156 <delay_milli>:

void delay_milli( uint32 ms )
{	
20000156:	b580      	push	{r7, lr}
20000158:	b082      	sub	sp, #8
2000015a:	af00      	add	r7, sp, #0
2000015c:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
	ms = ms / 1000;
2000015e:	687a      	ldr	r2, [r7, #4]
20000160:	23fa      	movs	r3, #250	; 0xfa
20000162:	0099      	lsls	r1, r3, #2
20000164:	0010      	movs	r0, r2
20000166:	f000 fa71 	bl	2000064c <__udivsi3>
2000016a:	0003      	movs	r3, r0
2000016c:	607b      	str	r3, [r7, #4]
	ms++;
2000016e:	687b      	ldr	r3, [r7, #4]
20000170:	3301      	adds	r3, #1
20000172:	607b      	str	r3, [r7, #4]
	#endif // SIMULATOR
	delay_micro(ms*1000);
20000174:	687b      	ldr	r3, [r7, #4]
20000176:	22fa      	movs	r2, #250	; 0xfa
20000178:	0092      	lsls	r2, r2, #2
2000017a:	4353      	muls	r3, r2
2000017c:	0018      	movs	r0, r3
2000017e:	f7ff ffd0 	bl	20000122 <delay_micro>
20000182:	46c0      	nop			; (mov r8, r8)
20000184:	46bd      	mov	sp, r7
20000186:	b002      	add	sp, #8
20000188:	bd80      	pop	{r7, pc}
2000018a:	46c0      	nop			; (mov r8, r8)

2000018c <graphic_ctrl_bit_set>:
#include "graphicdisplay.h"
#include "gpio.h"

void graphic_ctrl_bit_set(uint8_c x)
{
2000018c:	b580      	push	{r7, lr}
2000018e:	b082      	sub	sp, #8
20000190:	af00      	add	r7, sp, #0
20000192:	0002      	movs	r2, r0
20000194:	1dfb      	adds	r3, r7, #7
20000196:	701a      	strb	r2, [r3, #0]
	GPIO_E.ODR_LOW |= x;
20000198:	490a      	ldr	r1, [pc, #40]	; (200001c4 <graphic_ctrl_bit_set+0x38>)
2000019a:	4b0a      	ldr	r3, [pc, #40]	; (200001c4 <graphic_ctrl_bit_set+0x38>)
2000019c:	7d1b      	ldrb	r3, [r3, #20]
2000019e:	b2da      	uxtb	r2, r3
200001a0:	1dfb      	adds	r3, r7, #7
200001a2:	781b      	ldrb	r3, [r3, #0]
200001a4:	4313      	orrs	r3, r2
200001a6:	b2db      	uxtb	r3, r3
200001a8:	750b      	strb	r3, [r1, #20]
	GPIO_E.ODR_LOW &= ~B_SELECT;
200001aa:	4a06      	ldr	r2, [pc, #24]	; (200001c4 <graphic_ctrl_bit_set+0x38>)
200001ac:	4b05      	ldr	r3, [pc, #20]	; (200001c4 <graphic_ctrl_bit_set+0x38>)
200001ae:	7d1b      	ldrb	r3, [r3, #20]
200001b0:	b2db      	uxtb	r3, r3
200001b2:	2104      	movs	r1, #4
200001b4:	438b      	bics	r3, r1
200001b6:	b2db      	uxtb	r3, r3
200001b8:	7513      	strb	r3, [r2, #20]
}
200001ba:	46c0      	nop			; (mov r8, r8)
200001bc:	46bd      	mov	sp, r7
200001be:	b002      	add	sp, #8
200001c0:	bd80      	pop	{r7, pc}
200001c2:	46c0      	nop			; (mov r8, r8)
200001c4:	40021000 	andmi	r1, r2, r0

200001c8 <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(uint8_c x)
{
200001c8:	b580      	push	{r7, lr}
200001ca:	b082      	sub	sp, #8
200001cc:	af00      	add	r7, sp, #0
200001ce:	0002      	movs	r2, r0
200001d0:	1dfb      	adds	r3, r7, #7
200001d2:	701a      	strb	r2, [r3, #0]
	GPIO_E.ODR_LOW &= ~x;
200001d4:	490c      	ldr	r1, [pc, #48]	; (20000208 <graphic_ctrl_bit_clear+0x40>)
200001d6:	4b0c      	ldr	r3, [pc, #48]	; (20000208 <graphic_ctrl_bit_clear+0x40>)
200001d8:	7d1b      	ldrb	r3, [r3, #20]
200001da:	b2db      	uxtb	r3, r3
200001dc:	b25b      	sxtb	r3, r3
200001de:	1dfa      	adds	r2, r7, #7
200001e0:	7812      	ldrb	r2, [r2, #0]
200001e2:	b252      	sxtb	r2, r2
200001e4:	43d2      	mvns	r2, r2
200001e6:	b252      	sxtb	r2, r2
200001e8:	4013      	ands	r3, r2
200001ea:	b25b      	sxtb	r3, r3
200001ec:	b2db      	uxtb	r3, r3
200001ee:	750b      	strb	r3, [r1, #20]
	GPIO_E.ODR_LOW &= ~B_SELECT;
200001f0:	4a05      	ldr	r2, [pc, #20]	; (20000208 <graphic_ctrl_bit_clear+0x40>)
200001f2:	4b05      	ldr	r3, [pc, #20]	; (20000208 <graphic_ctrl_bit_clear+0x40>)
200001f4:	7d1b      	ldrb	r3, [r3, #20]
200001f6:	b2db      	uxtb	r3, r3
200001f8:	2104      	movs	r1, #4
200001fa:	438b      	bics	r3, r1
200001fc:	b2db      	uxtb	r3, r3
200001fe:	7513      	strb	r3, [r2, #20]
}
20000200:	46c0      	nop			; (mov r8, r8)
20000202:	46bd      	mov	sp, r7
20000204:	b002      	add	sp, #8
20000206:	bd80      	pop	{r7, pc}
20000208:	40021000 	andmi	r1, r2, r0

2000020c <select_controller>:

void select_controller(uint8_c controller)
{
2000020c:	b580      	push	{r7, lr}
2000020e:	b082      	sub	sp, #8
20000210:	af00      	add	r7, sp, #0
20000212:	0002      	movs	r2, r0
20000214:	1dfb      	adds	r3, r7, #7
20000216:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_CS1 | B_CS2);
20000218:	2018      	movs	r0, #24
2000021a:	f7ff ffd5 	bl	200001c8 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(controller);
2000021e:	1dfb      	adds	r3, r7, #7
20000220:	781b      	ldrb	r3, [r3, #0]
20000222:	0018      	movs	r0, r3
20000224:	f7ff ffb2 	bl	2000018c <graphic_ctrl_bit_set>
}
20000228:	46c0      	nop			; (mov r8, r8)
2000022a:	46bd      	mov	sp, r7
2000022c:	b002      	add	sp, #8
2000022e:	bd80      	pop	{r7, pc}

20000230 <graphic_wait_ready>:

void graphic_wait_ready(void)
{
20000230:	b580      	push	{r7, lr}
20000232:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_clear(B_E);
20000234:	2040      	movs	r0, #64	; 0x40
20000236:	f7ff ffc7 	bl	200001c8 <graphic_ctrl_bit_clear>

	GPIO_E.MODER = 0x00005555;
2000023a:	4b13      	ldr	r3, [pc, #76]	; (20000288 <graphic_wait_ready+0x58>)
2000023c:	4a13      	ldr	r2, [pc, #76]	; (2000028c <graphic_wait_ready+0x5c>)
2000023e:	601a      	str	r2, [r3, #0]

	graphic_ctrl_bit_set(B_RW);
20000240:	2002      	movs	r0, #2
20000242:	f7ff ffa3 	bl	2000018c <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RS);
20000246:	2001      	movs	r0, #1
20000248:	f7ff ffbe 	bl	200001c8 <graphic_ctrl_bit_clear>

	delay_500ns();
2000024c:	f7ff ff60 	bl	20000110 <delay_500ns>

	while (TRUE)
	{
		graphic_ctrl_bit_set(B_E);
20000250:	2040      	movs	r0, #64	; 0x40
20000252:	f7ff ff9b 	bl	2000018c <graphic_ctrl_bit_set>
		delay_500ns();
20000256:	f7ff ff5b 	bl	20000110 <delay_500ns>
		graphic_ctrl_bit_clear(B_E);
2000025a:	2040      	movs	r0, #64	; 0x40
2000025c:	f7ff ffb4 	bl	200001c8 <graphic_ctrl_bit_clear>
		delay_500ns();
20000260:	f7ff ff56 	bl	20000110 <delay_500ns>
		if ((GPIO_E.IDR_HIGH & LCD_BUSY) == 0)
20000264:	4b08      	ldr	r3, [pc, #32]	; (20000288 <graphic_wait_ready+0x58>)
20000266:	7c5b      	ldrb	r3, [r3, #17]
20000268:	b2db      	uxtb	r3, r3
2000026a:	b25b      	sxtb	r3, r3
2000026c:	2b00      	cmp	r3, #0
2000026e:	da00      	bge.n	20000272 <graphic_wait_ready+0x42>
		graphic_ctrl_bit_set(B_E);
20000270:	e7ee      	b.n	20000250 <graphic_wait_ready+0x20>
		{
			break;
20000272:	46c0      	nop			; (mov r8, r8)
		}
	}

	graphic_ctrl_bit_set(B_E);
20000274:	2040      	movs	r0, #64	; 0x40
20000276:	f7ff ff89 	bl	2000018c <graphic_ctrl_bit_set>
	GPIO_E.MODER = 0x55555555;
2000027a:	4b03      	ldr	r3, [pc, #12]	; (20000288 <graphic_wait_ready+0x58>)
2000027c:	4a04      	ldr	r2, [pc, #16]	; (20000290 <graphic_wait_ready+0x60>)
2000027e:	601a      	str	r2, [r3, #0]
}
20000280:	46c0      	nop			; (mov r8, r8)
20000282:	46bd      	mov	sp, r7
20000284:	bd80      	pop	{r7, pc}
20000286:	46c0      	nop			; (mov r8, r8)
20000288:	40021000 	andmi	r1, r2, r0
2000028c:	00005555 	andeq	r5, r0, r5, asr r5
20000290:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000294 <graphic_read>:

uint8_c graphic_read(uint8_c controller)
{
20000294:	b580      	push	{r7, lr}
20000296:	b084      	sub	sp, #16
20000298:	af00      	add	r7, sp, #0
2000029a:	0002      	movs	r2, r0
2000029c:	1dfb      	adds	r3, r7, #7
2000029e:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200002a0:	2040      	movs	r0, #64	; 0x40
200002a2:	f7ff ff91 	bl	200001c8 <graphic_ctrl_bit_clear>

	GPIO_E.MODER = 0x00005555;
200002a6:	4b13      	ldr	r3, [pc, #76]	; (200002f4 <graphic_read+0x60>)
200002a8:	4a13      	ldr	r2, [pc, #76]	; (200002f8 <graphic_read+0x64>)
200002aa:	601a      	str	r2, [r3, #0]

	graphic_ctrl_bit_set(B_RS | B_RW);
200002ac:	2003      	movs	r0, #3
200002ae:	f7ff ff6d 	bl	2000018c <graphic_ctrl_bit_set>

	select_controller(controller);
200002b2:	1dfb      	adds	r3, r7, #7
200002b4:	781b      	ldrb	r3, [r3, #0]
200002b6:	0018      	movs	r0, r3
200002b8:	f7ff ffa8 	bl	2000020c <select_controller>
	delay_500ns();
200002bc:	f7ff ff28 	bl	20000110 <delay_500ns>

	graphic_ctrl_bit_set(B_E);
200002c0:	2040      	movs	r0, #64	; 0x40
200002c2:	f7ff ff63 	bl	2000018c <graphic_ctrl_bit_set>
	delay_500ns();
200002c6:	f7ff ff23 	bl	20000110 <delay_500ns>

	uint8_c rv = GPIO_E.IDR_HIGH;
200002ca:	4a0a      	ldr	r2, [pc, #40]	; (200002f4 <graphic_read+0x60>)
200002cc:	230f      	movs	r3, #15
200002ce:	18fb      	adds	r3, r7, r3
200002d0:	7c52      	ldrb	r2, [r2, #17]
200002d2:	701a      	strb	r2, [r3, #0]

	graphic_ctrl_bit_clear(B_E);
200002d4:	2040      	movs	r0, #64	; 0x40
200002d6:	f7ff ff77 	bl	200001c8 <graphic_ctrl_bit_clear>

	GPIO_E.MODER = 0x55555555;
200002da:	4b06      	ldr	r3, [pc, #24]	; (200002f4 <graphic_read+0x60>)
200002dc:	4a07      	ldr	r2, [pc, #28]	; (200002fc <graphic_read+0x68>)
200002de:	601a      	str	r2, [r3, #0]

	// TODO: MAY NEED CHANGE

	graphic_wait_ready();
200002e0:	f7ff ffa6 	bl	20000230 <graphic_wait_ready>

	return rv;
200002e4:	230f      	movs	r3, #15
200002e6:	18fb      	adds	r3, r7, r3
200002e8:	781b      	ldrb	r3, [r3, #0]
}
200002ea:	0018      	movs	r0, r3
200002ec:	46bd      	mov	sp, r7
200002ee:	b004      	add	sp, #16
200002f0:	bd80      	pop	{r7, pc}
200002f2:	46c0      	nop			; (mov r8, r8)
200002f4:	40021000 	andmi	r1, r2, r0
200002f8:	00005555 	andeq	r5, r0, r5, asr r5
200002fc:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000300 <graphic_read_data>:

uint8_c graphic_read_data(uint8_c controller)
{
20000300:	b580      	push	{r7, lr}
20000302:	b082      	sub	sp, #8
20000304:	af00      	add	r7, sp, #0
20000306:	0002      	movs	r2, r0
20000308:	1dfb      	adds	r3, r7, #7
2000030a:	701a      	strb	r2, [r3, #0]
	graphic_read(controller);
2000030c:	1dfb      	adds	r3, r7, #7
2000030e:	781b      	ldrb	r3, [r3, #0]
20000310:	0018      	movs	r0, r3
20000312:	f7ff ffbf 	bl	20000294 <graphic_read>
	return graphic_read(controller);
20000316:	1dfb      	adds	r3, r7, #7
20000318:	781b      	ldrb	r3, [r3, #0]
2000031a:	0018      	movs	r0, r3
2000031c:	f7ff ffba 	bl	20000294 <graphic_read>
20000320:	0003      	movs	r3, r0
}
20000322:	0018      	movs	r0, r3
20000324:	46bd      	mov	sp, r7
20000326:	b002      	add	sp, #8
20000328:	bd80      	pop	{r7, pc}

2000032a <graphic_write>:

void graphic_write(uint8_c value, uint8_c controller)
{
2000032a:	b580      	push	{r7, lr}
2000032c:	b082      	sub	sp, #8
2000032e:	af00      	add	r7, sp, #0
20000330:	0002      	movs	r2, r0
20000332:	1dfb      	adds	r3, r7, #7
20000334:	701a      	strb	r2, [r3, #0]
20000336:	1dbb      	adds	r3, r7, #6
20000338:	1c0a      	adds	r2, r1, #0
2000033a:	701a      	strb	r2, [r3, #0]
	GPIO_E.ODR_HIGH = value;
2000033c:	4a10      	ldr	r2, [pc, #64]	; (20000380 <graphic_write+0x56>)
2000033e:	1dfb      	adds	r3, r7, #7
20000340:	781b      	ldrb	r3, [r3, #0]
20000342:	7553      	strb	r3, [r2, #21]

	select_controller(controller);
20000344:	1dbb      	adds	r3, r7, #6
20000346:	781b      	ldrb	r3, [r3, #0]
20000348:	0018      	movs	r0, r3
2000034a:	f7ff ff5f 	bl	2000020c <select_controller>

	delay_500ns();
2000034e:	f7ff fedf 	bl	20000110 <delay_500ns>

	graphic_ctrl_bit_set(B_E);
20000352:	2040      	movs	r0, #64	; 0x40
20000354:	f7ff ff1a 	bl	2000018c <graphic_ctrl_bit_set>

	delay_500ns();
20000358:	f7ff feda 	bl	20000110 <delay_500ns>

	graphic_ctrl_bit_clear(B_E);
2000035c:	2040      	movs	r0, #64	; 0x40
2000035e:	f7ff ff33 	bl	200001c8 <graphic_ctrl_bit_clear>

	graphic_wait_ready();
20000362:	f7ff ff65 	bl	20000230 <graphic_wait_ready>

	GPIO_E.ODR_HIGH = 0;
20000366:	4b06      	ldr	r3, [pc, #24]	; (20000380 <graphic_write+0x56>)
20000368:	2200      	movs	r2, #0
2000036a:	755a      	strb	r2, [r3, #21]
	graphic_ctrl_bit_set(B_E);
2000036c:	2040      	movs	r0, #64	; 0x40
2000036e:	f7ff ff0d 	bl	2000018c <graphic_ctrl_bit_set>

	select_controller(0);
20000372:	2000      	movs	r0, #0
20000374:	f7ff ff4a 	bl	2000020c <select_controller>
}
20000378:	46c0      	nop			; (mov r8, r8)
2000037a:	46bd      	mov	sp, r7
2000037c:	b002      	add	sp, #8
2000037e:	bd80      	pop	{r7, pc}
20000380:	40021000 	andmi	r1, r2, r0

20000384 <graphic_write_command>:

void graphic_write_command(uint8_c command, uint8_c controller)
{
20000384:	b580      	push	{r7, lr}
20000386:	b082      	sub	sp, #8
20000388:	af00      	add	r7, sp, #0
2000038a:	0002      	movs	r2, r0
2000038c:	1dfb      	adds	r3, r7, #7
2000038e:	701a      	strb	r2, [r3, #0]
20000390:	1dbb      	adds	r3, r7, #6
20000392:	1c0a      	adds	r2, r1, #0
20000394:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000396:	2040      	movs	r0, #64	; 0x40
20000398:	f7ff ff16 	bl	200001c8 <graphic_ctrl_bit_clear>

	select_controller(controller);
2000039c:	1dbb      	adds	r3, r7, #6
2000039e:	781b      	ldrb	r3, [r3, #0]
200003a0:	0018      	movs	r0, r3
200003a2:	f7ff ff33 	bl	2000020c <select_controller>

	graphic_ctrl_bit_clear(B_RS | B_RW);
200003a6:	2003      	movs	r0, #3
200003a8:	f7ff ff0e 	bl	200001c8 <graphic_ctrl_bit_clear>

	graphic_write(command, controller);
200003ac:	1dbb      	adds	r3, r7, #6
200003ae:	781a      	ldrb	r2, [r3, #0]
200003b0:	1dfb      	adds	r3, r7, #7
200003b2:	781b      	ldrb	r3, [r3, #0]
200003b4:	0011      	movs	r1, r2
200003b6:	0018      	movs	r0, r3
200003b8:	f7ff ffb7 	bl	2000032a <graphic_write>
}
200003bc:	46c0      	nop			; (mov r8, r8)
200003be:	46bd      	mov	sp, r7
200003c0:	b002      	add	sp, #8
200003c2:	bd80      	pop	{r7, pc}

200003c4 <graphic_write_data>:

void graphic_write_data(uint8_c data, uint8_c controller)
{
200003c4:	b580      	push	{r7, lr}
200003c6:	b082      	sub	sp, #8
200003c8:	af00      	add	r7, sp, #0
200003ca:	0002      	movs	r2, r0
200003cc:	1dfb      	adds	r3, r7, #7
200003ce:	701a      	strb	r2, [r3, #0]
200003d0:	1dbb      	adds	r3, r7, #6
200003d2:	1c0a      	adds	r2, r1, #0
200003d4:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200003d6:	2040      	movs	r0, #64	; 0x40
200003d8:	f7ff fef6 	bl	200001c8 <graphic_ctrl_bit_clear>

	select_controller(controller);
200003dc:	1dbb      	adds	r3, r7, #6
200003de:	781b      	ldrb	r3, [r3, #0]
200003e0:	0018      	movs	r0, r3
200003e2:	f7ff ff13 	bl	2000020c <select_controller>

	graphic_ctrl_bit_set(B_RS);
200003e6:	2001      	movs	r0, #1
200003e8:	f7ff fed0 	bl	2000018c <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
200003ec:	2002      	movs	r0, #2
200003ee:	f7ff feeb 	bl	200001c8 <graphic_ctrl_bit_clear>

	graphic_write(data, controller);
200003f2:	1dbb      	adds	r3, r7, #6
200003f4:	781a      	ldrb	r2, [r3, #0]
200003f6:	1dfb      	adds	r3, r7, #7
200003f8:	781b      	ldrb	r3, [r3, #0]
200003fa:	0011      	movs	r1, r2
200003fc:	0018      	movs	r0, r3
200003fe:	f7ff ff94 	bl	2000032a <graphic_write>
}
20000402:	46c0      	nop			; (mov r8, r8)
20000404:	46bd      	mov	sp, r7
20000406:	b002      	add	sp, #8
20000408:	bd80      	pop	{r7, pc}

2000040a <graphic_initialize>:

void graphic_initialize(void)
{
2000040a:	b580      	push	{r7, lr}
2000040c:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
2000040e:	2040      	movs	r0, #64	; 0x40
20000410:	f7ff febc 	bl	2000018c <graphic_ctrl_bit_set>
	delay_micro(10);
20000414:	200a      	movs	r0, #10
20000416:	f7ff fe84 	bl	20000122 <delay_micro>

	graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
2000041a:	2078      	movs	r0, #120	; 0x78
2000041c:	f7ff fed4 	bl	200001c8 <graphic_ctrl_bit_clear>
	delay_milli(30);
20000420:	201e      	movs	r0, #30
20000422:	f7ff fe98 	bl	20000156 <delay_milli>

	graphic_ctrl_bit_set(B_RST);
20000426:	2020      	movs	r0, #32
20000428:	f7ff feb0 	bl	2000018c <graphic_ctrl_bit_set>

	graphic_write_command(LCD_OFF, B_CS1 | B_CS2);
2000042c:	2118      	movs	r1, #24
2000042e:	203e      	movs	r0, #62	; 0x3e
20000430:	f7ff ffa8 	bl	20000384 <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1 | B_CS2);		  // Toggle display
20000434:	2118      	movs	r1, #24
20000436:	203f      	movs	r0, #63	; 0x3f
20000438:	f7ff ffa4 	bl	20000384 <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1 | B_CS2); // start = 0
2000043c:	2118      	movs	r1, #24
2000043e:	20c0      	movs	r0, #192	; 0xc0
20000440:	f7ff ffa0 	bl	20000384 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);	// add = 0
20000444:	2118      	movs	r1, #24
20000446:	2040      	movs	r0, #64	; 0x40
20000448:	f7ff ff9c 	bl	20000384 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1 | B_CS2);   // page = 0
2000044c:	2118      	movs	r1, #24
2000044e:	20b8      	movs	r0, #184	; 0xb8
20000450:	f7ff ff98 	bl	20000384 <graphic_write_command>
	select_controller(0);								  // deactivate both CS signals
20000454:	2000      	movs	r0, #0
20000456:	f7ff fed9 	bl	2000020c <select_controller>
}
2000045a:	46c0      	nop			; (mov r8, r8)
2000045c:	46bd      	mov	sp, r7
2000045e:	bd80      	pop	{r7, pc}

20000460 <graphic_clear_screen>:

void graphic_clear_screen()
{
20000460:	b580      	push	{r7, lr}
20000462:	b082      	sub	sp, #8
20000464:	af00      	add	r7, sp, #0

	for (uint8 i = 0; i < 8; i++)
20000466:	1dfb      	adds	r3, r7, #7
20000468:	2200      	movs	r2, #0
2000046a:	701a      	strb	r2, [r3, #0]
2000046c:	e023      	b.n	200004b6 <graphic_clear_screen+0x56>
	{
		graphic_write_command(LCD_SET_PAGE | i, B_CS1 | B_CS2);
2000046e:	1dfb      	adds	r3, r7, #7
20000470:	781b      	ldrb	r3, [r3, #0]
20000472:	2248      	movs	r2, #72	; 0x48
20000474:	4252      	negs	r2, r2
20000476:	4313      	orrs	r3, r2
20000478:	b2db      	uxtb	r3, r3
2000047a:	2118      	movs	r1, #24
2000047c:	0018      	movs	r0, r3
2000047e:	f7ff ff81 	bl	20000384 <graphic_write_command>
		graphic_write_command(LCD_SET_ADD | 0, B_CS1 | B_CS2);
20000482:	2118      	movs	r1, #24
20000484:	2040      	movs	r0, #64	; 0x40
20000486:	f7ff ff7d 	bl	20000384 <graphic_write_command>
		for (uint8 j = 0; j < 64; j++)
2000048a:	1dbb      	adds	r3, r7, #6
2000048c:	2200      	movs	r2, #0
2000048e:	701a      	strb	r2, [r3, #0]
20000490:	e008      	b.n	200004a4 <graphic_clear_screen+0x44>
		{
			graphic_write_data(0, B_CS1 | B_CS2);
20000492:	2118      	movs	r1, #24
20000494:	2000      	movs	r0, #0
20000496:	f7ff ff95 	bl	200003c4 <graphic_write_data>
		for (uint8 j = 0; j < 64; j++)
2000049a:	1dbb      	adds	r3, r7, #6
2000049c:	781a      	ldrb	r2, [r3, #0]
2000049e:	1dbb      	adds	r3, r7, #6
200004a0:	3201      	adds	r2, #1
200004a2:	701a      	strb	r2, [r3, #0]
200004a4:	1dbb      	adds	r3, r7, #6
200004a6:	781b      	ldrb	r3, [r3, #0]
200004a8:	2b3f      	cmp	r3, #63	; 0x3f
200004aa:	d9f2      	bls.n	20000492 <graphic_clear_screen+0x32>
	for (uint8 i = 0; i < 8; i++)
200004ac:	1dfb      	adds	r3, r7, #7
200004ae:	781a      	ldrb	r2, [r3, #0]
200004b0:	1dfb      	adds	r3, r7, #7
200004b2:	3201      	adds	r2, #1
200004b4:	701a      	strb	r2, [r3, #0]
200004b6:	1dfb      	adds	r3, r7, #7
200004b8:	781b      	ldrb	r3, [r3, #0]
200004ba:	2b07      	cmp	r3, #7
200004bc:	d9d7      	bls.n	2000046e <graphic_clear_screen+0xe>
		}
	}
}
200004be:	46c0      	nop			; (mov r8, r8)
200004c0:	46bd      	mov	sp, r7
200004c2:	b002      	add	sp, #8
200004c4:	bd80      	pop	{r7, pc}

200004c6 <pixel>:

void pixel(uint8_c x, uint8_c y, uint8_c set)
{
200004c6:	b590      	push	{r4, r7, lr}
200004c8:	b085      	sub	sp, #20
200004ca:	af00      	add	r7, sp, #0
200004cc:	0004      	movs	r4, r0
200004ce:	0008      	movs	r0, r1
200004d0:	0011      	movs	r1, r2
200004d2:	1dfb      	adds	r3, r7, #7
200004d4:	1c22      	adds	r2, r4, #0
200004d6:	701a      	strb	r2, [r3, #0]
200004d8:	1dbb      	adds	r3, r7, #6
200004da:	1c02      	adds	r2, r0, #0
200004dc:	701a      	strb	r2, [r3, #0]
200004de:	1d7b      	adds	r3, r7, #5
200004e0:	1c0a      	adds	r2, r1, #0
200004e2:	701a      	strb	r2, [r3, #0]
	if (x > 128 || x < 1)
200004e4:	1dfb      	adds	r3, r7, #7
200004e6:	781b      	ldrb	r3, [r3, #0]
200004e8:	2b80      	cmp	r3, #128	; 0x80
200004ea:	d900      	bls.n	200004ee <pixel+0x28>
200004ec:	e0a5      	b.n	2000063a <pixel+0x174>
200004ee:	1dfb      	adds	r3, r7, #7
200004f0:	781b      	ldrb	r3, [r3, #0]
200004f2:	2b00      	cmp	r3, #0
200004f4:	d100      	bne.n	200004f8 <pixel+0x32>
200004f6:	e0a0      	b.n	2000063a <pixel+0x174>
		return;

	if (y > 64 || y < 1)
200004f8:	1dbb      	adds	r3, r7, #6
200004fa:	781b      	ldrb	r3, [r3, #0]
200004fc:	2b40      	cmp	r3, #64	; 0x40
200004fe:	d900      	bls.n	20000502 <pixel+0x3c>
20000500:	e09d      	b.n	2000063e <pixel+0x178>
20000502:	1dbb      	adds	r3, r7, #6
20000504:	781b      	ldrb	r3, [r3, #0]
20000506:	2b00      	cmp	r3, #0
20000508:	d100      	bne.n	2000050c <pixel+0x46>
2000050a:	e098      	b.n	2000063e <pixel+0x178>
		return;

	uint8_c row = (y - 1) / 8;
2000050c:	1dbb      	adds	r3, r7, #6
2000050e:	781b      	ldrb	r3, [r3, #0]
20000510:	3b01      	subs	r3, #1
20000512:	2b00      	cmp	r3, #0
20000514:	da00      	bge.n	20000518 <pixel+0x52>
20000516:	3307      	adds	r3, #7
20000518:	10db      	asrs	r3, r3, #3
2000051a:	001a      	movs	r2, r3
2000051c:	230c      	movs	r3, #12
2000051e:	18fb      	adds	r3, r7, r3
20000520:	701a      	strb	r2, [r3, #0]
	uint8 mask = 1 << ((y - 1) % 8);
20000522:	1dbb      	adds	r3, r7, #6
20000524:	781b      	ldrb	r3, [r3, #0]
20000526:	3b01      	subs	r3, #1
20000528:	4a47      	ldr	r2, [pc, #284]	; (20000648 <pixel+0x182>)
2000052a:	4013      	ands	r3, r2
2000052c:	d504      	bpl.n	20000538 <pixel+0x72>
2000052e:	3b01      	subs	r3, #1
20000530:	2208      	movs	r2, #8
20000532:	4252      	negs	r2, r2
20000534:	4313      	orrs	r3, r2
20000536:	3301      	adds	r3, #1
20000538:	001a      	movs	r2, r3
2000053a:	2301      	movs	r3, #1
2000053c:	4093      	lsls	r3, r2
2000053e:	001a      	movs	r2, r3
20000540:	230f      	movs	r3, #15
20000542:	18fb      	adds	r3, r7, r3
20000544:	701a      	strb	r2, [r3, #0]

	if (set == 0)
20000546:	1d7b      	adds	r3, r7, #5
20000548:	781b      	ldrb	r3, [r3, #0]
2000054a:	2b00      	cmp	r3, #0
2000054c:	d106      	bne.n	2000055c <pixel+0x96>
	{
		mask = ~mask;
2000054e:	230f      	movs	r3, #15
20000550:	18fb      	adds	r3, r7, r3
20000552:	220f      	movs	r2, #15
20000554:	18ba      	adds	r2, r7, r2
20000556:	7812      	ldrb	r2, [r2, #0]
20000558:	43d2      	mvns	r2, r2
2000055a:	701a      	strb	r2, [r3, #0]
	}

	uint8 controller;
	uint8 column;
	if (x > 64)
2000055c:	1dfb      	adds	r3, r7, #7
2000055e:	781b      	ldrb	r3, [r3, #0]
20000560:	2b40      	cmp	r3, #64	; 0x40
20000562:	d90a      	bls.n	2000057a <pixel+0xb4>
	{
		controller = B_CS2;
20000564:	230e      	movs	r3, #14
20000566:	18fb      	adds	r3, r7, r3
20000568:	2210      	movs	r2, #16
2000056a:	701a      	strb	r2, [r3, #0]
		column = x - 65;
2000056c:	230d      	movs	r3, #13
2000056e:	18fb      	adds	r3, r7, r3
20000570:	1dfa      	adds	r2, r7, #7
20000572:	7812      	ldrb	r2, [r2, #0]
20000574:	3a41      	subs	r2, #65	; 0x41
20000576:	701a      	strb	r2, [r3, #0]
20000578:	e009      	b.n	2000058e <pixel+0xc8>
	}
	else
	{
		controller = B_CS1;
2000057a:	230e      	movs	r3, #14
2000057c:	18fb      	adds	r3, r7, r3
2000057e:	2208      	movs	r2, #8
20000580:	701a      	strb	r2, [r3, #0]
		column = x - 1;
20000582:	230d      	movs	r3, #13
20000584:	18fb      	adds	r3, r7, r3
20000586:	1dfa      	adds	r2, r7, #7
20000588:	7812      	ldrb	r2, [r2, #0]
2000058a:	3a01      	subs	r2, #1
2000058c:	701a      	strb	r2, [r3, #0]
	}

	graphic_write_command(LCD_SET_ADD | column, controller);
2000058e:	230d      	movs	r3, #13
20000590:	18fb      	adds	r3, r7, r3
20000592:	781b      	ldrb	r3, [r3, #0]
20000594:	2240      	movs	r2, #64	; 0x40
20000596:	4313      	orrs	r3, r2
20000598:	b2da      	uxtb	r2, r3
2000059a:	230e      	movs	r3, #14
2000059c:	18fb      	adds	r3, r7, r3
2000059e:	781b      	ldrb	r3, [r3, #0]
200005a0:	0019      	movs	r1, r3
200005a2:	0010      	movs	r0, r2
200005a4:	f7ff feee 	bl	20000384 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | row, controller);
200005a8:	230c      	movs	r3, #12
200005aa:	18fb      	adds	r3, r7, r3
200005ac:	781b      	ldrb	r3, [r3, #0]
200005ae:	2248      	movs	r2, #72	; 0x48
200005b0:	4252      	negs	r2, r2
200005b2:	4313      	orrs	r3, r2
200005b4:	b2da      	uxtb	r2, r3
200005b6:	230e      	movs	r3, #14
200005b8:	18fb      	adds	r3, r7, r3
200005ba:	781b      	ldrb	r3, [r3, #0]
200005bc:	0019      	movs	r1, r3
200005be:	0010      	movs	r0, r2
200005c0:	f7ff fee0 	bl	20000384 <graphic_write_command>

	uint8_c temp = graphic_read_data(controller);
200005c4:	230b      	movs	r3, #11
200005c6:	18fc      	adds	r4, r7, r3
200005c8:	230e      	movs	r3, #14
200005ca:	18fb      	adds	r3, r7, r3
200005cc:	781b      	ldrb	r3, [r3, #0]
200005ce:	0018      	movs	r0, r3
200005d0:	f7ff fe96 	bl	20000300 <graphic_read_data>
200005d4:	0003      	movs	r3, r0
200005d6:	7023      	strb	r3, [r4, #0]

	graphic_write_command(LCD_SET_ADD | column, controller);
200005d8:	230d      	movs	r3, #13
200005da:	18fb      	adds	r3, r7, r3
200005dc:	781b      	ldrb	r3, [r3, #0]
200005de:	2240      	movs	r2, #64	; 0x40
200005e0:	4313      	orrs	r3, r2
200005e2:	b2da      	uxtb	r2, r3
200005e4:	230e      	movs	r3, #14
200005e6:	18fb      	adds	r3, r7, r3
200005e8:	781b      	ldrb	r3, [r3, #0]
200005ea:	0019      	movs	r1, r3
200005ec:	0010      	movs	r0, r2
200005ee:	f7ff fec9 	bl	20000384 <graphic_write_command>

	if (set)
200005f2:	1d7b      	adds	r3, r7, #5
200005f4:	781b      	ldrb	r3, [r3, #0]
200005f6:	2b00      	cmp	r3, #0
200005f8:	d00a      	beq.n	20000610 <pixel+0x14a>
		mask = mask | temp;
200005fa:	230f      	movs	r3, #15
200005fc:	18fb      	adds	r3, r7, r3
200005fe:	220f      	movs	r2, #15
20000600:	18b9      	adds	r1, r7, r2
20000602:	220b      	movs	r2, #11
20000604:	18ba      	adds	r2, r7, r2
20000606:	7809      	ldrb	r1, [r1, #0]
20000608:	7812      	ldrb	r2, [r2, #0]
2000060a:	430a      	orrs	r2, r1
2000060c:	701a      	strb	r2, [r3, #0]
2000060e:	e009      	b.n	20000624 <pixel+0x15e>
	else
		mask = mask & temp;
20000610:	230f      	movs	r3, #15
20000612:	18fb      	adds	r3, r7, r3
20000614:	220f      	movs	r2, #15
20000616:	18ba      	adds	r2, r7, r2
20000618:	210b      	movs	r1, #11
2000061a:	1879      	adds	r1, r7, r1
2000061c:	7812      	ldrb	r2, [r2, #0]
2000061e:	7809      	ldrb	r1, [r1, #0]
20000620:	400a      	ands	r2, r1
20000622:	701a      	strb	r2, [r3, #0]
	graphic_write_data(mask, controller);
20000624:	230e      	movs	r3, #14
20000626:	18fb      	adds	r3, r7, r3
20000628:	781a      	ldrb	r2, [r3, #0]
2000062a:	230f      	movs	r3, #15
2000062c:	18fb      	adds	r3, r7, r3
2000062e:	781b      	ldrb	r3, [r3, #0]
20000630:	0011      	movs	r1, r2
20000632:	0018      	movs	r0, r3
20000634:	f7ff fec6 	bl	200003c4 <graphic_write_data>
20000638:	e002      	b.n	20000640 <pixel+0x17a>
		return;
2000063a:	46c0      	nop			; (mov r8, r8)
2000063c:	e000      	b.n	20000640 <pixel+0x17a>
		return;
2000063e:	46c0      	nop			; (mov r8, r8)
}
20000640:	46bd      	mov	sp, r7
20000642:	b005      	add	sp, #20
20000644:	bd90      	pop	{r4, r7, pc}
20000646:	46c0      	nop			; (mov r8, r8)
20000648:	80000007 	andhi	r0, r0, r7

2000064c <__udivsi3>:
2000064c:	2200      	movs	r2, #0
2000064e:	0843      	lsrs	r3, r0, #1
20000650:	428b      	cmp	r3, r1
20000652:	d374      	bcc.n	2000073e <__udivsi3+0xf2>
20000654:	0903      	lsrs	r3, r0, #4
20000656:	428b      	cmp	r3, r1
20000658:	d35f      	bcc.n	2000071a <__udivsi3+0xce>
2000065a:	0a03      	lsrs	r3, r0, #8
2000065c:	428b      	cmp	r3, r1
2000065e:	d344      	bcc.n	200006ea <__udivsi3+0x9e>
20000660:	0b03      	lsrs	r3, r0, #12
20000662:	428b      	cmp	r3, r1
20000664:	d328      	bcc.n	200006b8 <__udivsi3+0x6c>
20000666:	0c03      	lsrs	r3, r0, #16
20000668:	428b      	cmp	r3, r1
2000066a:	d30d      	bcc.n	20000688 <__udivsi3+0x3c>
2000066c:	22ff      	movs	r2, #255	; 0xff
2000066e:	0209      	lsls	r1, r1, #8
20000670:	ba12      	rev	r2, r2
20000672:	0c03      	lsrs	r3, r0, #16
20000674:	428b      	cmp	r3, r1
20000676:	d302      	bcc.n	2000067e <__udivsi3+0x32>
20000678:	1212      	asrs	r2, r2, #8
2000067a:	0209      	lsls	r1, r1, #8
2000067c:	d065      	beq.n	2000074a <__udivsi3+0xfe>
2000067e:	0b03      	lsrs	r3, r0, #12
20000680:	428b      	cmp	r3, r1
20000682:	d319      	bcc.n	200006b8 <__udivsi3+0x6c>
20000684:	e000      	b.n	20000688 <__udivsi3+0x3c>
20000686:	0a09      	lsrs	r1, r1, #8
20000688:	0bc3      	lsrs	r3, r0, #15
2000068a:	428b      	cmp	r3, r1
2000068c:	d301      	bcc.n	20000692 <__udivsi3+0x46>
2000068e:	03cb      	lsls	r3, r1, #15
20000690:	1ac0      	subs	r0, r0, r3
20000692:	4152      	adcs	r2, r2
20000694:	0b83      	lsrs	r3, r0, #14
20000696:	428b      	cmp	r3, r1
20000698:	d301      	bcc.n	2000069e <__udivsi3+0x52>
2000069a:	038b      	lsls	r3, r1, #14
2000069c:	1ac0      	subs	r0, r0, r3
2000069e:	4152      	adcs	r2, r2
200006a0:	0b43      	lsrs	r3, r0, #13
200006a2:	428b      	cmp	r3, r1
200006a4:	d301      	bcc.n	200006aa <__udivsi3+0x5e>
200006a6:	034b      	lsls	r3, r1, #13
200006a8:	1ac0      	subs	r0, r0, r3
200006aa:	4152      	adcs	r2, r2
200006ac:	0b03      	lsrs	r3, r0, #12
200006ae:	428b      	cmp	r3, r1
200006b0:	d301      	bcc.n	200006b6 <__udivsi3+0x6a>
200006b2:	030b      	lsls	r3, r1, #12
200006b4:	1ac0      	subs	r0, r0, r3
200006b6:	4152      	adcs	r2, r2
200006b8:	0ac3      	lsrs	r3, r0, #11
200006ba:	428b      	cmp	r3, r1
200006bc:	d301      	bcc.n	200006c2 <__udivsi3+0x76>
200006be:	02cb      	lsls	r3, r1, #11
200006c0:	1ac0      	subs	r0, r0, r3
200006c2:	4152      	adcs	r2, r2
200006c4:	0a83      	lsrs	r3, r0, #10
200006c6:	428b      	cmp	r3, r1
200006c8:	d301      	bcc.n	200006ce <__udivsi3+0x82>
200006ca:	028b      	lsls	r3, r1, #10
200006cc:	1ac0      	subs	r0, r0, r3
200006ce:	4152      	adcs	r2, r2
200006d0:	0a43      	lsrs	r3, r0, #9
200006d2:	428b      	cmp	r3, r1
200006d4:	d301      	bcc.n	200006da <__udivsi3+0x8e>
200006d6:	024b      	lsls	r3, r1, #9
200006d8:	1ac0      	subs	r0, r0, r3
200006da:	4152      	adcs	r2, r2
200006dc:	0a03      	lsrs	r3, r0, #8
200006de:	428b      	cmp	r3, r1
200006e0:	d301      	bcc.n	200006e6 <__udivsi3+0x9a>
200006e2:	020b      	lsls	r3, r1, #8
200006e4:	1ac0      	subs	r0, r0, r3
200006e6:	4152      	adcs	r2, r2
200006e8:	d2cd      	bcs.n	20000686 <__udivsi3+0x3a>
200006ea:	09c3      	lsrs	r3, r0, #7
200006ec:	428b      	cmp	r3, r1
200006ee:	d301      	bcc.n	200006f4 <__udivsi3+0xa8>
200006f0:	01cb      	lsls	r3, r1, #7
200006f2:	1ac0      	subs	r0, r0, r3
200006f4:	4152      	adcs	r2, r2
200006f6:	0983      	lsrs	r3, r0, #6
200006f8:	428b      	cmp	r3, r1
200006fa:	d301      	bcc.n	20000700 <__udivsi3+0xb4>
200006fc:	018b      	lsls	r3, r1, #6
200006fe:	1ac0      	subs	r0, r0, r3
20000700:	4152      	adcs	r2, r2
20000702:	0943      	lsrs	r3, r0, #5
20000704:	428b      	cmp	r3, r1
20000706:	d301      	bcc.n	2000070c <__udivsi3+0xc0>
20000708:	014b      	lsls	r3, r1, #5
2000070a:	1ac0      	subs	r0, r0, r3
2000070c:	4152      	adcs	r2, r2
2000070e:	0903      	lsrs	r3, r0, #4
20000710:	428b      	cmp	r3, r1
20000712:	d301      	bcc.n	20000718 <__udivsi3+0xcc>
20000714:	010b      	lsls	r3, r1, #4
20000716:	1ac0      	subs	r0, r0, r3
20000718:	4152      	adcs	r2, r2
2000071a:	08c3      	lsrs	r3, r0, #3
2000071c:	428b      	cmp	r3, r1
2000071e:	d301      	bcc.n	20000724 <__udivsi3+0xd8>
20000720:	00cb      	lsls	r3, r1, #3
20000722:	1ac0      	subs	r0, r0, r3
20000724:	4152      	adcs	r2, r2
20000726:	0883      	lsrs	r3, r0, #2
20000728:	428b      	cmp	r3, r1
2000072a:	d301      	bcc.n	20000730 <__udivsi3+0xe4>
2000072c:	008b      	lsls	r3, r1, #2
2000072e:	1ac0      	subs	r0, r0, r3
20000730:	4152      	adcs	r2, r2
20000732:	0843      	lsrs	r3, r0, #1
20000734:	428b      	cmp	r3, r1
20000736:	d301      	bcc.n	2000073c <__udivsi3+0xf0>
20000738:	004b      	lsls	r3, r1, #1
2000073a:	1ac0      	subs	r0, r0, r3
2000073c:	4152      	adcs	r2, r2
2000073e:	1a41      	subs	r1, r0, r1
20000740:	d200      	bcs.n	20000744 <__udivsi3+0xf8>
20000742:	4601      	mov	r1, r0
20000744:	4152      	adcs	r2, r2
20000746:	4610      	mov	r0, r2
20000748:	4770      	bx	lr
2000074a:	e7ff      	b.n	2000074c <__udivsi3+0x100>
2000074c:	b501      	push	{r0, lr}
2000074e:	2000      	movs	r0, #0
20000750:	f000 f806 	bl	20000760 <__aeabi_idiv0>
20000754:	bd02      	pop	{r1, pc}
20000756:	46c0      	nop			; (mov r8, r8)

20000758 <__aeabi_uidivmod>:
20000758:	2900      	cmp	r1, #0
2000075a:	d0f7      	beq.n	2000074c <__udivsi3+0x100>
2000075c:	e776      	b.n	2000064c <__udivsi3>
2000075e:	4770      	bx	lr

20000760 <__aeabi_idiv0>:
20000760:	4770      	bx	lr
20000762:	46c0      	nop			; (mov r8, r8)

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000220 	andeq	r0, r0, r0, lsr #4
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	0000003d 	andeq	r0, r0, sp, lsr r0
  10:	0001080c 	andeq	r0, r1, ip, lsl #16
	...
  20:	01840200 	orreq	r0, r4, r0, lsl #4
  24:	07020000 	streq	r0, [r2, -r0]
  28:	0000002c 	andeq	r0, r0, ip, lsr #32
  2c:	fb070403 	blx	1c1042 <startup-0x1fe3efbe>
  30:	02000000 	andeq	r0, r0, #0
  34:	0000017d 	andeq	r0, r0, sp, ror r1
  38:	003e0802 	eorseq	r0, lr, r2, lsl #16
  3c:	02030000 	andeq	r0, r3, #0
  40:	0000f507 	andeq	pc, r0, r7, lsl #10
  44:	003e0400 	eorseq	r0, lr, r0, lsl #8
  48:	eb020000 	bl	80050 <startup-0x1ff7ffb0>
  4c:	02000001 	andeq	r0, r0, #1
  50:	00005509 	andeq	r5, r0, r9, lsl #10
  54:	08010300 	stmdaeq	r1, {r8, r9}
  58:	000000d5 	ldrdeq	r0, [r0], -r5
  5c:	00005504 	andeq	r5, r0, r4, lsl #10
  60:	05040500 	streq	r0, [r4, #-1280]	; 0xfffffb00
  64:	00746e69 	rsbseq	r6, r4, r9, ror #28
  68:	e1050203 	tst	r5, r3, lsl #4
  6c:	03000001 	movweq	r0, #1
  70:	00d70601 	sbcseq	r0, r7, r1, lsl #12
  74:	bf020000 	svclt	0x00020000
  78:	02000001 	andeq	r0, r0, #1
  7c:	00004510 	andeq	r4, r0, r0, lsl r5
  80:	01680200 	cmneq	r8, r0, lsl #4
  84:	11020000 	mrsne	r0, (UNDEF: 2)
  88:	0000005c 	andeq	r0, r0, ip, asr r0
  8c:	0f030206 	svceq	0x00030206
  90:	000000ad 	andeq	r0, r0, sp, lsr #1
  94:	00001007 	andeq	r1, r0, r7
  98:	4a100300 	bmi	400ca0 <startup-0x1fbff360>
  9c:	00000000 	andeq	r0, r0, r0
  a0:	00001807 	andeq	r1, r0, r7, lsl #16
  a4:	4a110300 	bmi	440cac <startup-0x1fbbf354>
  a8:	01000000 	mrseq	r0, (UNDEF: 0)
  ac:	03020800 	movweq	r0, #10240	; 0x2800
  b0:	0000c60e 	andeq	ip, r0, lr, lsl #12
  b4:	44490900 	strbmi	r0, [r9], #-2304	; 0xfffff700
  b8:	0e030052 	mcreq	0, 0, r0, cr3, cr2, {2}
  bc:	00000033 	andeq	r0, r0, r3, lsr r0
  c0:	00008c0a 	andeq	r8, r0, sl, lsl #24
  c4:	02060000 	andeq	r0, r6, #0
  c8:	00e71703 	rsceq	r1, r7, r3, lsl #14
  cc:	ae070000 	cdpge	0, 0, cr0, cr7, cr0, {0}
  d0:	03000001 	movweq	r0, #1
  d4:	00004a18 	andeq	r4, r0, r8, lsl sl
  d8:	ec070000 	stc	0, cr0, [r7], {-0}
  dc:	03000000 	movweq	r0, #0
  e0:	00004a19 	andeq	r4, r0, r9, lsl sl
  e4:	08000100 	stmdaeq	r0, {r8}
  e8:	00160302 	andseq	r0, r6, r2, lsl #6
  ec:	09000001 	stmdbeq	r0, {r0}
  f0:	0052444f 	subseq	r4, r2, pc, asr #8
  f4:	00331603 	eorseq	r1, r3, r3, lsl #12
  f8:	c60a0000 	strgt	r0, [sl], -r0
  fc:	00000000 	andeq	r0, r0, r0
 100:	08032806 	stmdaeq	r3, {r1, r2, fp, sp}
 104:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
 108:	00003007 	andeq	r3, r0, r7
 10c:	21090300 	mrscs	r0, (UNDEF: 57)
 110:	00000000 	andeq	r0, r0, r0
 114:	00003607 	andeq	r3, r0, r7, lsl #12
 118:	330a0300 	movwcc	r0, #41728	; 0xa300
 11c:	04000000 	streq	r0, [r0], #-0
 120:	0001ce07 	andeq	ip, r1, r7, lsl #28
 124:	760b0300 	strvc	r0, [fp], -r0, lsl #6
 128:	06000000 	streq	r0, [r0], -r0
 12c:	00000807 	andeq	r0, r0, r7, lsl #16
 130:	210c0300 	mrscs	r0, LR_mon
 134:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 138:	0001c807 	andeq	ip, r1, r7, lsl #16
 13c:	210d0300 	mrscs	r0, SP_mon
 140:	0c000000 	stceq	0, cr0, [r0], {-0}
 144:	0000ad0b 	andeq	sl, r0, fp, lsl #26
 148:	75071000 	strvc	r1, [r7, #-0]
 14c:	03000001 	movweq	r0, #1
 150:	00007614 	andeq	r7, r0, r4, lsl r6
 154:	e70b1200 	str	r1, [fp, -r0, lsl #4]
 158:	14000000 	strne	r0, [r0], #-0
 15c:	00019407 	andeq	r9, r1, r7, lsl #8
 160:	761c0300 	ldrvc	r0, [ip], -r0, lsl #6
 164:	16000000 	strne	r0, [r0], -r0
 168:	00002107 	andeq	r2, r0, r7, lsl #2
 16c:	211d0300 	tstcs	sp, r0, lsl #6
 170:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
 174:	0001a007 	andeq	sl, r1, r7
 178:	331e0300 	tstcc	lr, #0, 6
 17c:	1c000000 	stcne	0, cr0, [r0], {-0}
 180:	0000e307 	andeq	lr, r0, r7, lsl #6
 184:	4a1f0300 	bmi	7c0d8c <startup-0x1f83f274>
 188:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
 18c:	00019c07 	andeq	r9, r1, r7, lsl #24
 190:	81200300 			; <UNDEFINED> instruction: 0x81200300
 194:	1f000000 	svcne	0x00000000
 198:	00002607 	andeq	r2, r0, r7, lsl #12
 19c:	21210300 			; <UNDEFINED> instruction: 0x21210300
 1a0:	20000000 	andcs	r0, r0, r0
 1a4:	00002b07 	andeq	r2, r0, r7, lsl #22
 1a8:	21220300 			; <UNDEFINED> instruction: 0x21220300
 1ac:	24000000 	strcs	r0, [r0], #-0
 1b0:	01b60200 			; <UNDEFINED> instruction: 0x01b60200
 1b4:	23030000 	movwcs	r0, #12288	; 0x3000
 1b8:	00000100 	andeq	r0, r0, r0, lsl #2
 1bc:	0001b10c 	andeq	fp, r1, ip, lsl #2
 1c0:	01a60200 			; <UNDEFINED> instruction: 0x01a60200
 1c4:	25030000 	strcs	r0, [r3, #-0]
 1c8:	000001cc 	andeq	r0, r0, ip, asr #3
 1cc:	01bc040d 			; <UNDEFINED> instruction: 0x01bc040d
 1d0:	700e0000 	andvc	r0, lr, r0
 1d4:	01000001 	tsteq	r0, r1
 1d8:	0000281e 	andeq	r2, r0, lr, lsl r8
 1dc:	0000a020 	andeq	sl, r0, r0, lsr #32
 1e0:	019c0100 	orrseq	r0, ip, r0, lsl #2
 1e4:	0f000002 	svceq	0x00000002
 1e8:	20010069 	andcs	r0, r1, r9, rrx
 1ec:	00000021 	andeq	r0, r0, r1, lsr #32
 1f0:	10749102 	rsbsne	r9, r4, r2, lsl #2
 1f4:	000001d5 	ldrdeq	r0, [r0], -r5
 1f8:	00613101 	rsbeq	r3, r1, r1, lsl #2
 1fc:	00110000 	andseq	r0, r1, r0
 200:	018b1200 	orreq	r1, fp, r0, lsl #4
 204:	14010000 	strne	r0, [r1], #-0
 208:	20000010 	andcs	r0, r0, r0, lsl r0
 20c:	00000018 	andeq	r0, r0, r8, lsl r0
 210:	00129c01 	andseq	r9, r2, r1, lsl #24
 214:	01000000 	mrseq	r0, (UNDEF: 0)
 218:	0000000a 	andeq	r0, r0, sl
 21c:	00000c20 	andeq	r0, r0, r0, lsr #24
 220:	009c0100 	addseq	r0, ip, r0, lsl #2
 224:	0000017d 	andeq	r0, r0, sp, ror r1
 228:	00e90004 	rsceq	r0, r9, r4
 22c:	01040000 	mrseq	r0, (UNDEF: 4)
 230:	0000003d 	andeq	r0, r0, sp, lsr r0
 234:	0001fc0c 	andeq	pc, r1, ip, lsl #24
 238:	0000c800 	andeq	ip, r0, r0, lsl #16
 23c:	0000c220 	andeq	ip, r0, r0, lsr #4
 240:	00013f00 	andeq	r3, r1, r0, lsl #30
 244:	01840200 	orreq	r0, r4, r0, lsl #4
 248:	07020000 	streq	r0, [r2, -r0]
 24c:	0000002c 	andeq	r0, r0, ip, lsr #32
 250:	fb070403 	blx	1c1266 <startup-0x1fe3ed9a>
 254:	04000000 	streq	r0, [r0], #-0
 258:	0000002c 	andeq	r0, r0, ip, lsr #32
 25c:	f5070203 			; <UNDEFINED> instruction: 0xf5070203
 260:	02000000 	andeq	r0, r0, #0
 264:	000001eb 	andeq	r0, r0, fp, ror #3
 268:	004a0902 	subeq	r0, sl, r2, lsl #18
 26c:	01030000 	mrseq	r0, (UNDEF: 3)
 270:	0000d508 	andeq	sp, r0, r8, lsl #10
 274:	004a0400 	subeq	r0, sl, r0, lsl #8
 278:	04050000 	streq	r0, [r5], #-0
 27c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
 280:	05020300 	streq	r0, [r2, #-768]	; 0xfffffd00
 284:	000001e1 	andeq	r0, r0, r1, ror #3
 288:	d7060103 	strle	r0, [r6, -r3, lsl #2]
 28c:	02000000 	andeq	r0, r0, #0
 290:	00000282 	andeq	r0, r0, r2, lsl #5
 294:	00330f02 	eorseq	r0, r3, r2, lsl #30
 298:	68020000 	stmdavs	r2, {}	; <UNPREDICTABLE>
 29c:	02000001 	andeq	r0, r0, #1
 2a0:	00005111 	andeq	r5, r0, r1, lsl r1
 2a4:	030c0600 	movweq	r0, #50688	; 0xc600
 2a8:	0000d208 	andeq	sp, r0, r8, lsl #4
 2ac:	02960700 	addseq	r0, r6, #0, 14
 2b0:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
 2b4:	0000003f 	andeq	r0, r0, pc, lsr r0
 2b8:	02680700 	rsbeq	r0, r8, #0, 14
 2bc:	0a030000 	beq	c02c4 <startup-0x1ff3fd3c>
 2c0:	00000076 	andeq	r0, r0, r6, ror r0
 2c4:	01f10701 	mvnseq	r0, r1, lsl #14
 2c8:	0b030000 	bleq	c02d0 <startup-0x1ff3fd30>
 2cc:	0000003f 	andeq	r0, r0, pc, lsr r0
 2d0:	02720702 	rsbseq	r0, r2, #524288	; 0x80000
 2d4:	0c030000 	stceq	0, cr0, [r3], {-0}
 2d8:	00000076 	andeq	r0, r0, r6, ror r0
 2dc:	02630703 	rsbeq	r0, r3, #786432	; 0xc0000
 2e0:	0d030000 	stceq	0, cr0, [r3, #-0]
 2e4:	00000021 	andeq	r0, r0, r1, lsr #32
 2e8:	41560804 	cmpmi	r6, r4, lsl #16
 2ec:	0e03004c 	cdpeq	0, 0, cr0, cr3, cr12, {2}
 2f0:	00000021 	andeq	r0, r0, r1, lsr #32
 2f4:	9b020008 	blls	8031c <startup-0x1ff7fce4>
 2f8:	03000002 	movweq	r0, #2
 2fc:	0000810f 	andeq	r8, r0, pc, lsl #2
 300:	00d20900 	sbcseq	r0, r2, r0, lsl #18
 304:	8b020000 	blhi	8030c <startup-0x1ff7fcf4>
 308:	03000002 	movweq	r0, #2
 30c:	0000ed11 	andeq	lr, r0, r1, lsl sp
 310:	dd040a00 	vstrle	s0, [r4, #-0]
 314:	0b000000 	bleq	31c <startup-0x1ffffce4>
 318:	000001d5 	ldrdeq	r0, [r0], -r5
 31c:	01562701 	cmpeq	r6, r1, lsl #14
 320:	00342000 	eorseq	r2, r4, r0
 324:	9c010000 	stcls	0, cr0, [r1], {-0}
 328:	00000116 	andeq	r0, r0, r6, lsl r1
 32c:	00736d0c 	rsbseq	r6, r3, ip, lsl #26
 330:	00212701 	eoreq	r2, r1, r1, lsl #14
 334:	91020000 	mrsls	r0, (UNDEF: 2)
 338:	570b0074 	smlsdxpl	fp, r4, r0, r0
 33c:	01000002 	tsteq	r0, r2
 340:	0001221c 	andeq	r2, r1, ip, lsl r2
 344:	00003420 	andeq	r3, r0, r0, lsr #8
 348:	519c0100 	orrspl	r0, ip, r0, lsl #2
 34c:	0c000001 	stceq	0, cr0, [r0], {1}
 350:	01007375 	tsteq	r0, r5, ror r3
 354:	00006b1c 	andeq	r6, r0, ip, lsl fp
 358:	6c910200 	lfmvs	f0, 4, [r1], {0}
 35c:	00012a0d 	andeq	r2, r1, sp, lsl #20
 360:	00002420 	andeq	r2, r0, r0, lsr #8
 364:	027c0e00 	rsbseq	r0, ip, #0, 28
 368:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
 36c:	00000021 	andeq	r0, r0, r1, lsr #32
 370:	00749102 	rsbseq	r9, r4, r2, lsl #2
 374:	024b0f00 	subeq	r0, fp, #0, 30
 378:	16010000 	strne	r0, [r1], -r0
 37c:	20000110 	andcs	r0, r0, r0, lsl r1
 380:	00000012 	andeq	r0, r0, r2, lsl r0
 384:	3f109c01 	svccc	0x00109c01
 388:	01000002 	tsteq	r0, r2
 38c:	0000c805 	andeq	ip, r0, r5, lsl #16
 390:	00004820 	andeq	r4, r0, r0, lsr #16
 394:	119c0100 	orrsne	r0, ip, r0, lsl #2
 398:	07010078 	smlsdxeq	r1, r8, r0, r0
 39c:	00000021 	andeq	r0, r0, r1, lsr #32
 3a0:	00749102 	rsbseq	r9, r4, r2, lsl #2
 3a4:	00045f00 	andeq	r5, r4, r0, lsl #30
 3a8:	e0000400 	and	r0, r0, r0, lsl #8
 3ac:	04000001 	streq	r0, [r0], #-1
 3b0:	00003d01 	andeq	r3, r0, r1, lsl #26
 3b4:	02cd0c00 	sbceq	r0, sp, #0, 24
 3b8:	018c0000 	orreq	r0, ip, r0
 3bc:	04c02000 	strbeq	r2, [r0], #0
 3c0:	01fb0000 	mvnseq	r0, r0
 3c4:	84020000 	strhi	r0, [r2], #-0
 3c8:	02000001 	andeq	r0, r0, #1
 3cc:	00002c07 	andeq	r2, r0, r7, lsl #24
 3d0:	07040300 	streq	r0, [r4, -r0, lsl #6]
 3d4:	000000fb 	strdeq	r0, [r0], -fp
 3d8:	00017d02 	andeq	r7, r1, r2, lsl #26
 3dc:	3e080200 	cdpcc	2, 0, cr0, cr8, cr0, {0}
 3e0:	03000000 	movweq	r0, #0
 3e4:	00f50702 	rscseq	r0, r5, r2, lsl #14
 3e8:	3e040000 	cdpcc	0, 0, cr0, cr4, cr0, {0}
 3ec:	02000000 	andeq	r0, r0, #0
 3f0:	000001eb 	andeq	r0, r0, fp, ror #3
 3f4:	00550902 	subseq	r0, r5, r2, lsl #18
 3f8:	01030000 	mrseq	r0, (UNDEF: 3)
 3fc:	0000d508 	andeq	sp, r0, r8, lsl #10
 400:	00550400 	subseq	r0, r5, r0, lsl #8
 404:	04050000 	streq	r0, [r5], #-0
 408:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
 40c:	05020300 	streq	r0, [r2, #-768]	; 0xfffffd00
 410:	000001e1 	andeq	r0, r0, r1, ror #3
 414:	d7060103 	strle	r0, [r6, -r3, lsl #2]
 418:	02000000 	andeq	r0, r0, #0
 41c:	000001bf 			; <UNDEFINED> instruction: 0x000001bf
 420:	00451002 	subeq	r1, r5, r2
 424:	68020000 	stmdavs	r2, {}	; <UNPREDICTABLE>
 428:	02000001 	andeq	r0, r0, #1
 42c:	00005c11 	andeq	r5, r0, r1, lsl ip
 430:	03020600 	movweq	r0, #9728	; 0x2600
 434:	0000ad0f 	andeq	sl, r0, pc, lsl #26
 438:	00100700 	andseq	r0, r0, r0, lsl #14
 43c:	10030000 	andne	r0, r3, r0
 440:	0000004a 	andeq	r0, r0, sl, asr #32
 444:	00180700 	andseq	r0, r8, r0, lsl #14
 448:	11030000 	mrsne	r0, (UNDEF: 3)
 44c:	0000004a 	andeq	r0, r0, sl, asr #32
 450:	02080001 	andeq	r0, r8, #1
 454:	00c60e03 	sbceq	r0, r6, r3, lsl #28
 458:	49090000 	stmdbmi	r9, {}	; <UNPREDICTABLE>
 45c:	03005244 	movweq	r5, #580	; 0x244
 460:	0000330e 	andeq	r3, r0, lr, lsl #6
 464:	008c0a00 	addeq	r0, ip, r0, lsl #20
 468:	06000000 	streq	r0, [r0], -r0
 46c:	e7170302 	ldr	r0, [r7, -r2, lsl #6]
 470:	07000000 	streq	r0, [r0, -r0]
 474:	000001ae 	andeq	r0, r0, lr, lsr #3
 478:	004a1803 	subeq	r1, sl, r3, lsl #16
 47c:	07000000 	streq	r0, [r0, -r0]
 480:	000000ec 	andeq	r0, r0, ip, ror #1
 484:	004a1903 	subeq	r1, sl, r3, lsl #18
 488:	00010000 	andeq	r0, r1, r0
 48c:	16030208 	strne	r0, [r3], -r8, lsl #4
 490:	00000100 	andeq	r0, r0, r0, lsl #2
 494:	52444f09 	subpl	r4, r4, #9, 30	; 0x24
 498:	33160300 	tstcc	r6, #0, 6
 49c:	0a000000 	beq	4a4 <startup-0x1ffffb5c>
 4a0:	000000c6 	andeq	r0, r0, r6, asr #1
 4a4:	03280600 			; <UNDEFINED> instruction: 0x03280600
 4a8:	0001b108 	andeq	fp, r1, r8, lsl #2
 4ac:	00300700 	eorseq	r0, r0, r0, lsl #14
 4b0:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
 4b4:	00000021 	andeq	r0, r0, r1, lsr #32
 4b8:	00360700 	eorseq	r0, r6, r0, lsl #14
 4bc:	0a030000 	beq	c04c4 <startup-0x1ff3fb3c>
 4c0:	00000033 	andeq	r0, r0, r3, lsr r0
 4c4:	01ce0704 	biceq	r0, lr, r4, lsl #14
 4c8:	0b030000 	bleq	c04d0 <startup-0x1ff3fb30>
 4cc:	00000076 	andeq	r0, r0, r6, ror r0
 4d0:	00080706 	andeq	r0, r8, r6, lsl #14
 4d4:	0c030000 	stceq	0, cr0, [r3], {-0}
 4d8:	00000021 	andeq	r0, r0, r1, lsr #32
 4dc:	01c80708 	biceq	r0, r8, r8, lsl #14
 4e0:	0d030000 	stceq	0, cr0, [r3, #-0]
 4e4:	00000021 	andeq	r0, r0, r1, lsr #32
 4e8:	00ad0b0c 	adceq	r0, sp, ip, lsl #22
 4ec:	07100000 	ldreq	r0, [r0, -r0]
 4f0:	00000175 	andeq	r0, r0, r5, ror r1
 4f4:	00761403 	rsbseq	r1, r6, r3, lsl #8
 4f8:	0b120000 	bleq	480500 <startup-0x1fb7fb00>
 4fc:	000000e7 	andeq	r0, r0, r7, ror #1
 500:	01940714 	orrseq	r0, r4, r4, lsl r7
 504:	1c030000 	stcne	0, cr0, [r3], {-0}
 508:	00000076 	andeq	r0, r0, r6, ror r0
 50c:	00210716 	eoreq	r0, r1, r6, lsl r7
 510:	1d030000 	stcne	0, cr0, [r3, #-0]
 514:	00000021 	andeq	r0, r0, r1, lsr #32
 518:	01a00718 	lsleq	r0, r8, r7
 51c:	1e030000 	cdpne	0, 0, cr0, cr3, cr0, {0}
 520:	00000033 	andeq	r0, r0, r3, lsr r0
 524:	00e3071c 	rsceq	r0, r3, ip, lsl r7
 528:	1f030000 	svcne	0x00030000
 52c:	0000004a 	andeq	r0, r0, sl, asr #32
 530:	019c071e 	orrseq	r0, ip, lr, lsl r7
 534:	20030000 	andcs	r0, r3, r0
 538:	00000081 	andeq	r0, r0, r1, lsl #1
 53c:	0026071f 	eoreq	r0, r6, pc, lsl r7
 540:	21030000 	mrscs	r0, (UNDEF: 3)
 544:	00000021 	andeq	r0, r0, r1, lsr #32
 548:	002b0720 	eoreq	r0, fp, r0, lsr #14
 54c:	22030000 	andcs	r0, r3, #0
 550:	00000021 	andeq	r0, r0, r1, lsr #32
 554:	b6020024 	strlt	r0, [r2], -r4, lsr #32
 558:	03000001 	movweq	r0, #1
 55c:	00010023 	andeq	r0, r1, r3, lsr #32
 560:	01b10c00 			; <UNDEFINED> instruction: 0x01b10c00
 564:	a6020000 	strge	r0, [r2], -r0
 568:	03000001 	movweq	r0, #1
 56c:	0001cc25 	andeq	ip, r1, r5, lsr #24
 570:	bc040d00 	stclt	13, cr0, [r4], {-0}
 574:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
 578:	000002c0 	andeq	r0, r0, r0, asr #5
 57c:	04c69f01 	strbeq	r9, [r6], #3841	; 0xf01
 580:	01862000 	orreq	r2, r6, r0
 584:	9c010000 	stcls	0, cr0, [r1], {-0}
 588:	00000254 	andeq	r0, r0, r4, asr r2
 58c:	0100780f 	tsteq	r0, pc, lsl #16
 590:	0000819f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
 594:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
 598:	0100790f 	tsteq	r0, pc, lsl #18
 59c:	0000819f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
 5a0:	66910200 	ldrvs	r0, [r1], r0, lsl #4
 5a4:	7465730f 	strbtvc	r7, [r5], #-783	; 0xfffffcf1
 5a8:	819f0100 	orrshi	r0, pc, r0, lsl #2
 5ac:	02000000 	andeq	r0, r0, #0
 5b0:	72106591 	andsvc	r6, r0, #608174080	; 0x24400000
 5b4:	0100776f 	tsteq	r0, pc, ror #14
 5b8:	000081a7 	andeq	r8, r0, r7, lsr #3
 5bc:	6c910200 	lfmvs	f0, 4, [r1], {0}
 5c0:	00037811 	andeq	r7, r3, r1, lsl r8
 5c4:	4aa80100 	bmi	fea009cc <__aeabi_idiv0+0xdea0026c>
 5c8:	02000000 	andeq	r0, r0, #0
 5cc:	2e116f91 	mrccs	15, 0, r6, cr1, cr1, {4}
 5d0:	01000003 	tsteq	r0, r3
 5d4:	00004aaf 	andeq	r4, r0, pc, lsr #21
 5d8:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
 5dc:	0002c611 	andeq	ip, r2, r1, lsl r6
 5e0:	4ab00100 	bmi	fec009e8 <__aeabi_idiv0+0xdec00288>
 5e4:	02000000 	andeq	r0, r0, #0
 5e8:	a3116d91 	tstge	r1, #9280	; 0x2440
 5ec:	01000002 	tsteq	r0, r2
 5f0:	000081bf 			; <UNDEFINED> instruction: 0x000081bf
 5f4:	6b910200 	blvs	fe440dfc <__aeabi_idiv0+0xde44069c>
 5f8:	03a31200 			; <UNDEFINED> instruction: 0x03a31200
 5fc:	91010000 	mrsls	r0, (UNDEF: 1)
 600:	20000460 	andcs	r0, r0, r0, ror #8
 604:	00000066 	andeq	r0, r0, r6, rrx
 608:	02969c01 	addseq	r9, r6, #256	; 0x100
 60c:	66130000 	ldrvs	r0, [r3], -r0
 610:	58200004 	stmdapl	r0!, {r2}
 614:	10000000 	andne	r0, r0, r0
 618:	94010069 	strls	r0, [r1], #-105	; 0xffffff97
 61c:	0000004a 	andeq	r0, r0, sl, asr #32
 620:	13779102 	cmnne	r7, #-2147483648	; 0x80000000
 624:	2000048a 	andcs	r0, r0, sl, lsl #9
 628:	00000022 	andeq	r0, r0, r2, lsr #32
 62c:	01006a10 	tsteq	r0, r0, lsl sl
 630:	00004a98 	muleq	r0, r8, sl
 634:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 638:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
 63c:	00000350 	andeq	r0, r0, r0, asr r3
 640:	040a7f01 	streq	r7, [sl], #-3841	; 0xfffff0ff
 644:	00562000 	subseq	r2, r6, r0
 648:	9c010000 	stcls	0, cr0, [r1], {-0}
 64c:	000002ca 	andeq	r0, r0, sl, asr #5
 650:	00025714 	andeq	r5, r2, r4, lsl r7
 654:	61820100 	orrvs	r0, r2, r0, lsl #2
 658:	bc000000 	stclt	0, cr0, [r0], {-0}
 65c:	15000002 	strne	r0, [r0, #-2]
 660:	01d51600 	bicseq	r1, r5, r0, lsl #12
 664:	85010000 	strhi	r0, [r1, #-0]
 668:	00000061 	andeq	r0, r0, r1, rrx
 66c:	0e000015 	mcreq	0, 0, r0, cr0, cr5, {0}
 670:	0000037d 	andeq	r0, r0, sp, ror r3
 674:	03c47301 	biceq	r7, r4, #67108864	; 0x4000000
 678:	00462000 	subeq	r2, r6, r0
 67c:	9c010000 	stcls	0, cr0, [r1], {-0}
 680:	000002fc 	strdeq	r0, [r0], -ip
 684:	0002bb17 	andeq	fp, r2, r7, lsl fp
 688:	81730100 	cmnhi	r3, r0, lsl #2
 68c:	02000000 	andeq	r0, r0, #0
 690:	2e177791 	mrccs	7, 0, r7, cr7, cr1, {4}
 694:	01000003 	tsteq	r0, r3
 698:	00008173 	andeq	r8, r0, r3, ror r1
 69c:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 6a0:	03c50e00 	biceq	r0, r5, #0, 28
 6a4:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
 6a8:	20000384 	andcs	r0, r0, r4, lsl #7
 6ac:	00000040 	andeq	r0, r0, r0, asr #32
 6b0:	032e9c01 			; <UNDEFINED> instruction: 0x032e9c01
 6b4:	d3170000 	tstle	r7, #0
 6b8:	01000003 	tsteq	r0, r3
 6bc:	00008168 	andeq	r8, r0, r8, ror #2
 6c0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 6c4:	00032e17 	andeq	r2, r3, r7, lsl lr
 6c8:	81680100 	cmnhi	r8, r0, lsl #2
 6cc:	02000000 	andeq	r0, r0, #0
 6d0:	0e007691 	mcreq	6, 0, r7, cr0, cr1, {4}
 6d4:	00000319 	andeq	r0, r0, r9, lsl r3
 6d8:	032a5201 			; <UNDEFINED> instruction: 0x032a5201
 6dc:	005a2000 	subseq	r2, sl, r0
 6e0:	9c010000 	stcls	0, cr0, [r1], {-0}
 6e4:	0000036d 	andeq	r0, r0, sp, ror #6
 6e8:	0002a817 	andeq	sl, r2, r7, lsl r8
 6ec:	81520100 	cmphi	r2, r0, lsl #2
 6f0:	02000000 	andeq	r0, r0, #0
 6f4:	2e177791 	mrccs	7, 0, r7, cr7, cr1, {4}
 6f8:	01000003 	tsteq	r0, r3
 6fc:	00008152 	andeq	r8, r0, r2, asr r1
 700:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 704:	00024b16 	andeq	r4, r2, r6, lsl fp
 708:	611f0100 	tstvs	pc, r0, lsl #2
 70c:	15000000 	strne	r0, [r0, #-0]
 710:	ae180000 	cdpge	0, 1, cr0, cr8, cr0, {0}
 714:	01000002 	tsteq	r0, r2
 718:	0000814c 	andeq	r8, r0, ip, asr #2
 71c:	00030000 	andeq	r0, r3, r0
 720:	00002a20 	andeq	r2, r0, r0, lsr #20
 724:	959c0100 	ldrls	r0, [ip, #256]	; 0x100
 728:	17000003 	strne	r0, [r0, -r3]
 72c:	0000032e 	andeq	r0, r0, lr, lsr #6
 730:	00814c01 	addeq	r4, r1, r1, lsl #24
 734:	91020000 	mrsls	r0, (UNDEF: 2)
 738:	b8180077 	ldmdalt	r8, {r0, r1, r2, r4, r5, r6}
 73c:	01000003 	tsteq	r0, r3
 740:	00008131 	andeq	r8, r0, r1, lsr r1
 744:	00029400 	andeq	r9, r2, r0, lsl #8
 748:	00006c20 	andeq	r6, r0, r0, lsr #24
 74c:	db9c0100 	blle	fe700b54 <__aeabi_idiv0+0xde7003f4>
 750:	17000003 	strne	r0, [r0, -r3]
 754:	0000032e 	andeq	r0, r0, lr, lsr #6
 758:	00813101 	addeq	r3, r1, r1, lsl #2
 75c:	91020000 	mrsls	r0, (UNDEF: 2)
 760:	024b146f 	subeq	r1, fp, #1862270976	; 0x6f000000
 764:	1f010000 	svcne	0x00010000
 768:	00000061 	andeq	r0, r0, r1, rrx
 76c:	000003cd 	andeq	r0, r0, sp, asr #7
 770:	72100015 	andsvc	r0, r0, #21
 774:	3f010076 	svccc	0x00010076
 778:	00000081 	andeq	r0, r0, r1, lsl #1
 77c:	00779102 	rsbseq	r9, r7, r2, lsl #2
 780:	0003900e 	andeq	r9, r3, lr
 784:	30160100 	andscc	r0, r6, r0, lsl #2
 788:	64200002 	strtvs	r0, [r0], #-2
 78c:	01000000 	mrseq	r0, (UNDEF: 0)
 790:	0003fe9c 	muleq	r3, ip, lr
 794:	024b1600 	subeq	r1, fp, #0, 12
 798:	1f010000 	svcne	0x00010000
 79c:	00000061 	andeq	r0, r0, r1, rrx
 7a0:	0e000015 	mcreq	0, 0, r0, cr0, cr5, {0}
 7a4:	00000327 	andeq	r0, r0, r7, lsr #6
 7a8:	020c1001 	andeq	r1, ip, #1
 7ac:	00242000 	eoreq	r2, r4, r0
 7b0:	9c010000 	stcls	0, cr0, [r1], {-0}
 7b4:	00000422 	andeq	r0, r0, r2, lsr #8
 7b8:	00032e17 	andeq	r2, r3, r7, lsl lr
 7bc:	81100100 	tsthi	r0, r0, lsl #2
 7c0:	02000000 	andeq	r0, r0, #0
 7c4:	19007791 	stmdbne	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
 7c8:	00000339 	andeq	r0, r0, r9, lsr r3
 7cc:	01c80a01 	biceq	r0, r8, r1, lsl #20
 7d0:	00442000 	subeq	r2, r4, r0
 7d4:	9c010000 	stcls	0, cr0, [r1], {-0}
 7d8:	00000444 	andeq	r0, r0, r4, asr #8
 7dc:	0100780f 	tsteq	r0, pc, lsl #16
 7e0:	0000810a 	andeq	r8, r0, sl, lsl #2
 7e4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 7e8:	03631a00 	cmneq	r3, #0, 20
 7ec:	04010000 	streq	r0, [r1], #-0
 7f0:	2000018c 	andcs	r0, r0, ip, lsl #3
 7f4:	0000003c 	andeq	r0, r0, ip, lsr r0
 7f8:	780f9c01 	stmdavc	pc, {r0, sl, fp, ip, pc}	; <UNPREDICTABLE>
 7fc:	81040100 	mrshi	r0, (UNDEF: 20)
 800:	02000000 	andeq	r0, r0, #0
 804:	00007791 	muleq	r0, r1, r7

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	00160200 	andseq	r0, r6, r0, lsl #4
  14:	0b3a0e03 	bleq	e83828 <startup-0x1f17c7d8>
  18:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  1c:	24030000 	strcs	r0, [r3], #-0
  20:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  24:	000e030b 	andeq	r0, lr, fp, lsl #6
  28:	00260400 	eoreq	r0, r6, r0, lsl #8
  2c:	00001349 	andeq	r1, r0, r9, asr #6
  30:	0b002405 	bleq	904c <startup-0x1fff6fb4>
  34:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  38:	06000008 	streq	r0, [r0], -r8
  3c:	0b0b0113 	bleq	2c0490 <startup-0x1fd3fb70>
  40:	0b3b0b3a 	bleq	ec2d30 <startup-0x1f13d2d0>
  44:	00001301 	andeq	r1, r0, r1, lsl #6
  48:	03000d07 	movweq	r0, #3335	; 0xd07
  4c:	3b0b3a0e 	blcc	2ce88c <startup-0x1fd31774>
  50:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  54:	0800000b 	stmdaeq	r0, {r0, r1, r3}
  58:	0b0b0117 	bleq	2c04bc <startup-0x1fd3fb44>
  5c:	0b3b0b3a 	bleq	ec2d4c <startup-0x1f13d2b4>
  60:	00001301 	andeq	r1, r0, r1, lsl #6
  64:	03000d09 	movweq	r0, #3337	; 0xd09
  68:	3b0b3a08 	blcc	2ce890 <startup-0x1fd31770>
  6c:	0013490b 	andseq	r4, r3, fp, lsl #18
  70:	000d0a00 	andeq	r0, sp, r0, lsl #20
  74:	00001349 	andeq	r1, r0, r9, asr #6
  78:	49000d0b 	stmdbmi	r0, {r0, r1, r3, r8, sl, fp}
  7c:	000b3813 	andeq	r3, fp, r3, lsl r8
  80:	00350c00 	eorseq	r0, r5, r0, lsl #24
  84:	00001349 	andeq	r1, r0, r9, asr #6
  88:	0b000f0d 	bleq	3cc4 <startup-0x1fffc33c>
  8c:	0013490b 	andseq	r4, r3, fp, lsl #18
  90:	012e0e00 			; <UNDEFINED> instruction: 0x012e0e00
  94:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  98:	0b3b0b3a 	bleq	ec2d88 <startup-0x1f13d278>
  9c:	01111927 	tsteq	r1, r7, lsr #18
  a0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  a4:	01194296 			; <UNDEFINED> instruction: 0x01194296
  a8:	0f000013 	svceq	0x00000013
  ac:	08030034 	stmdaeq	r3, {r2, r4, r5}
  b0:	0b3b0b3a 	bleq	ec2da0 <startup-0x1f13d260>
  b4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  b8:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
  bc:	03193f01 	tsteq	r9, #1, 30
  c0:	3b0b3a0e 	blcc	2ce900 <startup-0x1fd31700>
  c4:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
  c8:	11000019 	tstne	r0, r9, lsl r0
  cc:	00000018 	andeq	r0, r0, r8, lsl r0
  d0:	3f002e12 	svccc	0x00002e12
  d4:	3a0e0319 	bcc	380d40 <startup-0x1fc7f2c0>
  d8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  dc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  e0:	97184006 	ldrls	r4, [r8, -r6]
  e4:	00001942 	andeq	r1, r0, r2, asr #18
  e8:	01110100 	tsteq	r1, r0, lsl #2
  ec:	0b130e25 	bleq	4c3988 <startup-0x1fb3c678>
  f0:	01110e03 	tsteq	r1, r3, lsl #28
  f4:	17100612 			; <UNDEFINED> instruction: 0x17100612
  f8:	16020000 	strne	r0, [r2], -r0
  fc:	3a0e0300 	bcc	380d04 <startup-0x1fc7f2fc>
 100:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 104:	03000013 	movweq	r0, #19
 108:	0b0b0024 	bleq	2c01a0 <startup-0x1fd3fe60>
 10c:	0e030b3e 	vmoveq.16	d3[0], r0
 110:	26040000 	strcs	r0, [r4], -r0
 114:	00134900 	andseq	r4, r3, r0, lsl #18
 118:	00240500 	eoreq	r0, r4, r0, lsl #10
 11c:	0b3e0b0b 	bleq	f82d50 <startup-0x1f07d2b0>
 120:	00000803 	andeq	r0, r0, r3, lsl #16
 124:	0b011306 	bleq	44d44 <startup-0x1ffbb2bc>
 128:	3b0b3a0b 	blcc	2ce95c <startup-0x1fd316a4>
 12c:	0013010b 	andseq	r0, r3, fp, lsl #2
 130:	000d0700 	andeq	r0, sp, r0, lsl #14
 134:	0b3a0e03 	bleq	e83948 <startup-0x1f17c6b8>
 138:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 13c:	00000b38 	andeq	r0, r0, r8, lsr fp
 140:	03000d08 	movweq	r0, #3336	; 0xd08
 144:	3b0b3a08 	blcc	2ce96c <startup-0x1fd31694>
 148:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 14c:	0900000b 	stmdbeq	r0, {r0, r1, r3}
 150:	13490035 	movtne	r0, #36917	; 0x9035
 154:	0f0a0000 	svceq	0x000a0000
 158:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 15c:	0b000013 	bleq	1b0 <startup-0x1ffffe50>
 160:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 164:	0b3a0e03 	bleq	e83978 <startup-0x1f17c688>
 168:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 16c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 170:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 174:	00130119 	andseq	r0, r3, r9, lsl r1
 178:	00050c00 	andeq	r0, r5, r0, lsl #24
 17c:	0b3a0803 	bleq	e82190 <startup-0x1f17de70>
 180:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 184:	00001802 	andeq	r1, r0, r2, lsl #16
 188:	11010b0d 	tstne	r1, sp, lsl #22
 18c:	00061201 	andeq	r1, r6, r1, lsl #4
 190:	00340e00 	eorseq	r0, r4, r0, lsl #28
 194:	0b3a0e03 	bleq	e839a8 <startup-0x1f17c658>
 198:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 19c:	00001802 	andeq	r1, r0, r2, lsl #16
 1a0:	3f002e0f 	svccc	0x00002e0f
 1a4:	3a0e0319 	bcc	380e10 <startup-0x1fc7f1f0>
 1a8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 1ac:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 1b0:	96184006 	ldrls	r4, [r8], -r6
 1b4:	00001942 	andeq	r1, r0, r2, asr #18
 1b8:	3f012e10 	svccc	0x00012e10
 1bc:	3a0e0319 	bcc	380e28 <startup-0x1fc7f1d8>
 1c0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 1c4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 1c8:	97184006 	ldrls	r4, [r8, -r6]
 1cc:	00001942 	andeq	r1, r0, r2, asr #18
 1d0:	03003411 	movweq	r3, #1041	; 0x411
 1d4:	3b0b3a08 	blcc	2ce9fc <startup-0x1fd31604>
 1d8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 1dc:	00000018 	andeq	r0, r0, r8, lsl r0
 1e0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 1e4:	030b130e 	movweq	r1, #45838	; 0xb30e
 1e8:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 1ec:	00171006 	andseq	r1, r7, r6
 1f0:	00160200 	andseq	r0, r6, r0, lsl #4
 1f4:	0b3a0e03 	bleq	e83a08 <startup-0x1f17c5f8>
 1f8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 1fc:	24030000 	strcs	r0, [r3], #-0
 200:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 204:	000e030b 	andeq	r0, lr, fp, lsl #6
 208:	00260400 	eoreq	r0, r6, r0, lsl #8
 20c:	00001349 	andeq	r1, r0, r9, asr #6
 210:	0b002405 	bleq	922c <startup-0x1fff6dd4>
 214:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 218:	06000008 	streq	r0, [r0], -r8
 21c:	0b0b0113 	bleq	2c0670 <startup-0x1fd3f990>
 220:	0b3b0b3a 	bleq	ec2f10 <startup-0x1f13d0f0>
 224:	00001301 	andeq	r1, r0, r1, lsl #6
 228:	03000d07 	movweq	r0, #3335	; 0xd07
 22c:	3b0b3a0e 	blcc	2cea6c <startup-0x1fd31594>
 230:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 234:	0800000b 	stmdaeq	r0, {r0, r1, r3}
 238:	0b0b0117 	bleq	2c069c <startup-0x1fd3f964>
 23c:	0b3b0b3a 	bleq	ec2f2c <startup-0x1f13d0d4>
 240:	00001301 	andeq	r1, r0, r1, lsl #6
 244:	03000d09 	movweq	r0, #3337	; 0xd09
 248:	3b0b3a08 	blcc	2cea70 <startup-0x1fd31590>
 24c:	0013490b 	andseq	r4, r3, fp, lsl #18
 250:	000d0a00 	andeq	r0, sp, r0, lsl #20
 254:	00001349 	andeq	r1, r0, r9, asr #6
 258:	49000d0b 	stmdbmi	r0, {r0, r1, r3, r8, sl, fp}
 25c:	000b3813 	andeq	r3, fp, r3, lsl r8
 260:	00350c00 	eorseq	r0, r5, r0, lsl #24
 264:	00001349 	andeq	r1, r0, r9, asr #6
 268:	0b000f0d 	bleq	3ea4 <startup-0x1fffc15c>
 26c:	0013490b 	andseq	r4, r3, fp, lsl #18
 270:	012e0e00 			; <UNDEFINED> instruction: 0x012e0e00
 274:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 278:	0b3b0b3a 	bleq	ec2f68 <startup-0x1f13d098>
 27c:	01111927 	tsteq	r1, r7, lsr #18
 280:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 284:	01194296 			; <UNDEFINED> instruction: 0x01194296
 288:	0f000013 	svceq	0x00000013
 28c:	08030005 	stmdaeq	r3, {r0, r2}
 290:	0b3b0b3a 	bleq	ec2f80 <startup-0x1f13d080>
 294:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 298:	34100000 	ldrcc	r0, [r0], #-0
 29c:	3a080300 	bcc	200ea4 <startup-0x1fdff15c>
 2a0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2a4:	00180213 	andseq	r0, r8, r3, lsl r2
 2a8:	00341100 	eorseq	r1, r4, r0, lsl #2
 2ac:	0b3a0e03 	bleq	e83ac0 <startup-0x1f17c540>
 2b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 2b4:	00001802 	andeq	r1, r0, r2, lsl #16
 2b8:	3f012e12 	svccc	0x00012e12
 2bc:	3a0e0319 	bcc	380f28 <startup-0x1fc7f0d8>
 2c0:	110b3b0b 	tstne	fp, fp, lsl #22
 2c4:	40061201 	andmi	r1, r6, r1, lsl #4
 2c8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 2cc:	00001301 	andeq	r1, r0, r1, lsl #6
 2d0:	11010b13 	tstne	r1, r3, lsl fp
 2d4:	00061201 	andeq	r1, r6, r1, lsl #4
 2d8:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
 2dc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2e0:	0b3b0b3a 	bleq	ec2fd0 <startup-0x1f13d030>
 2e4:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 2e8:	00001301 	andeq	r1, r0, r1, lsl #6
 2ec:	00001815 	andeq	r1, r0, r5, lsl r8
 2f0:	012e1600 			; <UNDEFINED> instruction: 0x012e1600
 2f4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2f8:	0b3b0b3a 	bleq	ec2fe8 <startup-0x1f13d018>
 2fc:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 300:	05170000 	ldreq	r0, [r7, #-0]
 304:	3a0e0300 	bcc	380f0c <startup-0x1fc7f0f4>
 308:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 30c:	00180213 	andseq	r0, r8, r3, lsl r2
 310:	012e1800 			; <UNDEFINED> instruction: 0x012e1800
 314:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 318:	0b3b0b3a 	bleq	ec3008 <startup-0x1f13cff8>
 31c:	13491927 	movtne	r1, #39207	; 0x9927
 320:	06120111 			; <UNDEFINED> instruction: 0x06120111
 324:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 328:	00130119 	andseq	r0, r3, r9, lsl r1
 32c:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
 330:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 334:	0b3b0b3a 	bleq	ec3024 <startup-0x1f13cfdc>
 338:	01111927 	tsteq	r1, r7, lsr #18
 33c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 340:	01194297 			; <UNDEFINED> instruction: 0x01194297
 344:	1a000013 	bne	398 <startup-0x1ffffc68>
 348:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 34c:	0b3a0e03 	bleq	e83b60 <startup-0x1f17c4a0>
 350:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 354:	06120111 			; <UNDEFINED> instruction: 0x06120111
 358:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 35c:	00000019 	andeq	r0, r0, r9, lsl r0

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000000b8 	strheq	r0, [r0], -r8
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	02240002 	eoreq	r0, r4, #2
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	200000c8 	andcs	r0, r0, r8, asr #1
  3c:	000000c2 	andeq	r0, r0, r2, asr #1
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	03a50002 			; <UNDEFINED> instruction: 0x03a50002
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	2000018c 	andcs	r0, r0, ip, lsl #3
  5c:	000004c0 	andeq	r0, r0, r0, asr #9
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	200000c8 	andcs	r0, r0, r8, asr #1
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	0000013b 	andeq	r0, r0, fp, lsr r1
   4:	00c60002 	sbceq	r0, r6, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	65642f3a 	strbvs	r2, [r4, #-3898]!	; 0xfffff0c6
  20:	6f6c6576 	svcvs	0x006c6576
  24:	6e656d70 	mcrvs	13, 3, r6, cr5, cr0, {3}
  28:	72612f74 	rsbvc	r2, r1, #116, 30	; 0x1d0
  2c:	7373616d 	cmnvc	r3, #1073741851	; 0x4000001b
  30:	6c626d65 	stclvs	13, cr6, [r2], #-404	; 0xfffffe6c
  34:	632f7265 			; <UNDEFINED> instruction: 0x632f7265
  38:	5f65646f 	svcpl	0x0065646f
  3c:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
  40:	6172672f 	cmnvs	r2, pc, lsr #14
  44:	63696870 	cmnvs	r9, #112, 16	; 0x700000
  48:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
  4c:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
  50:	6172672f 	cmnvs	r2, pc, lsr #14
  54:	63696870 	cmnvs	r9, #112, 16	; 0x700000
  58:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
  5c:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
  60:	6172672f 	cmnvs	r2, pc, lsr #14
  64:	63696870 	cmnvs	r9, #112, 16	; 0x700000
  68:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
  6c:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
  70:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
  74:	65766564 	ldrbvs	r6, [r6, #-1380]!	; 0xfffffa9c
  78:	6d706f6c 	ldclvs	15, cr6, [r0, #-432]!	; 0xfffffe50
  7c:	5c746e65 	ldclpl	14, cr6, [r4], #-404	; 0xfffffe6c
  80:	616d7261 	cmnvs	sp, r1, ror #4
  84:	6d657373 	stclvs	3, cr7, [r5, #-460]!	; 0xfffffe34
  88:	72656c62 	rsbvc	r6, r5, #25088	; 0x6200
  8c:	646f635c 	strbtvs	r6, [pc], #-860	; 94 <startup-0x1fffff6c>
  90:	696c5f65 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
  94:	675c6574 			; <UNDEFINED> instruction: 0x675c6574
  98:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  9c:	645f6369 	ldrbvs	r6, [pc], #-873	; a4 <startup-0x1fffff5c>
  a0:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
  a4:	755c7961 	ldrbvc	r7, [ip, #-2401]	; 0xfffff69f
  a8:	006c6974 	rsbeq	r6, ip, r4, ror r9
  ac:	61747300 	cmnvs	r4, r0, lsl #6
  b0:	70757472 	rsbsvc	r7, r5, r2, ror r4
  b4:	0100632e 	tsteq	r0, lr, lsr #6
  b8:	79740000 	ldmdbvc	r4!, {}^	; <UNPREDICTABLE>
  bc:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
  c0:	00020068 	andeq	r0, r2, r8, rrx
  c4:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
  c8:	00682e6f 	rsbeq	r2, r8, pc, ror #28
  cc:	00000002 	andeq	r0, r0, r2
  d0:	00020500 	andeq	r0, r2, r0, lsl #10
  d4:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
  d8:	5e13010a 	mufpls	f0, f3, #2.0
  dc:	01000302 	tsteq	r0, r2, lsl #6
  e0:	02050001 	andeq	r0, r5, #1
  e4:	20000010 	andcs	r0, r0, r0, lsl r0
  e8:	34011403 	strcc	r1, [r1], #-1027	; 0xfffffbfd
  ec:	2f3e773d 	svccs	0x003e773d
  f0:	04020034 	streq	r0, [r2], #-52	; 0xffffffcc
  f4:	02003e03 	andeq	r3, r0, #3, 28	; 0x30
  f8:	00720304 	rsbseq	r0, r2, r4, lsl #6
  fc:	06010402 	streq	r0, [r1], -r2, lsl #8
 100:	0040063c 	subeq	r0, r0, ip, lsr r6
 104:	3e030402 	cdpcc	4, 0, cr0, cr3, cr2, {0}
 108:	03040200 	movweq	r0, #16896	; 0x4200
 10c:	04020072 	streq	r0, [r2], #-114	; 0xffffff8e
 110:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 114:	02005a41 	andeq	r5, r0, #266240	; 0x41000
 118:	003e0304 	eorseq	r0, lr, r4, lsl #6
 11c:	72030402 	andvc	r0, r3, #33554432	; 0x2000000
 120:	01040200 	mrseq	r0, R12_usr
 124:	40063c06 	andmi	r3, r6, r6, lsl #24
 128:	03040200 	movweq	r0, #16896	; 0x4200
 12c:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
 130:	02007203 	andeq	r7, r0, #805306368	; 0x30000000
 134:	3c060104 	stfccs	f0, [r6], {4}
 138:	04024006 	streq	r4, [r2], #-6
 13c:	b8010100 	stmdalt	r1, {r8}
 140:	02000000 	andeq	r0, r0, #0
 144:	00006f00 	andeq	r6, r0, r0, lsl #30
 148:	fb010200 	blx	40952 <startup-0x1ffbf6ae>
 14c:	01000d0e 	tsteq	r0, lr, lsl #26
 150:	00010101 	andeq	r0, r1, r1, lsl #2
 154:	00010000 	andeq	r0, r1, r0
 158:	3a430100 	bcc	10c0560 <startup-0x1ef3faa0>
 15c:	7665642f 	strbtvc	r6, [r5], -pc, lsr #8
 160:	706f6c65 	rsbvc	r6, pc, r5, ror #24
 164:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 168:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 16c:	65737361 	ldrbvs	r7, [r3, #-865]!	; 0xfffffc9f
 170:	656c626d 	strbvs	r6, [ip, #-621]!	; 0xfffffd93
 174:	6f632f72 	svcvs	0x00632f72
 178:	6c5f6564 	cfldr64vs	mvdx6, [pc], {100}	; 0x64
 17c:	2f657469 	svccs	0x00657469
 180:	70617267 	rsbvc	r7, r1, r7, ror #4
 184:	5f636968 	svcpl	0x00636968
 188:	70736964 	rsbsvc	r6, r3, r4, ror #18
 18c:	2f79616c 	svccs	0x0079616c
 190:	6c697475 	cfstrdvs	mvd7, [r9], #-468	; 0xfffffe2c
 194:	65640000 	strbvs	r0, [r4, #-0]!
 198:	2e79616c 	rpwcsez	f6, f1, #4.0
 19c:	00010063 	andeq	r0, r1, r3, rrx
 1a0:	70797400 	rsbsvc	r7, r9, r0, lsl #8
 1a4:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
 1a8:	00000100 	andeq	r0, r0, r0, lsl #2
 1ac:	616c6564 	cmnvs	ip, r4, ror #10
 1b0:	00682e79 	rsbeq	r2, r8, r9, ror lr
 1b4:	00000001 	andeq	r0, r0, r1
 1b8:	c8020500 	stmdagt	r2, {r8, sl}
 1bc:	17200000 	strne	r0, [r0, -r0]!
 1c0:	3d3d2f3d 	ldccc	15, cr2, [sp, #-244]!	; 0xffffff0c
 1c4:	3d3e3d3d 	ldccc	13, cr3, [lr, #-244]!	; 0xffffff0c
 1c8:	2f773d40 	svccs	0x00773d40
 1cc:	4b3f2f2f 	blmi	fcbe90 <startup-0x1f034170>
 1d0:	03040200 	movweq	r0, #16896	; 0x4200
 1d4:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
 1d8:	02002f03 	andeq	r2, r0, #3, 30
 1dc:	002f0304 	eoreq	r0, pc, r4, lsl #6
 1e0:	2f030402 	svccs	0x00030402
 1e4:	03040200 	movweq	r0, #16896	; 0x4200
 1e8:	04020029 	streq	r0, [r2], #-41	; 0xffffffd7
 1ec:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 1f0:	834c4d51 	movthi	r4, #52561	; 0xcd51
 1f4:	0402753e 	streq	r7, [r2], #-1342	; 0xfffffac2
 1f8:	2c010100 	stfcss	f0, [r1], {-0}
 1fc:	02000001 	andeq	r0, r0, #1
 200:	00007700 	andeq	r7, r0, r0, lsl #14
 204:	fb010200 	blx	40a0e <startup-0x1ffbf5f2>
 208:	01000d0e 	tsteq	r0, lr, lsl #26
 20c:	00010101 	andeq	r0, r1, r1, lsl #2
 210:	00010000 	andeq	r0, r1, r0
 214:	3a430100 	bcc	10c061c <startup-0x1ef3f9e4>
 218:	7665642f 	strbtvc	r6, [r5], -pc, lsr #8
 21c:	706f6c65 	rsbvc	r6, pc, r5, ror #24
 220:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 224:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 228:	65737361 	ldrbvs	r7, [r3, #-865]!	; 0xfffffc9f
 22c:	656c626d 	strbvs	r6, [ip, #-621]!	; 0xfffffd93
 230:	6f632f72 	svcvs	0x00632f72
 234:	6c5f6564 	cfldr64vs	mvdx6, [pc], {100}	; 0x64
 238:	2f657469 	svccs	0x00657469
 23c:	70617267 	rsbvc	r7, r1, r7, ror #4
 240:	5f636968 	svcpl	0x00636968
 244:	70736964 	rsbsvc	r6, r3, r4, ror #18
 248:	2f79616c 	svccs	0x0079616c
 24c:	6c697475 	cfstrdvs	mvd7, [r9], #-468	; 0xfffffe2c
 250:	72670000 	rsbvc	r0, r7, #0
 254:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 258:	73696463 	cmnvc	r9, #1660944384	; 0x63000000
 25c:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 260:	0100632e 	tsteq	r0, lr, lsr #6
 264:	79740000 	ldmdbvc	r4!, {}^	; <UNPREDICTABLE>
 268:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
 26c:	00010068 	andeq	r0, r1, r8, rrx
 270:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 274:	00682e6f 	rsbeq	r2, r8, pc, ror #28
 278:	00000001 	andeq	r0, r0, r1
 27c:	8c020500 	cfstr32hi	mvfx0, [r2], {-0}
 280:	16200001 	strtne	r0, [r0], -r1
 284:	77839167 	strvc	r9, [r3, r7, ror #2]
 288:	6983d767 	stmibvs	r3, {r0, r1, r2, r5, r6, r8, r9, sl, ip, lr, pc}
 28c:	4d593d67 	ldclmi	13, cr3, [r9, #-412]	; 0xfffffe64
 290:	3d3e3e2f 	ldccc	14, cr3, [lr, #-188]!	; 0xffffff44
 294:	2f3d323e 	svccs	0x003d323e
 298:	26622f3d 	uqasxcs	r2, r2, sp
 29c:	a13d3d24 	teqge	sp, r4, lsr #26
 2a0:	3e3e3e67 	cdpcc	14, 3, cr3, cr14, cr7, {3}
 2a4:	303d3059 	eorscc	r3, sp, r9, asr r0
 2a8:	30403e5a 	subcc	r3, r0, sl, asr lr
 2ac:	5967af3d 	stmdbpl	r7!, {r0, r2, r3, r4, r5, r8, r9, sl, fp, sp, pc}^
 2b0:	4c914d67 	ldcmi	13, cr4, [r1], {103}	; 0x67
 2b4:	303e305a 	eorscc	r3, lr, sl, asr r0
 2b8:	3e3d303e 	mrccc	0, 1, r3, cr13, cr14, {1}
 2bc:	3e91693d 			; <UNDEFINED> instruction: 0x3e91693d
 2c0:	4d833e5a 	stcmi	14, cr3, [r3, #360]	; 0x168
 2c4:	3d5a3e91 	ldclcc	14, cr3, [sl, #-580]	; 0xfffffdbc
 2c8:	2f4d833e 	svccs	0x004d833e
 2cc:	3e3d3e3d 	mrccc	14, 1, r3, cr13, cr13, {1}
 2d0:	4b4b4b3e 	blmi	12d2fd0 <startup-0x1ed2d030>
 2d4:	3f3d4b4b 	svccc	0x003d4b4b
 2d8:	4b9f4c3e 	blmi	fe7d33d8 <__aeabi_idiv0+0xde7d2c78>
 2dc:	03040200 	movweq	r0, #16896	; 0x4200
 2e0:	0402004c 	streq	r0, [r2], #-76	; 0xffffffb4
 2e4:	02004803 	andeq	r4, r0, #196608	; 0x30000
 2e8:	58060104 	stmdapl	r6, {r2, r8}
 2ec:	02040200 	andeq	r0, r4, #0, 4
 2f0:	02004606 	andeq	r4, r0, #6291456	; 0x600000
 2f4:	58060104 	stmdapl	r6, {r2, r8}
 2f8:	4a090306 	bmi	240f18 <startup-0x1fdbf0e8>
 2fc:	0200e54d 	andeq	lr, r0, #322961408	; 0x13400000
 300:	58060104 	stmdapl	r6, {r2, r8}
 304:	02005b06 	andeq	r5, r0, #6144	; 0x1800
 308:	58060104 	stmdapl	r6, {r2, r8}
 30c:	08ad5b06 	stmiaeq	sp!, {r1, r2, r8, r9, fp, ip, lr}
 310:	4c794c22 	ldclmi	12, cr4, [r9], #-136	; 0xffffff78
 314:	694b784b 	stmdbvs	fp, {r0, r1, r3, r6, fp, ip, sp, lr}^
 318:	caa0d8c9 	bgt	fe836644 <__aeabi_idiv0+0xde835ee4>
 31c:	039fae4b 	orrseq	sl, pc, #1200	; 0x4b0
 320:	0331ac5b 	teqeq	r1, #23296	; 0x5b00
 324:	06022023 	streq	r2, [r2], -r3, lsr #32
 328:	Address 0x00000328 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
   4:	00707574 	rsbseq	r7, r0, r4, ror r5
   8:	4550534f 	ldrbmi	r5, [r0, #-847]	; 0xfffffcb1
   c:	00524445 	subseq	r4, r2, r5, asr #8
  10:	5f524449 	svcpl	0x00524449
  14:	00574f4c 	subseq	r4, r7, ip, asr #30
  18:	5f524449 	svcpl	0x00524449
  1c:	48474948 	stmdami	r7, {r3, r6, r8, fp, lr}^
  20:	52534200 	subspl	r4, r3, #0, 4
  24:	46410052 			; <UNDEFINED> instruction: 0x46410052
  28:	41003152 	tstmi	r0, r2, asr r1
  2c:	00325246 	eorseq	r5, r2, r6, asr #4
  30:	45444f4d 	strbmi	r4, [r4, #-3917]	; 0xfffff0b3
  34:	544f0052 	strbpl	r0, [pc], #-82	; 3c <startup-0x1fffffc4>
  38:	52455059 	subpl	r5, r5, #89	; 0x59
  3c:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
  40:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
  44:	332e3620 			; <UNDEFINED> instruction: 0x332e3620
  48:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  4c:	30373130 	eorscc	r3, r7, r0, lsr r1
  50:	20353132 	eorscs	r3, r5, r2, lsr r1
  54:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  58:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  5c:	415b2029 	cmpmi	fp, r9, lsr #32
  60:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff316 <__aeabi_idiv0+0xdfffebb6>
  64:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  68:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  6c:	72622d36 	rsbvc	r2, r2, #3456	; 0xd80
  70:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  74:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  78:	6f697369 	svcvs	0x00697369
  7c:	3432206e 	ldrtcc	r2, [r2], #-110	; 0xffffff92
  80:	32313535 	eorscc	r3, r1, #222298112	; 0xd400000
  84:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
  88:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
  8c:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
  90:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
  94:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
  98:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
  9c:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
  a0:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
  a4:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
  a8:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
  ac:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
  b0:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
  b4:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
  b8:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
  bc:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
  c0:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
  c4:	20672d20 	rsbcs	r2, r7, r0, lsr #26
  c8:	20304f2d 	eorscs	r4, r0, sp, lsr #30
  cc:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
  d0:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
  d4:	736e7500 	cmnvc	lr, #0, 10
  d8:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
  dc:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
  e0:	4c007261 	sfmmi	f7, 4, [r0], {97}	; 0x61
  e4:	524b434f 	subpl	r4, fp, #1006632961	; 0x3c000001
  e8:	0036315f 	eorseq	r3, r6, pc, asr r1
  ec:	5f52444f 	svcpl	0x0052444f
  f0:	48474948 	stmdami	r7, {r3, r6, r8, fp, lr}^
  f4:	6f687300 	svcvs	0x00687300
  f8:	75207472 	strvc	r7, [r0, #-1138]!	; 0xfffffb8e
  fc:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 100:	2064656e 	rsbcs	r6, r4, lr, ror #10
 104:	00746e69 	rsbseq	r6, r4, r9, ror #28
 108:	642f3a43 	strtvs	r3, [pc], #-2627	; 110 <startup-0x1ffffef0>
 10c:	6c657665 	stclvs	6, cr7, [r5], #-404	; 0xfffffe6c
 110:	656d706f 	strbvs	r7, [sp, #-111]!	; 0xffffff91
 114:	612f746e 			; <UNDEFINED> instruction: 0x612f746e
 118:	73616d72 	cmnvc	r1, #7296	; 0x1c80
 11c:	626d6573 	rsbvs	r6, sp, #482344960	; 0x1cc00000
 120:	2f72656c 	svccs	0x0072656c
 124:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 128:	74696c5f 	strbtvc	r6, [r9], #-3167	; 0xfffff3a1
 12c:	72672f65 	rsbvc	r2, r7, #404	; 0x194
 130:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 134:	69645f63 	stmdbvs	r4!, {r0, r1, r5, r6, r8, r9, sl, fp, ip, lr}^
 138:	616c7073 	smcvs	50947	; 0xc703
 13c:	72672f79 	rsbvc	r2, r7, #484	; 0x1e4
 140:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 144:	69645f63 	stmdbvs	r4!, {r0, r1, r5, r6, r8, r9, sl, fp, ip, lr}^
 148:	616c7073 	smcvs	50947	; 0xc703
 14c:	72672f79 	rsbvc	r2, r7, #484	; 0x1e4
 150:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 154:	69645f63 	stmdbvs	r4!, {r0, r1, r5, r6, r8, r9, sl, fp, ip, lr}^
 158:	616c7073 	smcvs	50947	; 0xc703
 15c:	74732f79 	ldrbtvc	r2, [r3], #-3961	; 0xfffff087
 160:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 164:	00632e70 	rsbeq	r2, r3, r0, ror lr
 168:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
 16c:	00635f38 	rsbeq	r5, r3, r8, lsr pc
 170:	6e69616d 	powvsez	f6, f1, #5.0
 174:	53455200 	movtpl	r5, #20992	; 0x5200
 178:	5244495f 	subpl	r4, r4, #1556480	; 0x17c000
 17c:	6e697500 	cdpvs	5, 6, cr7, cr9, cr0, {0}
 180:	00363174 	eorseq	r3, r6, r4, ror r1
 184:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
 188:	69003233 	stmdbvs	r0, {r0, r1, r4, r5, r9, ip, sp}
 18c:	5f74696e 	svcpl	0x0074696e
 190:	00707061 	rsbseq	r7, r0, r1, rrx
 194:	5f534552 	svcpl	0x00534552
 198:	0052444f 	subseq	r4, r2, pc, asr #8
 19c:	5f534552 	svcpl	0x00534552
 1a0:	4b434f4c 	blmi	10d3ed8 <startup-0x1ef2c128>
 1a4:	70670052 	rsbvc	r0, r7, r2, asr r0
 1a8:	74506f69 	ldrbvc	r6, [r0], #-3945	; 0xfffff097
 1ac:	444f0072 	strbmi	r0, [pc], #-114	; 1b4 <startup-0x1ffffe4c>
 1b0:	4f4c5f52 	svcmi	0x004c5f52
 1b4:	70670057 	rsbvc	r0, r7, r7, asr r0
 1b8:	6f506f69 	svcvs	0x00506f69
 1bc:	75007472 	strvc	r7, [r0, #-1138]	; 0xfffffb8e
 1c0:	31746e69 	cmncc	r4, r9, ror #28
 1c4:	00635f36 	rsbeq	r5, r3, r6, lsr pc
 1c8:	44505550 	ldrbmi	r5, [r0], #-1360	; 0xfffffab0
 1cc:	45520052 	ldrbmi	r0, [r2, #-82]	; 0xffffffae
 1d0:	544f5f53 	strbpl	r5, [pc], #-3923	; 1d8 <startup-0x1ffffe28>
 1d4:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 1d8:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 11e <startup-0x1ffffee2>	; <UNPREDICTABLE>
 1dc:	696c6c69 	stmdbvs	ip!, {r0, r3, r5, r6, sl, fp, sp, lr}^
 1e0:	6f687300 	svcvs	0x00687300
 1e4:	69207472 	stmdbvs	r0!, {r1, r4, r5, r6, sl, ip, sp, lr}
 1e8:	7500746e 	strvc	r7, [r0, #-1134]	; 0xfffffb92
 1ec:	38746e69 	ldmdacc	r4!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
 1f0:	52544300 	subspl	r4, r4, #0, 6
 1f4:	4f435f4c 	svcmi	0x00435f4c
 1f8:	00544e55 	subseq	r4, r4, r5, asr lr
 1fc:	642f3a43 	strtvs	r3, [pc], #-2627	; 204 <startup-0x1ffffdfc>
 200:	6c657665 	stclvs	6, cr7, [r5], #-404	; 0xfffffe6c
 204:	656d706f 	strbvs	r7, [sp, #-111]!	; 0xffffff91
 208:	612f746e 			; <UNDEFINED> instruction: 0x612f746e
 20c:	73616d72 	cmnvc	r1, #7296	; 0x1c80
 210:	626d6573 	rsbvs	r6, sp, #482344960	; 0x1cc00000
 214:	2f72656c 	svccs	0x0072656c
 218:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 21c:	74696c5f 	strbtvc	r6, [r9], #-3167	; 0xfffff3a1
 220:	72672f65 	rsbvc	r2, r7, #404	; 0x194
 224:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 228:	69645f63 	stmdbvs	r4!, {r0, r1, r5, r6, r8, r9, sl, fp, ip, lr}^
 22c:	616c7073 	smcvs	50947	; 0xc703
 230:	74752f79 	ldrbtvc	r2, [r5], #-3961	; 0xfffff087
 234:	642f6c69 	strtvs	r6, [pc], #-3177	; 23c <startup-0x1ffffdc4>
 238:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 23c:	6400632e 	strvs	r6, [r0], #-814	; 0xfffffcd2
 240:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 244:	3035325f 	eorscc	r3, r5, pc, asr r2
 248:	6400736e 	strvs	r7, [r0], #-878	; 0xfffffc92
 24c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 250:	3030355f 	eorscc	r3, r0, pc, asr r5
 254:	6400736e 	strvs	r7, [r0], #-878	; 0xfffffc92
 258:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 25c:	63696d5f 	cmnvs	r9, #6080	; 0x17c0
 260:	4c006f72 	stcmi	15, cr6, [r0], {114}	; 0x72
 264:	0044414f 	subeq	r4, r4, pc, asr #2
 268:	5f534552 	svcpl	0x00534552
 26c:	4c525443 	cfldrdmi	mvd5, [r2], {67}	; 0x43
 270:	45520031 	ldrbmi	r0, [r2, #-49]	; 0xffffffcf
 274:	54435f53 	strbpl	r5, [r3], #-3923	; 0xfffff0ad
 278:	00324c52 	eorseq	r4, r2, r2, asr ip
 27c:	706f6f6c 	rsbvc	r6, pc, ip, ror #30
 280:	69750073 	ldmdbvs	r5!, {r0, r1, r4, r5, r6}^
 284:	3233746e 	eorscc	r7, r3, #1845493760	; 0x6e000000
 288:	5300635f 	movwpl	r6, #863	; 0x35f
 28c:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
 290:	74506b63 	ldrbvc	r6, [r0], #-2915	; 0xfffff49d
 294:	54430072 	strbpl	r0, [r3], #-114	; 0xffffff8e
 298:	53004c52 	movwpl	r4, #3154	; 0xc52
 29c:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
 2a0:	74006b63 	strvc	r6, [r0], #-2915	; 0xfffff49d
 2a4:	00706d65 	rsbseq	r6, r0, r5, ror #26
 2a8:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 2ac:	72670065 	rsbvc	r0, r7, #101	; 0x65
 2b0:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 2b4:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
 2b8:	645f6461 	ldrbvs	r6, [pc], #-1121	; 2c0 <startup-0x1ffffd40>
 2bc:	00617461 	rsbeq	r7, r1, r1, ror #8
 2c0:	65786970 	ldrbvs	r6, [r8, #-2416]!	; 0xfffff690
 2c4:	6f63006c 	svcvs	0x0063006c
 2c8:	6e6d756c 	cdpvs	5, 6, cr7, cr13, cr12, {3}
 2cc:	2f3a4300 	svccs	0x003a4300
 2d0:	65766564 	ldrbvs	r6, [r6, #-1380]!	; 0xfffffa9c
 2d4:	6d706f6c 	ldclvs	15, cr6, [r0, #-432]!	; 0xfffffe50
 2d8:	2f746e65 	svccs	0x00746e65
 2dc:	616d7261 	cmnvs	sp, r1, ror #4
 2e0:	6d657373 	stclvs	3, cr7, [r5, #-460]!	; 0xfffffe34
 2e4:	72656c62 	rsbvc	r6, r5, #25088	; 0x6200
 2e8:	646f632f 	strbtvs	r6, [pc], #-815	; 2f0 <startup-0x1ffffd10>
 2ec:	696c5f65 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 2f0:	672f6574 			; <UNDEFINED> instruction: 0x672f6574
 2f4:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 2f8:	645f6369 	ldrbvs	r6, [pc], #-873	; 300 <startup-0x1ffffd00>
 2fc:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 300:	752f7961 	strvc	r7, [pc, #-2401]!	; fffff9a7 <__aeabi_idiv0+0xdffff247>
 304:	2f6c6974 	svccs	0x006c6974
 308:	70617267 	rsbvc	r7, r1, r7, ror #4
 30c:	64636968 	strbtvs	r6, [r3], #-2408	; 0xfffff698
 310:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 314:	632e7961 			; <UNDEFINED> instruction: 0x632e7961
 318:	61726700 	cmnvs	r2, r0, lsl #14
 31c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 320:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 324:	73006574 	movwvc	r6, #1396	; 0x574
 328:	63656c65 	cmnvs	r5, #25856	; 0x6500
 32c:	6f635f74 	svcvs	0x00635f74
 330:	6f72746e 	svcvs	0x0072746e
 334:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 338:	61726700 	cmnvs	r2, r0, lsl #14
 33c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 340:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 344:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 348:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
 34c:	00726165 	rsbseq	r6, r2, r5, ror #2
 350:	70617267 	rsbvc	r7, r1, r7, ror #4
 354:	5f636968 	svcpl	0x00636968
 358:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 35c:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
 360:	6700657a 	smlsdxvs	r0, sl, r5, r6
 364:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 368:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 36c:	5f6c7274 	svcpl	0x006c7274
 370:	5f746962 	svcpl	0x00746962
 374:	00746573 	rsbseq	r6, r4, r3, ror r5
 378:	6b73616d 	blvs	1cd8934 <startup-0x1e3276cc>
 37c:	61726700 	cmnvs	r2, r0, lsl #14
 380:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 384:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 388:	645f6574 	ldrbvs	r6, [pc], #-1396	; 390 <startup-0x1ffffc70>
 38c:	00617461 	rsbeq	r7, r1, r1, ror #8
 390:	70617267 	rsbvc	r7, r1, r7, ror #4
 394:	5f636968 	svcpl	0x00636968
 398:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 39c:	6165725f 	cmnvs	r5, pc, asr r2
 3a0:	67007964 	strvs	r7, [r0, -r4, ror #18]
 3a4:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 3a8:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 3ac:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 3b0:	7263735f 	rsbvc	r7, r3, #2080374785	; 0x7c000001
 3b4:	006e6565 	rsbeq	r6, lr, r5, ror #10
 3b8:	70617267 	rsbvc	r7, r1, r7, ror #4
 3bc:	5f636968 	svcpl	0x00636968
 3c0:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 3c4:	61726700 	cmnvs	r2, r0, lsl #14
 3c8:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 3cc:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 3d0:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 3d4:	616d6d6f 	cmnvs	sp, pc, ror #26
 3d8:	Address 0x000003d8 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000018 	andeq	r0, r0, r8, lsl r0
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000028 	andcs	r0, r0, r8, lsr #32
  48:	000000a0 	andeq	r0, r0, r0, lsr #1
  4c:	40080e41 	andmi	r0, r8, r1, asr #28
  50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  54:	100e4101 	andne	r4, lr, r1, lsl #2
  58:	00070d41 	andeq	r0, r7, r1, asr #26
  5c:	0000000c 	andeq	r0, r0, ip
  60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  64:	7c020001 	stcvc	0, cr0, [r2], {1}
  68:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  6c:	0000001c 	andeq	r0, r0, ip, lsl r0
  70:	0000005c 	andeq	r0, r0, ip, asr r0
  74:	200000c8 	andcs	r0, r0, r8, asr #1
  78:	00000048 	andeq	r0, r0, r8, asr #32
  7c:	40080e41 	andmi	r0, r8, r1, asr #28
  80:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  84:	100e4101 	andne	r4, lr, r1, lsl #2
  88:	00070d41 	andeq	r0, r7, r1, asr #26
  8c:	00000018 	andeq	r0, r0, r8, lsl r0
  90:	0000005c 	andeq	r0, r0, ip, asr r0
  94:	20000110 	andcs	r0, r0, r0, lsl r1
  98:	00000012 	andeq	r0, r0, r2, lsl r0
  9c:	40080e41 	andmi	r0, r8, r1, asr #28
  a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  a4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	0000005c 	andeq	r0, r0, ip, asr r0
  b0:	20000122 	andcs	r0, r0, r2, lsr #2
  b4:	00000034 	andeq	r0, r0, r4, lsr r0
  b8:	40080e41 	andmi	r0, r8, r1, asr #28
  bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c0:	180e4101 	stmdane	lr, {r0, r8, lr}
  c4:	00070d41 	andeq	r0, r7, r1, asr #26
  c8:	0000001c 	andeq	r0, r0, ip, lsl r0
  cc:	0000005c 	andeq	r0, r0, ip, asr r0
  d0:	20000156 	andcs	r0, r0, r6, asr r1
  d4:	00000034 	andeq	r0, r0, r4, lsr r0
  d8:	40080e41 	andmi	r0, r8, r1, asr #28
  dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  e0:	100e4101 	andne	r4, lr, r1, lsl #2
  e4:	00070d41 	andeq	r0, r7, r1, asr #26
  e8:	0000000c 	andeq	r0, r0, ip
  ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  f0:	7c020001 	stcvc	0, cr0, [r2], {1}
  f4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  f8:	0000001c 	andeq	r0, r0, ip, lsl r0
  fc:	000000e8 	andeq	r0, r0, r8, ror #1
 100:	2000018c 	andcs	r0, r0, ip, lsl #3
 104:	0000003c 	andeq	r0, r0, ip, lsr r0
 108:	40080e41 	andmi	r0, r8, r1, asr #28
 10c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 110:	100e4101 	andne	r4, lr, r1, lsl #2
 114:	00070d41 	andeq	r0, r7, r1, asr #26
 118:	0000001c 	andeq	r0, r0, ip, lsl r0
 11c:	000000e8 	andeq	r0, r0, r8, ror #1
 120:	200001c8 	andcs	r0, r0, r8, asr #3
 124:	00000044 	andeq	r0, r0, r4, asr #32
 128:	40080e41 	andmi	r0, r8, r1, asr #28
 12c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 130:	100e4101 	andne	r4, lr, r1, lsl #2
 134:	00070d41 	andeq	r0, r7, r1, asr #26
 138:	0000001c 	andeq	r0, r0, ip, lsl r0
 13c:	000000e8 	andeq	r0, r0, r8, ror #1
 140:	2000020c 	andcs	r0, r0, ip, lsl #4
 144:	00000024 	andeq	r0, r0, r4, lsr #32
 148:	40080e41 	andmi	r0, r8, r1, asr #28
 14c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 150:	100e4101 	andne	r4, lr, r1, lsl #2
 154:	00070d41 	andeq	r0, r7, r1, asr #26
 158:	00000018 	andeq	r0, r0, r8, lsl r0
 15c:	000000e8 	andeq	r0, r0, r8, ror #1
 160:	20000230 	andcs	r0, r0, r0, lsr r2
 164:	00000064 	andeq	r0, r0, r4, rrx
 168:	40080e41 	andmi	r0, r8, r1, asr #28
 16c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 170:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 174:	0000001c 	andeq	r0, r0, ip, lsl r0
 178:	000000e8 	andeq	r0, r0, r8, ror #1
 17c:	20000294 	mulcs	r0, r4, r2
 180:	0000006c 	andeq	r0, r0, ip, rrx
 184:	40080e41 	andmi	r0, r8, r1, asr #28
 188:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 18c:	180e4101 	stmdane	lr, {r0, r8, lr}
 190:	00070d41 	andeq	r0, r7, r1, asr #26
 194:	0000001c 	andeq	r0, r0, ip, lsl r0
 198:	000000e8 	andeq	r0, r0, r8, ror #1
 19c:	20000300 	andcs	r0, r0, r0, lsl #6
 1a0:	0000002a 	andeq	r0, r0, sl, lsr #32
 1a4:	40080e41 	andmi	r0, r8, r1, asr #28
 1a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1ac:	100e4101 	andne	r4, lr, r1, lsl #2
 1b0:	00070d41 	andeq	r0, r7, r1, asr #26
 1b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b8:	000000e8 	andeq	r0, r0, r8, ror #1
 1bc:	2000032a 	andcs	r0, r0, sl, lsr #6
 1c0:	0000005a 	andeq	r0, r0, sl, asr r0
 1c4:	40080e41 	andmi	r0, r8, r1, asr #28
 1c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1cc:	100e4101 	andne	r4, lr, r1, lsl #2
 1d0:	00070d41 	andeq	r0, r7, r1, asr #26
 1d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d8:	000000e8 	andeq	r0, r0, r8, ror #1
 1dc:	20000384 	andcs	r0, r0, r4, lsl #7
 1e0:	00000040 	andeq	r0, r0, r0, asr #32
 1e4:	40080e41 	andmi	r0, r8, r1, asr #28
 1e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1ec:	100e4101 	andne	r4, lr, r1, lsl #2
 1f0:	00070d41 	andeq	r0, r7, r1, asr #26
 1f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f8:	000000e8 	andeq	r0, r0, r8, ror #1
 1fc:	200003c4 	andcs	r0, r0, r4, asr #7
 200:	00000046 	andeq	r0, r0, r6, asr #32
 204:	40080e41 	andmi	r0, r8, r1, asr #28
 208:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 20c:	100e4101 	andne	r4, lr, r1, lsl #2
 210:	00070d41 	andeq	r0, r7, r1, asr #26
 214:	00000018 	andeq	r0, r0, r8, lsl r0
 218:	000000e8 	andeq	r0, r0, r8, ror #1
 21c:	2000040a 	andcs	r0, r0, sl, lsl #8
 220:	00000056 	andeq	r0, r0, r6, asr r0
 224:	40080e41 	andmi	r0, r8, r1, asr #28
 228:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 22c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 230:	0000001c 	andeq	r0, r0, ip, lsl r0
 234:	000000e8 	andeq	r0, r0, r8, ror #1
 238:	20000460 	andcs	r0, r0, r0, ror #8
 23c:	00000066 	andeq	r0, r0, r6, rrx
 240:	40080e41 	andmi	r0, r8, r1, asr #28
 244:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 248:	100e4101 	andne	r4, lr, r1, lsl #2
 24c:	00070d41 	andeq	r0, r7, r1, asr #26
 250:	00000020 	andeq	r0, r0, r0, lsr #32
 254:	000000e8 	andeq	r0, r0, r8, ror #1
 258:	200004c6 	andcs	r0, r0, r6, asr #9
 25c:	00000186 	andeq	r0, r0, r6, lsl #3
 260:	400c0e41 	andmi	r0, ip, r1, asr #28
 264:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 268:	018e4002 	orreq	r4, lr, r2
 26c:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 270:	0000070d 	andeq	r0, r0, sp, lsl #14
 274:	0000000c 	andeq	r0, r0, ip
 278:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 27c:	7c010001 	stcvc	0, cr0, [r1], {1}
 280:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 284:	0000000c 	andeq	r0, r0, ip
 288:	00000274 	andeq	r0, r0, r4, ror r2
 28c:	2000064d 	andcs	r0, r0, sp, asr #12
 290:	0000010a 	andeq	r0, r0, sl, lsl #2
